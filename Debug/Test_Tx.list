
Test_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b098  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c7c  0800b1d8  0800b1d8  0001b1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be54  0800be54  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800be54  0800be54  0001be54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be5c  0800be5c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be5c  0800be5c  0001be5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be60  0800be60  0001be60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800be64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  20000060  0800bec4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b8  0800bec4  000208b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fb47  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043b3  00000000  00000000  0003fc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e00  00000000  00000000  00043fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001703  00000000  00000000  00045dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e10  00000000  00000000  000474cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e494  00000000  00000000  000682db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c408f  00000000  00000000  0008676f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008388  00000000  00000000  0014a800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00152b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000060 	.word	0x20000060
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b1c0 	.word	0x0800b1c0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000064 	.word	0x20000064
 800017c:	0800b1c0 	.word	0x0800b1c0

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002c4:	f080 811b 	bcs.w	80004fe <__udivmoddi4+0x28e>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8118 	bls.w	80004fe <__udivmoddi4+0x28e>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	f080 8106 	bcs.w	8000502 <__udivmoddi4+0x292>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8103 	bls.w	8000502 <__udivmoddi4+0x292>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ec 	beq.w	80004f8 <__udivmoddi4+0x288>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f7 	bhi.w	800052c <__udivmoddi4+0x2bc>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 808f 	bne.w	800047e <__udivmoddi4+0x20e>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80ba 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	4323      	orrs	r3, r4
 80003e2:	fa00 f901 	lsl.w	r9, r0, r1
 80003e6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fbb5 f8f0 	udiv	r8, r5, r0
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	fb00 5518 	mls	r5, r0, r8, r5
 80003f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003fc:	fb08 f50e 	mul.w	r5, r8, lr
 8000400:	42a5      	cmp	r5, r4
 8000402:	fa02 f201 	lsl.w	r2, r2, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f0 	udiv	r3, r4, r0
 8000428:	fb00 4413 	mls	r4, r0, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800044e:	fba0 8302 	umull	r8, r3, r0, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	429c      	cmp	r4, r3
 8000458:	46c6      	mov	lr, r8
 800045a:	461d      	mov	r5, r3
 800045c:	d355      	bcc.n	800050a <__udivmoddi4+0x29a>
 800045e:	d052      	beq.n	8000506 <__udivmoddi4+0x296>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb9 030e 	subs.w	r3, r9, lr
 8000466:	eb64 0405 	sbc.w	r4, r4, r5
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40cb      	lsrs	r3, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	431f      	orrs	r7, r3
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	2100      	movs	r1, #0
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1c3 0120 	rsb	r1, r3, #32
 8000482:	fa02 fc03 	lsl.w	ip, r2, r3
 8000486:	fa20 f201 	lsr.w	r2, r0, r1
 800048a:	fa25 f101 	lsr.w	r1, r5, r1
 800048e:	409d      	lsls	r5, r3
 8000490:	432a      	orrs	r2, r5
 8000492:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fbb1 f0f7 	udiv	r0, r1, r7
 800049e:	fb07 1510 	mls	r5, r7, r0, r1
 80004a2:	0c11      	lsrs	r1, r2, #16
 80004a4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a8:	fb00 f50e 	mul.w	r5, r0, lr
 80004ac:	428d      	cmp	r5, r1
 80004ae:	fa04 f403 	lsl.w	r4, r4, r3
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b4:	eb1c 0101 	adds.w	r1, ip, r1
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428d      	cmp	r5, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4461      	add	r1, ip
 80004c6:	1b49      	subs	r1, r1, r5
 80004c8:	b292      	uxth	r2, r2
 80004ca:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ce:	fb07 1115 	mls	r1, r7, r5, r1
 80004d2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d6:	fb05 f10e 	mul.w	r1, r5, lr
 80004da:	4291      	cmp	r1, r2
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x280>
 80004de:	eb1c 0202 	adds.w	r2, ip, r2
 80004e2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e6:	d216      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e8:	4291      	cmp	r1, r2
 80004ea:	d914      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	1a52      	subs	r2, r2, r1
 80004f2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f6:	e739      	b.n	800036c <__udivmoddi4+0xfc>
 80004f8:	4631      	mov	r1, r6
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xa2>
 80004fe:	4639      	mov	r1, r7
 8000500:	e6e7      	b.n	80002d2 <__udivmoddi4+0x62>
 8000502:	4610      	mov	r0, r2
 8000504:	e6fc      	b.n	8000300 <__udivmoddi4+0x90>
 8000506:	45c1      	cmp	r9, r8
 8000508:	d2aa      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050a:	ebb8 0e02 	subs.w	lr, r8, r2
 800050e:	eb63 050c 	sbc.w	r5, r3, ip
 8000512:	3801      	subs	r0, #1
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4645      	mov	r5, r8
 8000518:	e7ea      	b.n	80004f0 <__udivmoddi4+0x280>
 800051a:	4603      	mov	r3, r0
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4640      	mov	r0, r8
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	46d0      	mov	r8, sl
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3d02      	subs	r5, #2
 8000528:	4462      	add	r2, ip
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x124>
 800052c:	4608      	mov	r0, r1
 800052e:	e70b      	b.n	8000348 <__udivmoddi4+0xd8>
 8000530:	4464      	add	r4, ip
 8000532:	3802      	subs	r0, #2
 8000534:	e743      	b.n	80003be <__udivmoddi4+0x14e>
 8000536:	bf00      	nop

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <delay_us>:
#include "com_debug.h"
#include "stdio.h"
#include "stdarg.h"
#include "stdint.h"

void delay_us(uint32_t us) {
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <delay_us+0x30>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2200      	movs	r2, #0
 800054a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 800054c:	e002      	b.n	8000554 <delay_us+0x18>
		delay_counter_disp++;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	3301      	adds	r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <delay_us+0x30>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	429a      	cmp	r2, r3
 800055e:	d8f6      	bhi.n	800054e <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 8000560:	bf00      	nop
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	200003ec 	.word	0x200003ec

08000570 <myPrintf>:

void myPrintf(const char *fmt, ...) {
 8000570:	b40f      	push	{r0, r1, r2, r3}
 8000572:	b580      	push	{r7, lr}
 8000574:	b082      	sub	sp, #8
 8000576:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	2164      	movs	r1, #100	; 0x64
 8000584:	480a      	ldr	r0, [pc, #40]	; (80005b0 <myPrintf+0x40>)
 8000586:	f00a f98b 	bl	800a8a0 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 800058a:	4809      	ldr	r0, [pc, #36]	; (80005b0 <myPrintf+0x40>)
 800058c:	f000 f85c 	bl	8000648 <bufferSize>
 8000590:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) temp, len, 1000);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	b29a      	uxth	r2, r3
 8000596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059a:	4905      	ldr	r1, [pc, #20]	; (80005b0 <myPrintf+0x40>)
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <myPrintf+0x44>)
 800059e:	f004 fb89 	bl	8004cb4 <HAL_UART_Transmit>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005ac:	b004      	add	sp, #16
 80005ae:	4770      	bx	lr
 80005b0:	2000007c 	.word	0x2000007c
 80005b4:	2000026c 	.word	0x2000026c

080005b8 <myPrintf2>:

void myPrintf2(const char *fmt, ...) {
 80005b8:	b40f      	push	{r0, r1, r2, r3}
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b082      	sub	sp, #8
 80005be:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	693a      	ldr	r2, [r7, #16]
 80005ca:	2164      	movs	r1, #100	; 0x64
 80005cc:	480a      	ldr	r0, [pc, #40]	; (80005f8 <myPrintf2+0x40>)
 80005ce:	f00a f967 	bl	800a8a0 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <myPrintf2+0x40>)
 80005d4:	f000 f838 	bl	8000648 <bufferSize>
 80005d8:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) temp, len, 1000);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	b29a      	uxth	r2, r3
 80005de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e2:	4905      	ldr	r1, [pc, #20]	; (80005f8 <myPrintf2+0x40>)
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <myPrintf2+0x44>)
 80005e6:	f004 fb65 	bl	8004cb4 <HAL_UART_Transmit>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005f4:	b004      	add	sp, #16
 80005f6:	4770      	bx	lr
 80005f8:	200000e0 	.word	0x200000e0
 80005fc:	20000300 	.word	0x20000300

08000600 <myPrintf3>:

void myPrintf3(const char *fmt, ...) {
 8000600:	b40f      	push	{r0, r1, r2, r3}
 8000602:	b580      	push	{r7, lr}
 8000604:	b082      	sub	sp, #8
 8000606:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	2164      	movs	r1, #100	; 0x64
 8000614:	480a      	ldr	r0, [pc, #40]	; (8000640 <myPrintf3+0x40>)
 8000616:	f00a f943 	bl	800a8a0 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 800061a:	4809      	ldr	r0, [pc, #36]	; (8000640 <myPrintf3+0x40>)
 800061c:	f000 f814 	bl	8000648 <bufferSize>
 8000620:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*) temp, len, 1000);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	b29a      	uxth	r2, r3
 8000626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062a:	4905      	ldr	r1, [pc, #20]	; (8000640 <myPrintf3+0x40>)
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <myPrintf3+0x44>)
 800062e:	f004 fb41 	bl	8004cb4 <HAL_UART_Transmit>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800063c:	b004      	add	sp, #16
 800063e:	4770      	bx	lr
 8000640:	20000144 	.word	0x20000144
 8000644:	200001d8 	.word	0x200001d8

08000648 <bufferSize>:

int bufferSize(char *buffer) {
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 8000654:	e002      	b.n	800065c <bufferSize+0x14>
		i++;
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	3301      	adds	r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	607a      	str	r2, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f6      	bne.n	8000656 <bufferSize+0xe>
	return i;
 8000668:	68fb      	ldr	r3, [r7, #12]
}
 800066a:	4618      	mov	r0, r3
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800067c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000680:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000682:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4313      	orrs	r3, r2
 800068a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800068c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000690:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4013      	ands	r3, r2
 8000696:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000698:	68fb      	ldr	r3, [r7, #12]
}
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <HAL_TIM_PeriodElapsedCallback>:
void DioIrqHndlr(RadioIrqMasks_t radioIrq);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a2b      	ldr	r2, [pc, #172]	; (800075c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d14e      	bne.n	8000752 <HAL_TIM_PeriodElapsedCallback+0xae>
		mSEC++;
 80006b4:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80006be:	801a      	strh	r2, [r3, #0]

		if (mSEC > 999) {
 80006c0:	4b27      	ldr	r3, [pc, #156]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006c8:	d308      	bcc.n	80006dc <HAL_TIM_PeriodElapsedCallback+0x38>
			mSEC = 0;
 80006ca:	4b25      	ldr	r3, [pc, #148]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	801a      	strh	r2, [r3, #0]
			sec++;
 80006d0:	4b24      	ldr	r3, [pc, #144]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80006da:	701a      	strb	r2, [r3, #0]
		}

		if (sec > 0) {
 80006dc:	4b21      	ldr	r3, [pc, #132]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d00f      	beq.n	8000704 <HAL_TIM_PeriodElapsedCallback+0x60>
			if (sec % 5 == 0) {
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80006ea:	fba3 1302 	umull	r1, r3, r3, r2
 80006ee:	0899      	lsrs	r1, r3, #2
 80006f0:	460b      	mov	r3, r1
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	440b      	add	r3, r1
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d102      	bne.n	8000704 <HAL_TIM_PeriodElapsedCallback+0x60>
				TX_FLAG = 1;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
			}
		}

		if (sec > 59) {
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b3b      	cmp	r3, #59	; 0x3b
 800070a:	d908      	bls.n	800071e <HAL_TIM_PeriodElapsedCallback+0x7a>
			sec = 0;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
			min++;
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	3301      	adds	r3, #1
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800071c:	701a      	strb	r2, [r3, #0]
		}

		if (min > 59) {
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b3b      	cmp	r3, #59	; 0x3b
 8000724:	d908      	bls.n	8000738 <HAL_TIM_PeriodElapsedCallback+0x94>
			min = 0;
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
			hour++;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	b2da      	uxtb	r2, r3
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000736:	701a      	strb	r2, [r3, #0]
		}

		if (hour > 23) {
 8000738:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b17      	cmp	r3, #23
 800073e:	d908      	bls.n	8000752 <HAL_TIM_PeriodElapsedCallback+0xae>
			hour = 0;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
			min = 0;
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
			sec = 0;
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	200003a0 	.word	0x200003a0
 8000760:	2000059e 	.word	0x2000059e
 8000764:	200005a0 	.word	0x200005a0
 8000768:	cccccccd 	.word	0xcccccccd
 800076c:	2000059c 	.word	0x2000059c
 8000770:	200005a1 	.word	0x200005a1
 8000774:	200005a2 	.word	0x200005a2

08000778 <calc_CRC>:

uint16_t calc_CRC(const uint8_t *data, uint8_t data_length) {
 8000778:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800077c:	b08b      	sub	sp, #44	; 0x2c
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	460b      	mov	r3, r1
 8000784:	70fb      	strb	r3, [r7, #3]
 8000786:	466b      	mov	r3, sp
 8000788:	4618      	mov	r0, r3

	uint16_t crcReg = 0xFFFF;	// Initialize the CRC register with 0xFFFF
 800078a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800078e:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t calc = 0x8408;		// Polynomial for CRC-16
 8000790:	f248 4308 	movw	r3, #33800	; 0x8408
 8000794:	837b      	strh	r3, [r7, #26]
	uint16_t w;
	int i, j;
	uint8_t calc_data[DATA_SIZE];  // in 16 bytes, 14 are data bytes
 8000796:	4b37      	ldr	r3, [pc, #220]	; (8000874 <calc_CRC+0xfc>)
 8000798:	7819      	ldrb	r1, [r3, #0]
 800079a:	460b      	mov	r3, r1
 800079c:	3b01      	subs	r3, #1
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	b2cb      	uxtb	r3, r1
 80007a2:	2200      	movs	r2, #0
 80007a4:	4698      	mov	r8, r3
 80007a6:	4691      	mov	r9, r2
 80007a8:	f04f 0200 	mov.w	r2, #0
 80007ac:	f04f 0300 	mov.w	r3, #0
 80007b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007bc:	b2cb      	uxtb	r3, r1
 80007be:	2200      	movs	r2, #0
 80007c0:	461c      	mov	r4, r3
 80007c2:	4615      	mov	r5, r2
 80007c4:	f04f 0200 	mov.w	r2, #0
 80007c8:	f04f 0300 	mov.w	r3, #0
 80007cc:	00eb      	lsls	r3, r5, #3
 80007ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007d2:	00e2      	lsls	r2, r4, #3
 80007d4:	460b      	mov	r3, r1
 80007d6:	3307      	adds	r3, #7
 80007d8:	08db      	lsrs	r3, r3, #3
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	ebad 0d03 	sub.w	sp, sp, r3
 80007e0:	466b      	mov	r3, sp
 80007e2:	3300      	adds	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]

	// Copy data into calc_data
	for (i = 0; i < data_length; i++) {
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
 80007ea:	e034      	b.n	8000856 <calc_CRC+0xde>
		calc_data[i] = data[i];
 80007ec:	6a3b      	ldr	r3, [r7, #32]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	7819      	ldrb	r1, [r3, #0]
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	6a3b      	ldr	r3, [r7, #32]
 80007f8:	4413      	add	r3, r2
 80007fa:	460a      	mov	r2, r1
 80007fc:	701a      	strb	r2, [r3, #0]
		// Iterate over each byte of data
		for (j = 0; j < 8; j++) {
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
 8000802:	e022      	b.n	800084a <calc_CRC+0xd2>
			w = (crcReg ^ calc_data[i]) & 0x0001; // XOR the LSB of crcReg with the LSB of calc_data
 8000804:	693a      	ldr	r2, [r7, #16]
 8000806:	6a3b      	ldr	r3, [r7, #32]
 8000808:	4413      	add	r3, r2
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b29a      	uxth	r2, r3
 800080e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000810:	4053      	eors	r3, r2
 8000812:	b29b      	uxth	r3, r3
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	81fb      	strh	r3, [r7, #14]
			crcReg = crcReg >> 1;			// Right-shift the crcReg by 1 bit
 800081a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (w == 1) {
 8000820:	89fb      	ldrh	r3, [r7, #14]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d103      	bne.n	800082e <calc_CRC+0xb6>
				crcReg = crcReg ^ calc;	// If w is 1, XOR the crcReg with the polynomial
 8000826:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000828:	8b7b      	ldrh	r3, [r7, #26]
 800082a:	4053      	eors	r3, r2
 800082c:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
			calc_data[i] = calc_data[i] >> 1;// Right-shift the data byte by 1 bit
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	6a3b      	ldr	r3, [r7, #32]
 8000832:	4413      	add	r3, r2
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	085b      	lsrs	r3, r3, #1
 8000838:	b2d9      	uxtb	r1, r3
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	6a3b      	ldr	r3, [r7, #32]
 800083e:	4413      	add	r3, r2
 8000840:	460a      	mov	r2, r1
 8000842:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; j++) {
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	3301      	adds	r3, #1
 8000848:	61fb      	str	r3, [r7, #28]
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	2b07      	cmp	r3, #7
 800084e:	ddd9      	ble.n	8000804 <calc_CRC+0x8c>
	for (i = 0; i < data_length; i++) {
 8000850:	6a3b      	ldr	r3, [r7, #32]
 8000852:	3301      	adds	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
 8000856:	78fb      	ldrb	r3, [r7, #3]
 8000858:	6a3a      	ldr	r2, [r7, #32]
 800085a:	429a      	cmp	r2, r3
 800085c:	dbc6      	blt.n	80007ec <calc_CRC+0x74>
		}
	}
	crcReg = crcReg ^ 0xFFFF;						// Final XOR with 0xFFFF
 800085e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000860:	43db      	mvns	r3, r3
 8000862:	84fb      	strh	r3, [r7, #38]	; 0x26
	return crcReg;
 8000864:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000866:	4685      	mov	sp, r0
}
 8000868:	4618      	mov	r0, r3
 800086a:	372c      	adds	r7, #44	; 0x2c
 800086c:	46bd      	mov	sp, r7
 800086e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000872:	4770      	bx	lr
 8000874:	20000001 	.word	0x20000001

08000878 <radioTxData>:

void radioTxData() {
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	tx_cmd[0] = 0x42;
 800087c:	4b22      	ldr	r3, [pc, #136]	; (8000908 <radioTxData+0x90>)
 800087e:	2242      	movs	r2, #66	; 0x42
 8000880:	701a      	strb	r2, [r3, #0]
	tx_cmd[1] = 0x4D;
 8000882:	4b21      	ldr	r3, [pc, #132]	; (8000908 <radioTxData+0x90>)
 8000884:	224d      	movs	r2, #77	; 0x4d
 8000886:	705a      	strb	r2, [r3, #1]

	//getSoilSensorData();
	tx_cmd[2] = 0x01; 		       //gst data (GST ID)
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <radioTxData+0x90>)
 800088a:	2201      	movs	r2, #1
 800088c:	709a      	strb	r2, [r3, #2]
	//tx_cmd[3] = read_soil_value >> 8 & 0xff; 	  //gst DATA (SOIL SENSOR - MSB)
	//tx_cmd[4] = read_soil_value & 0xff;     //gst data (SOIL SENSOR LSB)

	tx_cmd[3] = 0x1A; 	  //gst DATA (SOIL SENSOR - MSB)
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <radioTxData+0x90>)
 8000890:	221a      	movs	r2, #26
 8000892:	70da      	strb	r2, [r3, #3]
	tx_cmd[4] = 0x23;     //gst data (SOIL SENSOR LSB)
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <radioTxData+0x90>)
 8000896:	2223      	movs	r2, #35	; 0x23
 8000898:	711a      	strb	r2, [r3, #4]

	tx_cmd[5] = 0x33;    //gst data
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <radioTxData+0x90>)
 800089c:	2233      	movs	r2, #51	; 0x33
 800089e:	715a      	strb	r2, [r3, #5]
	tx_cmd[6] = 0x44;
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <radioTxData+0x90>)
 80008a2:	2244      	movs	r2, #68	; 0x44
 80008a4:	719a      	strb	r2, [r3, #6]
	tx_cmd[7] = 0x55;
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <radioTxData+0x90>)
 80008a8:	2255      	movs	r2, #85	; 0x55
 80008aa:	71da      	strb	r2, [r3, #7]
	tx_cmd[8] = 0x66;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <radioTxData+0x90>)
 80008ae:	2266      	movs	r2, #102	; 0x66
 80008b0:	721a      	strb	r2, [r3, #8]
	tx_cmd[9] = 0x77;
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <radioTxData+0x90>)
 80008b4:	2277      	movs	r2, #119	; 0x77
 80008b6:	725a      	strb	r2, [r3, #9]
	tx_cmd[10] = 0x88;
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <radioTxData+0x90>)
 80008ba:	2288      	movs	r2, #136	; 0x88
 80008bc:	729a      	strb	r2, [r3, #10]
	tx_cmd[11] = 0x99;
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <radioTxData+0x90>)
 80008c0:	2299      	movs	r2, #153	; 0x99
 80008c2:	72da      	strb	r2, [r3, #11]
	tx_cmd[12] = 0x38;
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <radioTxData+0x90>)
 80008c6:	2238      	movs	r2, #56	; 0x38
 80008c8:	731a      	strb	r2, [r3, #12]
	tx_cmd[13] = 0xA7;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <radioTxData+0x90>)
 80008cc:	22a7      	movs	r2, #167	; 0xa7
 80008ce:	735a      	strb	r2, [r3, #13]
	crc = 0;
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <radioTxData+0x94>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	801a      	strh	r2, [r3, #0]
	crc = calc_CRC(tx_cmd, DATA_SIZE);
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <radioTxData+0x98>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4619      	mov	r1, r3
 80008dc:	480a      	ldr	r0, [pc, #40]	; (8000908 <radioTxData+0x90>)
 80008de:	f7ff ff4b 	bl	8000778 <calc_CRC>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <radioTxData+0x94>)
 80008e8:	801a      	strh	r2, [r3, #0]
	tx_cmd[14] = crc >> 8;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <radioTxData+0x94>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	0a1b      	lsrs	r3, r3, #8
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <radioTxData+0x90>)
 80008f6:	739a      	strb	r2, [r3, #14]
	tx_cmd[15] = crc;
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <radioTxData+0x94>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b02      	ldr	r3, [pc, #8]	; (8000908 <radioTxData+0x90>)
 8000900:	73da      	strb	r2, [r3, #15]
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000448 	.word	0x20000448
 800090c:	2000046c 	.word	0x2000046c
 8000910:	20000001 	.word	0x20000001

08000914 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800091a:	f001 f939 	bl	8001b90 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800091e:	f000 f8e3 	bl	8000ae8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000922:	f000 fad9 	bl	8000ed8 <MX_GPIO_Init>
	MX_SubGHz_Phy_Init();
 8000926:	f009 fbea 	bl	800a0fe <MX_SubGHz_Phy_Init>
	MX_USART1_UART_Init();
 800092a:	f000 f989 	bl	8000c40 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 800092e:	f000 fa85 	bl	8000e3c <MX_TIM2_Init>
	MX_USART2_UART_Init();
 8000932:	f000 f9d1 	bl	8000cd8 <MX_USART2_UART_Init>
	MX_LPUART1_UART_Init();
 8000936:	f000 f937 	bl	8000ba8 <MX_LPUART1_UART_Init>
	MX_TIM1_Init();
 800093a:	f000 fa2b 	bl	8000d94 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 800093e:	4854      	ldr	r0, [pc, #336]	; (8000a90 <main+0x17c>)
 8000940:	f003 fd12 	bl	8004368 <HAL_TIM_Base_Start>

	pkt_params.PacketType = PACKET_TYPE_LORA;
 8000944:	4b53      	ldr	r3, [pc, #332]	; (8000a94 <main+0x180>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.LoRa.PayloadLength = PAYLOAD_LENGTH;
 800094a:	4b52      	ldr	r3, [pc, #328]	; (8000a94 <main+0x180>)
 800094c:	2210      	movs	r2, #16
 800094e:	745a      	strb	r2, [r3, #17]
	pkt_params.Params.LoRa.PreambleLength = 8;
 8000950:	4b50      	ldr	r3, [pc, #320]	; (8000a94 <main+0x180>)
 8000952:	2208      	movs	r2, #8
 8000954:	81da      	strh	r2, [r3, #14]
	pkt_params.Params.LoRa.HeaderType = LORA_PACKET_IMPLICIT;
 8000956:	4b4f      	ldr	r3, [pc, #316]	; (8000a94 <main+0x180>)
 8000958:	2201      	movs	r2, #1
 800095a:	741a      	strb	r2, [r3, #16]
	pkt_params.Params.LoRa.CrcMode = LORA_CRC_ON;
 800095c:	4b4d      	ldr	r3, [pc, #308]	; (8000a94 <main+0x180>)
 800095e:	2201      	movs	r2, #1
 8000960:	749a      	strb	r2, [r3, #18]
	pkt_params.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8000962:	4b4c      	ldr	r3, [pc, #304]	; (8000a94 <main+0x180>)
 8000964:	2200      	movs	r2, #0
 8000966:	74da      	strb	r2, [r3, #19]

	mod_params.PacketType = PACKET_TYPE_LORA;
 8000968:	4b4b      	ldr	r3, [pc, #300]	; (8000a98 <main+0x184>)
 800096a:	2201      	movs	r2, #1
 800096c:	701a      	strb	r2, [r3, #0]
	mod_params.Params.LoRa.Bandwidth = LORA_BW_031;
 800096e:	4b4a      	ldr	r3, [pc, #296]	; (8000a98 <main+0x184>)
 8000970:	2202      	movs	r2, #2
 8000972:	765a      	strb	r2, [r3, #25]
	mod_params.Params.LoRa.SpreadingFactor = LORA_SF10;
 8000974:	4b48      	ldr	r3, [pc, #288]	; (8000a98 <main+0x184>)
 8000976:	220a      	movs	r2, #10
 8000978:	761a      	strb	r2, [r3, #24]
	mod_params.Params.LoRa.CodingRate = LORA_CR_4_8;
 800097a:	4b47      	ldr	r3, [pc, #284]	; (8000a98 <main+0x184>)
 800097c:	2204      	movs	r2, #4
 800097e:	769a      	strb	r2, [r3, #26]
//	mod_params.Params.LoRa.LowDatarateOptimize = 0;
	mod_params.Params.LoRa.LowDatarateOptimize = 1; // Enable low data rate optimization
 8000980:	4b45      	ldr	r3, [pc, #276]	; (8000a98 <main+0x184>)
 8000982:	2201      	movs	r2, #1
 8000984:	76da      	strb	r2, [r3, #27]

	SUBGRF_Init(DioIrqHndlr);
 8000986:	4845      	ldr	r0, [pc, #276]	; (8000a9c <main+0x188>)
 8000988:	f008 f970 	bl	8008c6c <SUBGRF_Init>
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 800098c:	2100      	movs	r1, #0
 800098e:	2000      	movs	r0, #0
 8000990:	f008 ffd8 	bl	8009944 <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPayload(tx_cmd, PAYLOAD_LENGTH);
 8000994:	2110      	movs	r1, #16
 8000996:	4842      	ldr	r0, [pc, #264]	; (8000aa0 <main+0x18c>)
 8000998:	f008 f9ba 	bl	8008d10 <SUBGRF_SetPayload>
	SUBGRF_SetPacketParams(&pkt_params);
 800099c:	483d      	ldr	r0, [pc, #244]	; (8000a94 <main+0x180>)
 800099e:	f008 ff33 	bl	8009808 <SUBGRF_SetPacketParams>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 80009a2:	4a40      	ldr	r2, [pc, #256]	; (8000aa4 <main+0x190>)
 80009a4:	463b      	mov	r3, r7
 80009a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80009ae:	463b      	mov	r3, r7
 80009b0:	4618      	mov	r0, r3
 80009b2:	f008 f9f2 	bl	8008d9a <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 80009b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80009ba:	f008 fa3d 	bl	8008e38 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetRfFrequency(FREQ_402_MHZ);
 80009be:	483a      	ldr	r0, [pc, #232]	; (8000aa8 <main+0x194>)
 80009c0:	f008 fd16 	bl	80093f0 <SUBGRF_SetRfFrequency>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 80009c4:	2301      	movs	r3, #1
 80009c6:	2200      	movs	r2, #0
 80009c8:	2107      	movs	r1, #7
 80009ca:	2004      	movs	r0, #4
 80009cc:	f008 fc92 	bl	80092f4 <SUBGRF_SetPaConfig>
	//SUBGRF_SetTxParams(RFO_HP, POWER, RAMP_TIME);
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME); // Set to RFO_LP for low power
 80009d0:	2203      	movs	r2, #3
 80009d2:	210e      	movs	r1, #14
 80009d4:	2001      	movs	r0, #1
 80009d6:	f008 fd77 	bl	80094c8 <SUBGRF_SetTxParams>
	SUBGRF_SetModulationParams(&mod_params);
 80009da:	482f      	ldr	r0, [pc, #188]	; (8000a98 <main+0x184>)
 80009dc:	f008 fe42 	bl	8009664 <SUBGRF_SetModulationParams>
	SUBGRF_SetDioIrqParams(
 80009e0:	2300      	movs	r3, #0
 80009e2:	2200      	movs	r2, #0
 80009e4:	f240 210f 	movw	r1, #527	; 0x20f
 80009e8:	f240 200f 	movw	r0, #527	; 0x20f
 80009ec:	f008 fca4 	bl	8009338 <SUBGRF_SetDioIrqParams>
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);

	myPrintf("\n########## Test code: BEGIN ##########\r\n");
 80009f0:	482e      	ldr	r0, [pc, #184]	; (8000aac <main+0x198>)
 80009f2:	f7ff fdbd 	bl	8000570 <myPrintf>
	myPrintf("########## UART1 (PA9_TX, PA10_RX): 		##########\r\n");
 80009f6:	482e      	ldr	r0, [pc, #184]	; (8000ab0 <main+0x19c>)
 80009f8:	f7ff fdba 	bl	8000570 <myPrintf>
	myPrintf("Pin Description: Debug COM_MCU\r\n");
 80009fc:	482d      	ldr	r0, [pc, #180]	; (8000ab4 <main+0x1a0>)
 80009fe:	f7ff fdb7 	bl	8000570 <myPrintf>
	myPrintf("If this message pop up then debug COM MCU is working!!!\r\n");
 8000a02:	482d      	ldr	r0, [pc, #180]	; (8000ab8 <main+0x1a4>)
 8000a04:	f7ff fdb4 	bl	8000570 <myPrintf>
	myPrintf("__________________________________________________\r\n");
 8000a08:	482c      	ldr	r0, [pc, #176]	; (8000abc <main+0x1a8>)
 8000a0a:	f7ff fdb1 	bl	8000570 <myPrintf>
	myPrintf("________________Waiting to receive COM Command____________\r\n");
 8000a0e:	482c      	ldr	r0, [pc, #176]	; (8000ac0 <main+0x1ac>)
 8000a10:	f7ff fdae 	bl	8000570 <myPrintf>
	myPrintf("SEND 'UART02' to test UART2 OBC'\r\n");
 8000a14:	482b      	ldr	r0, [pc, #172]	; (8000ac4 <main+0x1b0>)
 8000a16:	f7ff fdab 	bl	8000570 <myPrintf>
	myPrintf("SEND 'LPUART' to test LPUART OBC'\r\n");
 8000a1a:	482b      	ldr	r0, [pc, #172]	; (8000ac8 <main+0x1b4>)
 8000a1c:	f7ff fda8 	bl	8000570 <myPrintf>
	myPrintf("SEND '3RADIO' to test RFO LP Radio'\r\n");
 8000a20:	482a      	ldr	r0, [pc, #168]	; (8000acc <main+0x1b8>)
 8000a22:	f7ff fda5 	bl	8000570 <myPrintf>
	myPrintf("__________________________________________________\r\n");
 8000a26:	4825      	ldr	r0, [pc, #148]	; (8000abc <main+0x1a8>)
 8000a28:	f7ff fda2 	bl	8000570 <myPrintf>

	HAL_UART_Receive_IT(&huart1, rxCMD, 6);
 8000a2c:	2206      	movs	r2, #6
 8000a2e:	4928      	ldr	r1, [pc, #160]	; (8000ad0 <main+0x1bc>)
 8000a30:	4828      	ldr	r0, [pc, #160]	; (8000ad4 <main+0x1c0>)
 8000a32:	f004 f9c5 	bl	8004dc0 <HAL_UART_Receive_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a3c:	4826      	ldr	r0, [pc, #152]	; (8000ad8 <main+0x1c4>)
 8000a3e:	f001 fc3b 	bl	80022b8 <HAL_GPIO_WritePin>
		delay_us(1000000);
 8000a42:	4826      	ldr	r0, [pc, #152]	; (8000adc <main+0x1c8>)
 8000a44:	f7ff fd7a 	bl	800053c <delay_us>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a4e:	4822      	ldr	r0, [pc, #136]	; (8000ad8 <main+0x1c4>)
 8000a50:	f001 fc32 	bl	80022b8 <HAL_GPIO_WritePin>
		delay_us(1000000);
 8000a54:	4821      	ldr	r0, [pc, #132]	; (8000adc <main+0x1c8>)
 8000a56:	f7ff fd71 	bl	800053c <delay_us>

		if (TX_FLAG) {
 8000a5a:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <main+0x1cc>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d013      	beq.n	8000a8a <main+0x176>
			radioTxData();
 8000a62:	f7ff ff09 	bl	8000878 <radioTxData>
			SUBGRF_SetRfFrequency(FREQ_402_MHZ);
 8000a66:	4810      	ldr	r0, [pc, #64]	; (8000aa8 <main+0x194>)
 8000a68:	f008 fcc2 	bl	80093f0 <SUBGRF_SetRfFrequency>
			//SUBGRF_SetSwitch(RFO_HP, RFSWITCH_TX); /*Set RF switch*/
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX); /*Set RF switch*/
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f009 f906 	bl	8009c80 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_cmd, 16, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2110      	movs	r1, #16
 8000a78:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <main+0x18c>)
 8000a7a:	f008 f97b 	bl	8008d74 <SUBGRF_SendPayload>
			counter++;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <main+0x1d0>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	3301      	adds	r3, #1
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <main+0x1d0>)
 8000a88:	701a      	strb	r2, [r3, #0]
		}

		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 8000a8a:	f009 fb40 	bl	800a10e <MX_SubGHz_Phy_Process>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000a8e:	e7d2      	b.n	8000a36 <main+0x122>
 8000a90:	200003ec 	.word	0x200003ec
 8000a94:	200001a8 	.word	0x200001a8
 8000a98:	200001bc 	.word	0x200001bc
 8000a9c:	08001395 	.word	0x08001395
 8000aa0:	20000448 	.word	0x20000448
 8000aa4:	0800b380 	.word	0x0800b380
 8000aa8:	17fbc158 	.word	0x17fbc158
 8000aac:	0800b1d8 	.word	0x0800b1d8
 8000ab0:	0800b204 	.word	0x0800b204
 8000ab4:	0800b238 	.word	0x0800b238
 8000ab8:	0800b25c 	.word	0x0800b25c
 8000abc:	0800b298 	.word	0x0800b298
 8000ac0:	0800b2d0 	.word	0x0800b2d0
 8000ac4:	0800b310 	.word	0x0800b310
 8000ac8:	0800b334 	.word	0x0800b334
 8000acc:	0800b358 	.word	0x0800b358
 8000ad0:	20000438 	.word	0x20000438
 8000ad4:	2000026c 	.word	0x2000026c
 8000ad8:	48000400 	.word	0x48000400
 8000adc:	000f4240 	.word	0x000f4240
 8000ae0:	2000059c 	.word	0x2000059c
 8000ae4:	2000046a 	.word	0x2000046a

08000ae8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b09a      	sub	sp, #104	; 0x68
 8000aec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000aee:	f107 0320 	add.w	r3, r7, #32
 8000af2:	2248      	movs	r2, #72	; 0x48
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f009 fee0 	bl	800a8bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]
 8000b0a:	615a      	str	r2, [r3, #20]
 8000b0c:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b0e:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <SystemClock_Config+0xbc>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b16:	4a23      	ldr	r2, [pc, #140]	; (8000ba4 <SystemClock_Config+0xbc>)
 8000b18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1c:	6013      	str	r3, [r2, #0]
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <SystemClock_Config+0xbc>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8000b2e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000b40:	2310      	movs	r3, #16
 8000b42:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 8000b44:	2306      	movs	r3, #6
 8000b46:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b4e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b52:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b58:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 fe94 	bl	800288c <HAL_RCC_OscConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0x86>
		Error_Handler();
 8000b6a:	f000 fd3b 	bl	80015e4 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 8000b6e:	234f      	movs	r3, #79	; 0x4f
 8000b70:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b72:	2303      	movs	r3, #3
 8000b74:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2102      	movs	r1, #2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fa00 	bl	8002f90 <HAL_RCC_ClockConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0xb2>
		Error_Handler();
 8000b96:	f000 fd25 	bl	80015e4 <Error_Handler>
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	3768      	adds	r7, #104	; 0x68
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	58000400 	.word	0x58000400

08000ba8 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <MX_LPUART1_UART_Init+0x90>)
 8000bae:	4a23      	ldr	r2, [pc, #140]	; (8000c3c <MX_LPUART1_UART_Init+0x94>)
 8000bb0:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <MX_LPUART1_UART_Init+0x90>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <MX_LPUART1_UART_Init+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <MX_LPUART1_UART_Init+0x90>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <MX_LPUART1_UART_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_LPUART1_UART_Init+0x90>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_LPUART1_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_LPUART1_UART_Init+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <MX_LPUART1_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_LPUART1_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000bea:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <MX_LPUART1_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8000bf0:	4811      	ldr	r0, [pc, #68]	; (8000c38 <MX_LPUART1_UART_Init+0x90>)
 8000bf2:	f004 f80f 	bl	8004c14 <HAL_UART_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_LPUART1_UART_Init+0x58>
		Error_Handler();
 8000bfc:	f000 fcf2 	bl	80015e4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 8000c00:	2100      	movs	r1, #0
 8000c02:	480d      	ldr	r0, [pc, #52]	; (8000c38 <MX_LPUART1_UART_Init+0x90>)
 8000c04:	f005 ffcb 	bl	8006b9e <HAL_UARTEx_SetTxFifoThreshold>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_LPUART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000c0e:	f000 fce9 	bl	80015e4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 8000c12:	2100      	movs	r1, #0
 8000c14:	4808      	ldr	r0, [pc, #32]	; (8000c38 <MX_LPUART1_UART_Init+0x90>)
 8000c16:	f006 f800 	bl	8006c1a <HAL_UARTEx_SetRxFifoThreshold>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_LPUART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000c20:	f000 fce0 	bl	80015e4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <MX_LPUART1_UART_Init+0x90>)
 8000c26:	f005 ff82 	bl	8006b2e <HAL_UARTEx_DisableFifoMode>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_LPUART1_UART_Init+0x8c>
		Error_Handler();
 8000c30:	f000 fcd8 	bl	80015e4 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200001d8 	.word	0x200001d8
 8000c3c:	40008000 	.word	0x40008000

08000c40 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000c44:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c46:	4a23      	ldr	r2, [pc, #140]	; (8000cd4 <MX_USART1_UART_Init+0x94>)
 8000c48:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c50:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000c88:	4811      	ldr	r0, [pc, #68]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c8a:	f003 ffc3 	bl	8004c14 <HAL_UART_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8000c94:	f000 fca6 	bl	80015e4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000c9c:	f005 ff7f 	bl	8006b9e <HAL_UARTEx_SetTxFifoThreshold>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000ca6:	f000 fc9d 	bl	80015e4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8000caa:	2100      	movs	r1, #0
 8000cac:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000cae:	f005 ffb4 	bl	8006c1a <HAL_UARTEx_SetRxFifoThreshold>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000cb8:	f000 fc94 	bl	80015e4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8000cbc:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <MX_USART1_UART_Init+0x90>)
 8000cbe:	f005 ff36 	bl	8006b2e <HAL_UARTEx_DisableFifoMode>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8000cc8:	f000 fc8c 	bl	80015e4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	2000026c 	.word	0x2000026c
 8000cd4:	40013800 	.word	0x40013800

08000cd8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000cdc:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <MX_USART2_UART_Init+0x90>)
 8000cde:	4a23      	ldr	r2, [pc, #140]	; (8000d6c <MX_USART2_UART_Init+0x94>)
 8000ce0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <MX_USART2_UART_Init+0x90>)
 8000ce4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <MX_USART2_UART_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <MX_USART2_UART_Init+0x90>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <MX_USART2_UART_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <MX_USART2_UART_Init+0x90>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <MX_USART2_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <MX_USART2_UART_Init+0x90>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_USART2_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <MX_USART2_UART_Init+0x90>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <MX_USART2_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000d20:	4811      	ldr	r0, [pc, #68]	; (8000d68 <MX_USART2_UART_Init+0x90>)
 8000d22:	f003 ff77 	bl	8004c14 <HAL_UART_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8000d2c:	f000 fc5a 	bl	80015e4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000d30:	2100      	movs	r1, #0
 8000d32:	480d      	ldr	r0, [pc, #52]	; (8000d68 <MX_USART2_UART_Init+0x90>)
 8000d34:	f005 ff33 	bl	8006b9e <HAL_UARTEx_SetTxFifoThreshold>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000d3e:	f000 fc51 	bl	80015e4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000d42:	2100      	movs	r1, #0
 8000d44:	4808      	ldr	r0, [pc, #32]	; (8000d68 <MX_USART2_UART_Init+0x90>)
 8000d46:	f005 ff68 	bl	8006c1a <HAL_UARTEx_SetRxFifoThreshold>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000d50:	f000 fc48 	bl	80015e4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000d54:	4804      	ldr	r0, [pc, #16]	; (8000d68 <MX_USART2_UART_Init+0x90>)
 8000d56:	f005 feea 	bl	8006b2e <HAL_UARTEx_DisableFifoMode>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 8000d60:	f000 fc40 	bl	80015e4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000300 	.word	0x20000300
 8000d6c:	40004400 	.word	0x40004400

08000d70 <MX_SUBGHZ_Init>:
/**
 * @brief SUBGHZ Initialization Function
 * @param None
 * @retval None
 */
void MX_SUBGHZ_Init(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	/* USER CODE END SUBGHZ_Init 0 */

	/* USER CODE BEGIN SUBGHZ_Init 1 */

	/* USER CODE END SUBGHZ_Init 1 */
	hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_SUBGHZ_Init+0x20>)
 8000d76:	2210      	movs	r2, #16
 8000d78:	601a      	str	r2, [r3, #0]
	if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_SUBGHZ_Init+0x20>)
 8000d7c:	f002 fe7c 	bl	8003a78 <HAL_SUBGHZ_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_SUBGHZ_Init+0x1a>
		Error_Handler();
 8000d86:	f000 fc2d 	bl	80015e4 <Error_Handler>
	}
	/* USER CODE BEGIN SUBGHZ_Init 2 */

	/* USER CODE END SUBGHZ_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000394 	.word	0x20000394

08000d94 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000db2:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <MX_TIM1_Init+0xa0>)
 8000db4:	4a20      	ldr	r2, [pc, #128]	; (8000e38 <MX_TIM1_Init+0xa4>)
 8000db6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 48 - 1;
 8000db8:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <MX_TIM1_Init+0xa0>)
 8000dba:	222f      	movs	r2, #47	; 0x2f
 8000dbc:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <MX_TIM1_Init+0xa0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <MX_TIM1_Init+0xa0>)
 8000dc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dca:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_TIM1_Init+0xa0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_TIM1_Init+0xa0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <MX_TIM1_Init+0xa0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000dde:	4815      	ldr	r0, [pc, #84]	; (8000e34 <MX_TIM1_Init+0xa0>)
 8000de0:	f003 fa6a 	bl	80042b8 <HAL_TIM_Base_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM1_Init+0x5a>
		Error_Handler();
 8000dea:	f000 fbfb 	bl	80015e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480e      	ldr	r0, [pc, #56]	; (8000e34 <MX_TIM1_Init+0xa0>)
 8000dfc:	f003 fc89 	bl	8004712 <HAL_TIM_ConfigClockSource>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM1_Init+0x76>
		Error_Handler();
 8000e06:	f000 fbed 	bl	80015e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4806      	ldr	r0, [pc, #24]	; (8000e34 <MX_TIM1_Init+0xa0>)
 8000e1c:	f003 fe60 	bl	8004ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8000e26:	f000 fbdd 	bl	80015e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	3720      	adds	r7, #32
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200003a0 	.word	0x200003a0
 8000e38:	40012c00 	.word	0x40012c00

08000e3c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <MX_TIM2_Init+0x94>)
 8000e5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e60:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 48 - 1;
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_TIM2_Init+0x94>)
 8000e64:	222f      	movs	r2, #47	; 0x2f
 8000e66:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <MX_TIM2_Init+0x94>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000001 - 1;
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <MX_TIM2_Init+0x94>)
 8000e70:	4a18      	ldr	r2, [pc, #96]	; (8000ed4 <MX_TIM2_Init+0x98>)
 8000e72:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <MX_TIM2_Init+0x94>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <MX_TIM2_Init+0x94>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000e80:	4813      	ldr	r0, [pc, #76]	; (8000ed0 <MX_TIM2_Init+0x94>)
 8000e82:	f003 fa19 	bl	80042b8 <HAL_TIM_Base_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM2_Init+0x54>
		Error_Handler();
 8000e8c:	f000 fbaa 	bl	80015e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e94:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <MX_TIM2_Init+0x94>)
 8000e9e:	f003 fc38 	bl	8004712 <HAL_TIM_ConfigClockSource>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM2_Init+0x70>
		Error_Handler();
 8000ea8:	f000 fb9c 	bl	80015e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eac:	2300      	movs	r3, #0
 8000eae:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_TIM2_Init+0x94>)
 8000eba:	f003 fe11 	bl	8004ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000ec4:	f000 fb8e 	bl	80015e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	200003ec 	.word	0x200003ec
 8000ed4:	000f4240 	.word	0x000f4240

08000ed8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	2001      	movs	r0, #1
 8000eee:	f7ff fbc1 	bl	8000674 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	2002      	movs	r0, #2
 8000ef4:	f7ff fbbe 	bl	8000674 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef8:	2004      	movs	r0, #4
 8000efa:	f7ff fbbb 	bl	8000674 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000f04:	481f      	ldr	r0, [pc, #124]	; (8000f84 <MX_GPIO_Init+0xac>)
 8000f06:	f001 f9d7 	bl	80022b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin,
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2138      	movs	r1, #56	; 0x38
 8000f0e:	481e      	ldr	r0, [pc, #120]	; (8000f88 <MX_GPIO_Init+0xb0>)
 8000f10:	f001 f9d2 	bl	80022b8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 8000f14:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000f18:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f22:	2302      	movs	r3, #2
 8000f24:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4816      	ldr	r0, [pc, #88]	; (8000f84 <MX_GPIO_Init+0xac>)
 8000f2c:	f001 f864 	bl	8001ff8 <HAL_GPIO_Init>

	/*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
	GPIO_InitStruct.Pin = FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin;
 8000f30:	2338      	movs	r3, #56	; 0x38
 8000f32:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4810      	ldr	r0, [pc, #64]	; (8000f88 <MX_GPIO_Init+0xb0>)
 8000f46:	f001 f857 	bl	8001ff8 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin B2_Pin */
	GPIO_InitStruct.Pin = B1_Pin | B2_Pin;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f4e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f52:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f60:	f001 f84a 	bl	8001ff8 <HAL_GPIO_Init>

	/*Configure GPIO pin : B3_Pin */
	GPIO_InitStruct.Pin = B3_Pin;
 8000f64:	2340      	movs	r3, #64	; 0x40
 8000f66:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f68:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f6c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	4619      	mov	r1, r3
 8000f76:	4804      	ldr	r0, [pc, #16]	; (8000f88 <MX_GPIO_Init+0xb0>)
 8000f78:	f001 f83e 	bl	8001ff8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000f7c:	bf00      	nop
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	48000400 	.word	0x48000400
 8000f88:	48000800 	.word	0x48000800

08000f8c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f8c:	b5b0      	push	{r4, r5, r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af04      	add	r7, sp, #16
 8000f92:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a96      	ldr	r2, [pc, #600]	; (80011f0 <HAL_UART_RxCpltCallback+0x264>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	f040 80e2 	bne.w	8001162 <HAL_UART_RxCpltCallback+0x1d6>
		sprintf(temp_rx, "%c%c%c%c%c%c", rxCMD[0], rxCMD[1], rxCMD[2], rxCMD[3],
 8000f9e:	4b95      	ldr	r3, [pc, #596]	; (80011f4 <HAL_UART_RxCpltCallback+0x268>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461c      	mov	r4, r3
 8000fa4:	4b93      	ldr	r3, [pc, #588]	; (80011f4 <HAL_UART_RxCpltCallback+0x268>)
 8000fa6:	785b      	ldrb	r3, [r3, #1]
 8000fa8:	461d      	mov	r5, r3
 8000faa:	4b92      	ldr	r3, [pc, #584]	; (80011f4 <HAL_UART_RxCpltCallback+0x268>)
 8000fac:	789b      	ldrb	r3, [r3, #2]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4b90      	ldr	r3, [pc, #576]	; (80011f4 <HAL_UART_RxCpltCallback+0x268>)
 8000fb2:	78db      	ldrb	r3, [r3, #3]
 8000fb4:	4619      	mov	r1, r3
				rxCMD[4], rxCMD[5]);
 8000fb6:	4b8f      	ldr	r3, [pc, #572]	; (80011f4 <HAL_UART_RxCpltCallback+0x268>)
 8000fb8:	791b      	ldrb	r3, [r3, #4]
		sprintf(temp_rx, "%c%c%c%c%c%c", rxCMD[0], rxCMD[1], rxCMD[2], rxCMD[3],
 8000fba:	4618      	mov	r0, r3
				rxCMD[4], rxCMD[5]);
 8000fbc:	4b8d      	ldr	r3, [pc, #564]	; (80011f4 <HAL_UART_RxCpltCallback+0x268>)
 8000fbe:	795b      	ldrb	r3, [r3, #5]
		sprintf(temp_rx, "%c%c%c%c%c%c", rxCMD[0], rxCMD[1], rxCMD[2], rxCMD[3],
 8000fc0:	9303      	str	r3, [sp, #12]
 8000fc2:	9002      	str	r0, [sp, #8]
 8000fc4:	9101      	str	r1, [sp, #4]
 8000fc6:	9200      	str	r2, [sp, #0]
 8000fc8:	462b      	mov	r3, r5
 8000fca:	4622      	mov	r2, r4
 8000fcc:	498a      	ldr	r1, [pc, #552]	; (80011f8 <HAL_UART_RxCpltCallback+0x26c>)
 8000fce:	488b      	ldr	r0, [pc, #556]	; (80011fc <HAL_UART_RxCpltCallback+0x270>)
 8000fd0:	f009 fc1a 	bl	800a808 <siprintf>
		if (strcmp(temp_rx, "UART02") == 0) {
 8000fd4:	498a      	ldr	r1, [pc, #552]	; (8001200 <HAL_UART_RxCpltCallback+0x274>)
 8000fd6:	4889      	ldr	r0, [pc, #548]	; (80011fc <HAL_UART_RxCpltCallback+0x270>)
 8000fd8:	f7ff f8d2 	bl	8000180 <strcmp>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d12f      	bne.n	8001042 <HAL_UART_RxCpltCallback+0xb6>
			ack = 1;
 8000fe2:	4b88      	ldr	r3, [pc, #544]	; (8001204 <HAL_UART_RxCpltCallback+0x278>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
			myPrintf("\n########## Test code: BEGIN ##########\r\n");
 8000fe8:	4887      	ldr	r0, [pc, #540]	; (8001208 <HAL_UART_RxCpltCallback+0x27c>)
 8000fea:	f7ff fac1 	bl	8000570 <myPrintf>
			myPrintf("########## UART2 (PA2_TX, PA3_RX): 		##########\r\n");
 8000fee:	4887      	ldr	r0, [pc, #540]	; (800120c <HAL_UART_RxCpltCallback+0x280>)
 8000ff0:	f7ff fabe 	bl	8000570 <myPrintf>
			myPrintf("Pin Description: OBC_COM_1\r\n");
 8000ff4:	4886      	ldr	r0, [pc, #536]	; (8001210 <HAL_UART_RxCpltCallback+0x284>)
 8000ff6:	f7ff fabb 	bl	8000570 <myPrintf>
			myPrintf(
 8000ffa:	4886      	ldr	r0, [pc, #536]	; (8001214 <HAL_UART_RxCpltCallback+0x288>)
 8000ffc:	f7ff fab8 	bl	8000570 <myPrintf>
					"If this message pop up then track in OBC_COM_1_Script_Communicator\r\n");
			myPrintf("------------- Wait for Test Complete --------------\r\n");
 8001000:	4885      	ldr	r0, [pc, #532]	; (8001218 <HAL_UART_RxCpltCallback+0x28c>)
 8001002:	f7ff fab5 	bl	8000570 <myPrintf>
			myPrintf("__________________________________________________\r\n");
 8001006:	4885      	ldr	r0, [pc, #532]	; (800121c <HAL_UART_RxCpltCallback+0x290>)
 8001008:	f7ff fab2 	bl	8000570 <myPrintf>

			myPrintf2(
 800100c:	4884      	ldr	r0, [pc, #528]	; (8001220 <HAL_UART_RxCpltCallback+0x294>)
 800100e:	f7ff fad3 	bl	80005b8 <myPrintf2>
					"#\n######### Thank you for visiting OBC_COM_1_Script_Communicator ##########\r\n");
			myPrintf2("########## UART2 (PA2_TX, PA3_RX): 		##########\r\n");
 8001012:	487e      	ldr	r0, [pc, #504]	; (800120c <HAL_UART_RxCpltCallback+0x280>)
 8001014:	f7ff fad0 	bl	80005b8 <myPrintf2>
			myPrintf2("Pin Description: OBC_COM_1\r\n");
 8001018:	487d      	ldr	r0, [pc, #500]	; (8001210 <HAL_UART_RxCpltCallback+0x284>)
 800101a:	f7ff facd 	bl	80005b8 <myPrintf2>
			myPrintf2(
 800101e:	4881      	ldr	r0, [pc, #516]	; (8001224 <HAL_UART_RxCpltCallback+0x298>)
 8001020:	f7ff faca 	bl	80005b8 <myPrintf2>
					"Please send 'OK02' to verify test and track into COM_Script_Communicator, i.e.\r\n");
			myPrintf2("1. UART1 (PA9_TX, PA10_RX): 		##########\r\n");
 8001024:	4880      	ldr	r0, [pc, #512]	; (8001228 <HAL_UART_RxCpltCallback+0x29c>)
 8001026:	f7ff fac7 	bl	80005b8 <myPrintf2>
			myPrintf2("2. Pin Description: Debug COM_MCU\r\n");
 800102a:	4880      	ldr	r0, [pc, #512]	; (800122c <HAL_UART_RxCpltCallback+0x2a0>)
 800102c:	f7ff fac4 	bl	80005b8 <myPrintf2>
			myPrintf2("__________________________________________________\r\n");
 8001030:	487a      	ldr	r0, [pc, #488]	; (800121c <HAL_UART_RxCpltCallback+0x290>)
 8001032:	f7ff fac1 	bl	80005b8 <myPrintf2>
			HAL_UART_Receive_IT(&huart2, rxOBCCMD, 4);
 8001036:	2204      	movs	r2, #4
 8001038:	497d      	ldr	r1, [pc, #500]	; (8001230 <HAL_UART_RxCpltCallback+0x2a4>)
 800103a:	487e      	ldr	r0, [pc, #504]	; (8001234 <HAL_UART_RxCpltCallback+0x2a8>)
 800103c:	f003 fec0 	bl	8004dc0 <HAL_UART_Receive_IT>
 8001040:	e089      	b.n	8001156 <HAL_UART_RxCpltCallback+0x1ca>
		} else if (strcmp(temp_rx, "LPUART") == 0) {
 8001042:	497d      	ldr	r1, [pc, #500]	; (8001238 <HAL_UART_RxCpltCallback+0x2ac>)
 8001044:	486d      	ldr	r0, [pc, #436]	; (80011fc <HAL_UART_RxCpltCallback+0x270>)
 8001046:	f7ff f89b 	bl	8000180 <strcmp>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d12f      	bne.n	80010b0 <HAL_UART_RxCpltCallback+0x124>
			ack = 2;
 8001050:	4b6c      	ldr	r3, [pc, #432]	; (8001204 <HAL_UART_RxCpltCallback+0x278>)
 8001052:	2202      	movs	r2, #2
 8001054:	701a      	strb	r2, [r3, #0]
			myPrintf("\n########## Test code: BEGIN ##########\r\n");
 8001056:	486c      	ldr	r0, [pc, #432]	; (8001208 <HAL_UART_RxCpltCallback+0x27c>)
 8001058:	f7ff fa8a 	bl	8000570 <myPrintf>
			myPrintf("########## LPUART (PC1_TX, PC0_RX): 		##########\r\n");
 800105c:	4877      	ldr	r0, [pc, #476]	; (800123c <HAL_UART_RxCpltCallback+0x2b0>)
 800105e:	f7ff fa87 	bl	8000570 <myPrintf>
			myPrintf("Pin Description: OBC_COM_LPUART\r\n");
 8001062:	4877      	ldr	r0, [pc, #476]	; (8001240 <HAL_UART_RxCpltCallback+0x2b4>)
 8001064:	f7ff fa84 	bl	8000570 <myPrintf>
			myPrintf(
 8001068:	4876      	ldr	r0, [pc, #472]	; (8001244 <HAL_UART_RxCpltCallback+0x2b8>)
 800106a:	f7ff fa81 	bl	8000570 <myPrintf>
					"If this message pop up then track in OBC_COM_LPUART_Script_Communicator\r\n");
			myPrintf("------------- Wait for Test Complete --------------\r\n");
 800106e:	486a      	ldr	r0, [pc, #424]	; (8001218 <HAL_UART_RxCpltCallback+0x28c>)
 8001070:	f7ff fa7e 	bl	8000570 <myPrintf>
			myPrintf("__________________________________________________\r\n");
 8001074:	4869      	ldr	r0, [pc, #420]	; (800121c <HAL_UART_RxCpltCallback+0x290>)
 8001076:	f7ff fa7b 	bl	8000570 <myPrintf>

			myPrintf3(
 800107a:	4873      	ldr	r0, [pc, #460]	; (8001248 <HAL_UART_RxCpltCallback+0x2bc>)
 800107c:	f7ff fac0 	bl	8000600 <myPrintf3>
					"\n########## Thank you for visiting OBC_COM_LPUART_Script_Communicator ##########\r\n");
			myPrintf3("########## LPUART (PC1_TX, PC0_RX): 		##########\r\n");
 8001080:	486e      	ldr	r0, [pc, #440]	; (800123c <HAL_UART_RxCpltCallback+0x2b0>)
 8001082:	f7ff fabd 	bl	8000600 <myPrintf3>
			myPrintf3("Pin Description: OBC_COM_LPUART\r\n");
 8001086:	486e      	ldr	r0, [pc, #440]	; (8001240 <HAL_UART_RxCpltCallback+0x2b4>)
 8001088:	f7ff faba 	bl	8000600 <myPrintf3>
			myPrintf3(
 800108c:	486f      	ldr	r0, [pc, #444]	; (800124c <HAL_UART_RxCpltCallback+0x2c0>)
 800108e:	f7ff fab7 	bl	8000600 <myPrintf3>
					"Please send 'OKLP' to verify test and track into COM_Script_Communicator, i.e.\r\n");
			myPrintf3("1. UART1 (PA9_TX, PA10_RX): 		##########\r\n");
 8001092:	4865      	ldr	r0, [pc, #404]	; (8001228 <HAL_UART_RxCpltCallback+0x29c>)
 8001094:	f7ff fab4 	bl	8000600 <myPrintf3>
			myPrintf3("2. Pin Description: Debug COM_MCU\r\n");
 8001098:	4864      	ldr	r0, [pc, #400]	; (800122c <HAL_UART_RxCpltCallback+0x2a0>)
 800109a:	f7ff fab1 	bl	8000600 <myPrintf3>
			myPrintf3("__________________________________________________\r\n");
 800109e:	485f      	ldr	r0, [pc, #380]	; (800121c <HAL_UART_RxCpltCallback+0x290>)
 80010a0:	f7ff faae 	bl	8000600 <myPrintf3>
			HAL_UART_Receive_IT(&hlpuart1, rxOBCCMDLP, 4);
 80010a4:	2204      	movs	r2, #4
 80010a6:	496a      	ldr	r1, [pc, #424]	; (8001250 <HAL_UART_RxCpltCallback+0x2c4>)
 80010a8:	486a      	ldr	r0, [pc, #424]	; (8001254 <HAL_UART_RxCpltCallback+0x2c8>)
 80010aa:	f003 fe89 	bl	8004dc0 <HAL_UART_Receive_IT>
 80010ae:	e052      	b.n	8001156 <HAL_UART_RxCpltCallback+0x1ca>
		} else if (strcmp(temp_rx, "3RADIO") == 0) {
 80010b0:	4969      	ldr	r1, [pc, #420]	; (8001258 <HAL_UART_RxCpltCallback+0x2cc>)
 80010b2:	4852      	ldr	r0, [pc, #328]	; (80011fc <HAL_UART_RxCpltCallback+0x270>)
 80010b4:	f7ff f864 	bl	8000180 <strcmp>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d14b      	bne.n	8001156 <HAL_UART_RxCpltCallback+0x1ca>
			ack = 3;
 80010be:	4b51      	ldr	r3, [pc, #324]	; (8001204 <HAL_UART_RxCpltCallback+0x278>)
 80010c0:	2203      	movs	r2, #3
 80010c2:	701a      	strb	r2, [r3, #0]
			myPrintf("\n########## Test code: BEGIN ##########\r\n");
 80010c4:	4850      	ldr	r0, [pc, #320]	; (8001208 <HAL_UART_RxCpltCallback+0x27c>)
 80010c6:	f7ff fa53 	bl	8000570 <myPrintf>
			myPrintf("########## Low Power Radio: 	##########\r\n");
 80010ca:	4864      	ldr	r0, [pc, #400]	; (800125c <HAL_UART_RxCpltCallback+0x2d0>)
 80010cc:	f7ff fa50 	bl	8000570 <myPrintf>
			myPrintf("########## COMMUNICATION PARAMETERS: 		##########\r\n");
 80010d0:	4863      	ldr	r0, [pc, #396]	; (8001260 <HAL_UART_RxCpltCallback+0x2d4>)
 80010d2:	f7ff fa4d 	bl	8000570 <myPrintf>
			myPrintf("Modulation: LoRa PACKET\r\n");
 80010d6:	4863      	ldr	r0, [pc, #396]	; (8001264 <HAL_UART_RxCpltCallback+0x2d8>)
 80010d8:	f7ff fa4a 	bl	8000570 <myPrintf>
			myPrintf(
 80010dc:	4a62      	ldr	r2, [pc, #392]	; (8001268 <HAL_UART_RxCpltCallback+0x2dc>)
 80010de:	4963      	ldr	r1, [pc, #396]	; (800126c <HAL_UART_RxCpltCallback+0x2e0>)
 80010e0:	4863      	ldr	r0, [pc, #396]	; (8001270 <HAL_UART_RxCpltCallback+0x2e4>)
 80010e2:	f7ff fa45 	bl	8000570 <myPrintf>
					"FREQUENCY MODS: UPLINK FREQ: %lu\r\n    DOWNLINK FREQ: %lu\r\n",
					FREQ_402_MHZ, FREQ_401_MHZ);
			myPrintf(
 80010e6:	230e      	movs	r3, #14
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2300      	movs	r3, #0
 80010ec:	2207      	movs	r2, #7
 80010ee:	2104      	movs	r1, #4
 80010f0:	4860      	ldr	r0, [pc, #384]	; (8001274 <HAL_UART_RxCpltCallback+0x2e8>)
 80010f2:	f7ff fa3d 	bl	8000570 <myPrintf>
					"POWER CONFIG:\r\n    PA_DUTY_CYCLE : %x,    HP_MAX: %x,\n\r    PA_SEL : %x,    POWER TX: %u dBm\n\r",
					PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);
			myPrintf("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.LoRa.Bandwidth);
 80010f6:	4b60      	ldr	r3, [pc, #384]	; (8001278 <HAL_UART_RxCpltCallback+0x2ec>)
 80010f8:	7e5b      	ldrb	r3, [r3, #25]
			myPrintf("RECEVING BANDWIDTH: 	%d\n\r",
 80010fa:	4619      	mov	r1, r3
 80010fc:	485f      	ldr	r0, [pc, #380]	; (800127c <HAL_UART_RxCpltCallback+0x2f0>)
 80010fe:	f7ff fa37 	bl	8000570 <myPrintf>
			myPrintf("Packet Type: 			%d\n\r", pkt_params.PacketType);
 8001102:	4b5f      	ldr	r3, [pc, #380]	; (8001280 <HAL_UART_RxCpltCallback+0x2f4>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	485e      	ldr	r0, [pc, #376]	; (8001284 <HAL_UART_RxCpltCallback+0x2f8>)
 800110a:	f7ff fa31 	bl	8000570 <myPrintf>
			myPrintf("PayloadLength: 		%d\n\r",
					pkt_params.Params.LoRa.PayloadLength);
 800110e:	4b5c      	ldr	r3, [pc, #368]	; (8001280 <HAL_UART_RxCpltCallback+0x2f4>)
 8001110:	7c5b      	ldrb	r3, [r3, #17]
			myPrintf("PayloadLength: 		%d\n\r",
 8001112:	4619      	mov	r1, r3
 8001114:	485c      	ldr	r0, [pc, #368]	; (8001288 <HAL_UART_RxCpltCallback+0x2fc>)
 8001116:	f7ff fa2b 	bl	8000570 <myPrintf>
			myPrintf("PreambleLength: 		%d\n\r",
					pkt_params.Params.LoRa.PreambleLength);
 800111a:	4b59      	ldr	r3, [pc, #356]	; (8001280 <HAL_UART_RxCpltCallback+0x2f4>)
 800111c:	89db      	ldrh	r3, [r3, #14]
			myPrintf("PreambleLength: 		%d\n\r",
 800111e:	4619      	mov	r1, r3
 8001120:	485a      	ldr	r0, [pc, #360]	; (800128c <HAL_UART_RxCpltCallback+0x300>)
 8001122:	f7ff fa25 	bl	8000570 <myPrintf>
			myPrintf("HeaderType: 			%d\n\r",
					pkt_params.Params.LoRa.HeaderType);
 8001126:	4b56      	ldr	r3, [pc, #344]	; (8001280 <HAL_UART_RxCpltCallback+0x2f4>)
 8001128:	7c1b      	ldrb	r3, [r3, #16]
			myPrintf("HeaderType: 			%d\n\r",
 800112a:	4619      	mov	r1, r3
 800112c:	4858      	ldr	r0, [pc, #352]	; (8001290 <HAL_UART_RxCpltCallback+0x304>)
 800112e:	f7ff fa1f 	bl	8000570 <myPrintf>

			myPrintf(
 8001132:	4858      	ldr	r0, [pc, #352]	; (8001294 <HAL_UART_RxCpltCallback+0x308>)
 8001134:	f7ff fa1c 	bl	8000570 <myPrintf>
					"If this message pop up then track in other NucleoWL55JC2 Receiver\r\n");
			myPrintf("------------- Wait for Test Complete --------------\r\n");
 8001138:	4837      	ldr	r0, [pc, #220]	; (8001218 <HAL_UART_RxCpltCallback+0x28c>)
 800113a:	f7ff fa19 	bl	8000570 <myPrintf>
			myPrintf("__________________________________________________\r\n");
 800113e:	4837      	ldr	r0, [pc, #220]	; (800121c <HAL_UART_RxCpltCallback+0x290>)
 8001140:	f7ff fa16 	bl	8000570 <myPrintf>
			myPrintf(
 8001144:	4854      	ldr	r0, [pc, #336]	; (8001298 <HAL_UART_RxCpltCallback+0x30c>)
 8001146:	f7ff fa13 	bl	8000570 <myPrintf>
					"\n\rTo stop the testing first complete transmission and reception:  \r\n");
			myPrintf("##### The Transmitter will transmits packets now. \r\n");
 800114a:	4854      	ldr	r0, [pc, #336]	; (800129c <HAL_UART_RxCpltCallback+0x310>)
 800114c:	f7ff fa10 	bl	8000570 <myPrintf>

			HAL_TIM_Base_Start_IT(&htim1);
 8001150:	4853      	ldr	r0, [pc, #332]	; (80012a0 <HAL_UART_RxCpltCallback+0x314>)
 8001152:	f003 f973 	bl	800443c <HAL_TIM_Base_Start_IT>
		}
		HAL_UART_Receive_IT(&huart1, rxCMD, 6);
 8001156:	2206      	movs	r2, #6
 8001158:	4926      	ldr	r1, [pc, #152]	; (80011f4 <HAL_UART_RxCpltCallback+0x268>)
 800115a:	4825      	ldr	r0, [pc, #148]	; (80011f0 <HAL_UART_RxCpltCallback+0x264>)
 800115c:	f003 fe30 	bl	8004dc0 <HAL_UART_Receive_IT>
			myPrintf("SEND '3RADIO' to test RFO LP Radio'\r\n");
			myPrintf("__________________________________________________\r\n");
		}
		HAL_UART_Receive_IT(&hlpuart1, rxOBCCMDLP, 4);
	}
}
 8001160:	e0f8      	b.n	8001354 <HAL_UART_RxCpltCallback+0x3c8>
	} else if (huart == &huart2) {
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a33      	ldr	r2, [pc, #204]	; (8001234 <HAL_UART_RxCpltCallback+0x2a8>)
 8001166:	4293      	cmp	r3, r2
 8001168:	f040 80b0 	bne.w	80012cc <HAL_UART_RxCpltCallback+0x340>
		sprintf(temp_OBC_rx, "%c%c%c%c", rxOBCCMD[0], rxOBCCMD[1], rxOBCCMD[2],
 800116c:	4b30      	ldr	r3, [pc, #192]	; (8001230 <HAL_UART_RxCpltCallback+0x2a4>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <HAL_UART_RxCpltCallback+0x2a4>)
 8001174:	785b      	ldrb	r3, [r3, #1]
 8001176:	4618      	mov	r0, r3
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <HAL_UART_RxCpltCallback+0x2a4>)
 800117a:	789b      	ldrb	r3, [r3, #2]
 800117c:	461a      	mov	r2, r3
				rxOBCCMD[3]);
 800117e:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <HAL_UART_RxCpltCallback+0x2a4>)
 8001180:	78db      	ldrb	r3, [r3, #3]
		sprintf(temp_OBC_rx, "%c%c%c%c", rxOBCCMD[0], rxOBCCMD[1], rxOBCCMD[2],
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	9200      	str	r2, [sp, #0]
 8001186:	4603      	mov	r3, r0
 8001188:	460a      	mov	r2, r1
 800118a:	4946      	ldr	r1, [pc, #280]	; (80012a4 <HAL_UART_RxCpltCallback+0x318>)
 800118c:	4846      	ldr	r0, [pc, #280]	; (80012a8 <HAL_UART_RxCpltCallback+0x31c>)
 800118e:	f009 fb3b 	bl	800a808 <siprintf>
		if (strcmp(temp_OBC_rx, "OK02") == 0) {
 8001192:	4946      	ldr	r1, [pc, #280]	; (80012ac <HAL_UART_RxCpltCallback+0x320>)
 8001194:	4844      	ldr	r0, [pc, #272]	; (80012a8 <HAL_UART_RxCpltCallback+0x31c>)
 8001196:	f7fe fff3 	bl	8000180 <strcmp>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d120      	bne.n	80011e2 <HAL_UART_RxCpltCallback+0x256>
			myPrintf("\n---------    Test Complete    ---------\r\n");
 80011a0:	4843      	ldr	r0, [pc, #268]	; (80012b0 <HAL_UART_RxCpltCallback+0x324>)
 80011a2:	f7ff f9e5 	bl	8000570 <myPrintf>
			myPrintf("----------- Received 'OK02' from:- \r\n");
 80011a6:	4843      	ldr	r0, [pc, #268]	; (80012b4 <HAL_UART_RxCpltCallback+0x328>)
 80011a8:	f7ff f9e2 	bl	8000570 <myPrintf>
			myPrintf("########## UART2 (PA2_TX, PA3_RX): 		##########\r\n");
 80011ac:	4817      	ldr	r0, [pc, #92]	; (800120c <HAL_UART_RxCpltCallback+0x280>)
 80011ae:	f7ff f9df 	bl	8000570 <myPrintf>
			myPrintf(
 80011b2:	4841      	ldr	r0, [pc, #260]	; (80012b8 <HAL_UART_RxCpltCallback+0x32c>)
 80011b4:	f7ff f9dc 	bl	8000570 <myPrintf>
			myPrintf("__________________________________________________\r\n");
 80011b8:	4818      	ldr	r0, [pc, #96]	; (800121c <HAL_UART_RxCpltCallback+0x290>)
 80011ba:	f7ff f9d9 	bl	8000570 <myPrintf>
			myPrintf("__________________________________________________\r\n");
 80011be:	4817      	ldr	r0, [pc, #92]	; (800121c <HAL_UART_RxCpltCallback+0x290>)
 80011c0:	f7ff f9d6 	bl	8000570 <myPrintf>
			myPrintf(
 80011c4:	483d      	ldr	r0, [pc, #244]	; (80012bc <HAL_UART_RxCpltCallback+0x330>)
 80011c6:	f7ff f9d3 	bl	8000570 <myPrintf>
			myPrintf("SEND 'UART02' to test UART2 OBC'\r\n");
 80011ca:	483d      	ldr	r0, [pc, #244]	; (80012c0 <HAL_UART_RxCpltCallback+0x334>)
 80011cc:	f7ff f9d0 	bl	8000570 <myPrintf>
			myPrintf("SEND 'LPUART' to test LPUART OBC'\r\n");
 80011d0:	483c      	ldr	r0, [pc, #240]	; (80012c4 <HAL_UART_RxCpltCallback+0x338>)
 80011d2:	f7ff f9cd 	bl	8000570 <myPrintf>
			myPrintf("SEND '3RADIO' to test RFO LP Radio'\r\n");
 80011d6:	483c      	ldr	r0, [pc, #240]	; (80012c8 <HAL_UART_RxCpltCallback+0x33c>)
 80011d8:	f7ff f9ca 	bl	8000570 <myPrintf>
			myPrintf("__________________________________________________\r\n");
 80011dc:	480f      	ldr	r0, [pc, #60]	; (800121c <HAL_UART_RxCpltCallback+0x290>)
 80011de:	f7ff f9c7 	bl	8000570 <myPrintf>
		HAL_UART_Receive_IT(&huart2, rxOBCCMD, 4);
 80011e2:	2204      	movs	r2, #4
 80011e4:	4912      	ldr	r1, [pc, #72]	; (8001230 <HAL_UART_RxCpltCallback+0x2a4>)
 80011e6:	4813      	ldr	r0, [pc, #76]	; (8001234 <HAL_UART_RxCpltCallback+0x2a8>)
 80011e8:	f003 fdea 	bl	8004dc0 <HAL_UART_Receive_IT>
}
 80011ec:	e0b2      	b.n	8001354 <HAL_UART_RxCpltCallback+0x3c8>
 80011ee:	bf00      	nop
 80011f0:	2000026c 	.word	0x2000026c
 80011f4:	20000438 	.word	0x20000438
 80011f8:	0800b388 	.word	0x0800b388
 80011fc:	20000470 	.word	0x20000470
 8001200:	0800b398 	.word	0x0800b398
 8001204:	20000468 	.word	0x20000468
 8001208:	0800b1d8 	.word	0x0800b1d8
 800120c:	0800b3a0 	.word	0x0800b3a0
 8001210:	0800b3d4 	.word	0x0800b3d4
 8001214:	0800b3f4 	.word	0x0800b3f4
 8001218:	0800b43c 	.word	0x0800b43c
 800121c:	0800b298 	.word	0x0800b298
 8001220:	0800b474 	.word	0x0800b474
 8001224:	0800b4c4 	.word	0x0800b4c4
 8001228:	0800b518 	.word	0x0800b518
 800122c:	0800b544 	.word	0x0800b544
 8001230:	20000440 	.word	0x20000440
 8001234:	20000300 	.word	0x20000300
 8001238:	0800b568 	.word	0x0800b568
 800123c:	0800b570 	.word	0x0800b570
 8001240:	0800b5a4 	.word	0x0800b5a4
 8001244:	0800b5c8 	.word	0x0800b5c8
 8001248:	0800b614 	.word	0x0800b614
 800124c:	0800b668 	.word	0x0800b668
 8001250:	20000444 	.word	0x20000444
 8001254:	200001d8 	.word	0x200001d8
 8001258:	0800b6bc 	.word	0x0800b6bc
 800125c:	0800b6c4 	.word	0x0800b6c4
 8001260:	0800b6f0 	.word	0x0800b6f0
 8001264:	0800b724 	.word	0x0800b724
 8001268:	17ec7f18 	.word	0x17ec7f18
 800126c:	17fbc158 	.word	0x17fbc158
 8001270:	0800b740 	.word	0x0800b740
 8001274:	0800b77c 	.word	0x0800b77c
 8001278:	200001bc 	.word	0x200001bc
 800127c:	0800b7dc 	.word	0x0800b7dc
 8001280:	200001a8 	.word	0x200001a8
 8001284:	0800b7f8 	.word	0x0800b7f8
 8001288:	0800b810 	.word	0x0800b810
 800128c:	0800b828 	.word	0x0800b828
 8001290:	0800b840 	.word	0x0800b840
 8001294:	0800b854 	.word	0x0800b854
 8001298:	0800b898 	.word	0x0800b898
 800129c:	0800b8e0 	.word	0x0800b8e0
 80012a0:	200003a0 	.word	0x200003a0
 80012a4:	0800b918 	.word	0x0800b918
 80012a8:	200004d4 	.word	0x200004d4
 80012ac:	0800b924 	.word	0x0800b924
 80012b0:	0800b92c 	.word	0x0800b92c
 80012b4:	0800b958 	.word	0x0800b958
 80012b8:	0800b980 	.word	0x0800b980
 80012bc:	0800b2d0 	.word	0x0800b2d0
 80012c0:	0800b310 	.word	0x0800b310
 80012c4:	0800b334 	.word	0x0800b334
 80012c8:	0800b358 	.word	0x0800b358
	} else if (huart == &hlpuart1) {
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a23      	ldr	r2, [pc, #140]	; (800135c <HAL_UART_RxCpltCallback+0x3d0>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d13f      	bne.n	8001354 <HAL_UART_RxCpltCallback+0x3c8>
		sprintf(temp_OBC_rx_LP, "%c%c%c%c", rxOBCCMDLP[0], rxOBCCMDLP[1],
 80012d4:	4b22      	ldr	r3, [pc, #136]	; (8001360 <HAL_UART_RxCpltCallback+0x3d4>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	4b21      	ldr	r3, [pc, #132]	; (8001360 <HAL_UART_RxCpltCallback+0x3d4>)
 80012dc:	785b      	ldrb	r3, [r3, #1]
 80012de:	4618      	mov	r0, r3
				rxOBCCMDLP[2], rxOBCCMDLP[3]);
 80012e0:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <HAL_UART_RxCpltCallback+0x3d4>)
 80012e2:	789b      	ldrb	r3, [r3, #2]
		sprintf(temp_OBC_rx_LP, "%c%c%c%c", rxOBCCMDLP[0], rxOBCCMDLP[1],
 80012e4:	461a      	mov	r2, r3
				rxOBCCMDLP[2], rxOBCCMDLP[3]);
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <HAL_UART_RxCpltCallback+0x3d4>)
 80012e8:	78db      	ldrb	r3, [r3, #3]
		sprintf(temp_OBC_rx_LP, "%c%c%c%c", rxOBCCMDLP[0], rxOBCCMDLP[1],
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	9200      	str	r2, [sp, #0]
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	491c      	ldr	r1, [pc, #112]	; (8001364 <HAL_UART_RxCpltCallback+0x3d8>)
 80012f4:	481c      	ldr	r0, [pc, #112]	; (8001368 <HAL_UART_RxCpltCallback+0x3dc>)
 80012f6:	f009 fa87 	bl	800a808 <siprintf>
		if (strcmp(temp_OBC_rx_LP, "OKLP") == 0) {
 80012fa:	491c      	ldr	r1, [pc, #112]	; (800136c <HAL_UART_RxCpltCallback+0x3e0>)
 80012fc:	481a      	ldr	r0, [pc, #104]	; (8001368 <HAL_UART_RxCpltCallback+0x3dc>)
 80012fe:	f7fe ff3f 	bl	8000180 <strcmp>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d120      	bne.n	800134a <HAL_UART_RxCpltCallback+0x3be>
			myPrintf("\n---------    Test Complete    ---------\r\n");
 8001308:	4819      	ldr	r0, [pc, #100]	; (8001370 <HAL_UART_RxCpltCallback+0x3e4>)
 800130a:	f7ff f931 	bl	8000570 <myPrintf>
			myPrintf("----------- Received 'OKLP' from:- \r\n");
 800130e:	4819      	ldr	r0, [pc, #100]	; (8001374 <HAL_UART_RxCpltCallback+0x3e8>)
 8001310:	f7ff f92e 	bl	8000570 <myPrintf>
			myPrintf("########## LPUART (PC1_TX, PC0_RX):  		##########\r\n");
 8001314:	4818      	ldr	r0, [pc, #96]	; (8001378 <HAL_UART_RxCpltCallback+0x3ec>)
 8001316:	f7ff f92b 	bl	8000570 <myPrintf>
			myPrintf(
 800131a:	4818      	ldr	r0, [pc, #96]	; (800137c <HAL_UART_RxCpltCallback+0x3f0>)
 800131c:	f7ff f928 	bl	8000570 <myPrintf>
			myPrintf("__________________________________________________\r\n");
 8001320:	4817      	ldr	r0, [pc, #92]	; (8001380 <HAL_UART_RxCpltCallback+0x3f4>)
 8001322:	f7ff f925 	bl	8000570 <myPrintf>
			myPrintf("__________________________________________________\r\n");
 8001326:	4816      	ldr	r0, [pc, #88]	; (8001380 <HAL_UART_RxCpltCallback+0x3f4>)
 8001328:	f7ff f922 	bl	8000570 <myPrintf>
			myPrintf(
 800132c:	4815      	ldr	r0, [pc, #84]	; (8001384 <HAL_UART_RxCpltCallback+0x3f8>)
 800132e:	f7ff f91f 	bl	8000570 <myPrintf>
			myPrintf("SEND 'UART02' to test UART2 OBC'\r\n");
 8001332:	4815      	ldr	r0, [pc, #84]	; (8001388 <HAL_UART_RxCpltCallback+0x3fc>)
 8001334:	f7ff f91c 	bl	8000570 <myPrintf>
			myPrintf("SEND 'LPUART' to test LPUART OBC'\r\n");
 8001338:	4814      	ldr	r0, [pc, #80]	; (800138c <HAL_UART_RxCpltCallback+0x400>)
 800133a:	f7ff f919 	bl	8000570 <myPrintf>
			myPrintf("SEND '3RADIO' to test RFO LP Radio'\r\n");
 800133e:	4814      	ldr	r0, [pc, #80]	; (8001390 <HAL_UART_RxCpltCallback+0x404>)
 8001340:	f7ff f916 	bl	8000570 <myPrintf>
			myPrintf("__________________________________________________\r\n");
 8001344:	480e      	ldr	r0, [pc, #56]	; (8001380 <HAL_UART_RxCpltCallback+0x3f4>)
 8001346:	f7ff f913 	bl	8000570 <myPrintf>
		HAL_UART_Receive_IT(&hlpuart1, rxOBCCMDLP, 4);
 800134a:	2204      	movs	r2, #4
 800134c:	4904      	ldr	r1, [pc, #16]	; (8001360 <HAL_UART_RxCpltCallback+0x3d4>)
 800134e:	4803      	ldr	r0, [pc, #12]	; (800135c <HAL_UART_RxCpltCallback+0x3d0>)
 8001350:	f003 fd36 	bl	8004dc0 <HAL_UART_Receive_IT>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bdb0      	pop	{r4, r5, r7, pc}
 800135c:	200001d8 	.word	0x200001d8
 8001360:	20000444 	.word	0x20000444
 8001364:	0800b918 	.word	0x0800b918
 8001368:	20000538 	.word	0x20000538
 800136c:	0800b9b8 	.word	0x0800b9b8
 8001370:	0800b92c 	.word	0x0800b92c
 8001374:	0800b9c0 	.word	0x0800b9c0
 8001378:	0800b9e8 	.word	0x0800b9e8
 800137c:	0800ba1c 	.word	0x0800ba1c
 8001380:	0800b298 	.word	0x0800b298
 8001384:	0800b2d0 	.word	0x0800b2d0
 8001388:	0800b310 	.word	0x0800b310
 800138c:	0800b334 	.word	0x0800b334
 8001390:	0800b358 	.word	0x0800b358

08001394 <DioIrqHndlr>:

void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af02      	add	r7, sp, #8
 800139a:	4603      	mov	r3, r0
 800139c:	80fb      	strh	r3, [r7, #6]
	if (radioIrq == IRQ_TX_DONE) {
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	f040 8087 	bne.w	80014b4 <DioIrqHndlr+0x120>
		TX_FLAG = 0;
 80013a6:	4b69      	ldr	r3, [pc, #420]	; (800154c <DioIrqHndlr+0x1b8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
		myPrintf("\n\r Test Command Transmitted Successful:  \r");
 80013ac:	4868      	ldr	r0, [pc, #416]	; (8001550 <DioIrqHndlr+0x1bc>)
 80013ae:	f7ff f8df 	bl	8000570 <myPrintf>
		for (int i = 0; i < 16; i++) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	e00a      	b.n	80013ce <DioIrqHndlr+0x3a>
			myPrintf(" %02x", tx_cmd[i]);
 80013b8:	4a66      	ldr	r2, [pc, #408]	; (8001554 <DioIrqHndlr+0x1c0>)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4413      	add	r3, r2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4865      	ldr	r0, [pc, #404]	; (8001558 <DioIrqHndlr+0x1c4>)
 80013c4:	f7ff f8d4 	bl	8000570 <myPrintf>
		for (int i = 0; i < 16; i++) {
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3301      	adds	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2b0f      	cmp	r3, #15
 80013d2:	ddf1      	ble.n	80013b8 <DioIrqHndlr+0x24>
		}
		myPrintf("\n\n");
 80013d4:	4861      	ldr	r0, [pc, #388]	; (800155c <DioIrqHndlr+0x1c8>)
 80013d6:	f7ff f8cb 	bl	8000570 <myPrintf>
		pkt_id++;
 80013da:	4b61      	ldr	r3, [pc, #388]	; (8001560 <DioIrqHndlr+0x1cc>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b5f      	ldr	r3, [pc, #380]	; (8001560 <DioIrqHndlr+0x1cc>)
 80013e4:	701a      	strb	r2, [r3, #0]
		if (pkt_id > 5) {
 80013e6:	4b5e      	ldr	r3, [pc, #376]	; (8001560 <DioIrqHndlr+0x1cc>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b05      	cmp	r3, #5
 80013ec:	d962      	bls.n	80014b4 <DioIrqHndlr+0x120>
			pkt_id = 0;
 80013ee:	4b5c      	ldr	r3, [pc, #368]	; (8001560 <DioIrqHndlr+0x1cc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim1);
 80013f4:	485b      	ldr	r0, [pc, #364]	; (8001564 <DioIrqHndlr+0x1d0>)
 80013f6:	f002 fffb 	bl	80043f0 <HAL_TIM_Base_Stop>
			myPrintf("\n\r Testing, Wait to receive:  \r\n");
 80013fa:	485b      	ldr	r0, [pc, #364]	; (8001568 <DioIrqHndlr+0x1d4>)
 80013fc:	f7ff f8b8 	bl	8000570 <myPrintf>

			myPrintf("\n########## Receive and Transmits ##########\r\n");
 8001400:	485a      	ldr	r0, [pc, #360]	; (800156c <DioIrqHndlr+0x1d8>)
 8001402:	f7ff f8b5 	bl	8000570 <myPrintf>
			myPrintf("########## Low Power Radio Receiver: 	##########\r\n");
 8001406:	485a      	ldr	r0, [pc, #360]	; (8001570 <DioIrqHndlr+0x1dc>)
 8001408:	f7ff f8b2 	bl	8000570 <myPrintf>
			myPrintf("########## COMMUNICATION PARAMETERS: 		##########\r\n");
 800140c:	4859      	ldr	r0, [pc, #356]	; (8001574 <DioIrqHndlr+0x1e0>)
 800140e:	f7ff f8af 	bl	8000570 <myPrintf>
			myPrintf("Modulation: LoRa PACKET\r\n");
 8001412:	4859      	ldr	r0, [pc, #356]	; (8001578 <DioIrqHndlr+0x1e4>)
 8001414:	f7ff f8ac 	bl	8000570 <myPrintf>
			myPrintf(
 8001418:	4a58      	ldr	r2, [pc, #352]	; (800157c <DioIrqHndlr+0x1e8>)
 800141a:	4959      	ldr	r1, [pc, #356]	; (8001580 <DioIrqHndlr+0x1ec>)
 800141c:	4859      	ldr	r0, [pc, #356]	; (8001584 <DioIrqHndlr+0x1f0>)
 800141e:	f7ff f8a7 	bl	8000570 <myPrintf>
					"FREQUENCY MODS: UPLINK FREQ: %lu\r\n    DOWNLINK FREQ: %lu\r\n",
					FREQ_402_MHZ, FREQ_401_MHZ);
			myPrintf(
 8001422:	230e      	movs	r3, #14
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2300      	movs	r3, #0
 8001428:	2207      	movs	r2, #7
 800142a:	2104      	movs	r1, #4
 800142c:	4856      	ldr	r0, [pc, #344]	; (8001588 <DioIrqHndlr+0x1f4>)
 800142e:	f7ff f89f 	bl	8000570 <myPrintf>
					"POWER CONFIG:\r\n    PA_DUTY_CYCLE : %x,    HP_MAX: %x,\n\r    PA_SEL : %x,    POWER TX: %u dBm\n\r",
					PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);
			myPrintf("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.LoRa.Bandwidth);
 8001432:	4b56      	ldr	r3, [pc, #344]	; (800158c <DioIrqHndlr+0x1f8>)
 8001434:	7e5b      	ldrb	r3, [r3, #25]
			myPrintf("RECEVING BANDWIDTH: 	%d\n\r",
 8001436:	4619      	mov	r1, r3
 8001438:	4855      	ldr	r0, [pc, #340]	; (8001590 <DioIrqHndlr+0x1fc>)
 800143a:	f7ff f899 	bl	8000570 <myPrintf>
			myPrintf("Packet Type: 			%d\n\r", pkt_params.PacketType);
 800143e:	4b55      	ldr	r3, [pc, #340]	; (8001594 <DioIrqHndlr+0x200>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	4619      	mov	r1, r3
 8001444:	4854      	ldr	r0, [pc, #336]	; (8001598 <DioIrqHndlr+0x204>)
 8001446:	f7ff f893 	bl	8000570 <myPrintf>
			myPrintf("PayloadLength: 		%d\n\r",
					pkt_params.Params.LoRa.PayloadLength);
 800144a:	4b52      	ldr	r3, [pc, #328]	; (8001594 <DioIrqHndlr+0x200>)
 800144c:	7c5b      	ldrb	r3, [r3, #17]
			myPrintf("PayloadLength: 		%d\n\r",
 800144e:	4619      	mov	r1, r3
 8001450:	4852      	ldr	r0, [pc, #328]	; (800159c <DioIrqHndlr+0x208>)
 8001452:	f7ff f88d 	bl	8000570 <myPrintf>
			myPrintf("PreambleLength: 		%d\n\r",
					pkt_params.Params.LoRa.PreambleLength);
 8001456:	4b4f      	ldr	r3, [pc, #316]	; (8001594 <DioIrqHndlr+0x200>)
 8001458:	89db      	ldrh	r3, [r3, #14]
			myPrintf("PreambleLength: 		%d\n\r",
 800145a:	4619      	mov	r1, r3
 800145c:	4850      	ldr	r0, [pc, #320]	; (80015a0 <DioIrqHndlr+0x20c>)
 800145e:	f7ff f887 	bl	8000570 <myPrintf>
			myPrintf("HeaderType: 			%d\n\r",
					pkt_params.Params.LoRa.HeaderType);
 8001462:	4b4c      	ldr	r3, [pc, #304]	; (8001594 <DioIrqHndlr+0x200>)
 8001464:	7c1b      	ldrb	r3, [r3, #16]
			myPrintf("HeaderType: 			%d\n\r",
 8001466:	4619      	mov	r1, r3
 8001468:	484e      	ldr	r0, [pc, #312]	; (80015a4 <DioIrqHndlr+0x210>)
 800146a:	f7ff f881 	bl	8000570 <myPrintf>
			myPrintf(
 800146e:	484e      	ldr	r0, [pc, #312]	; (80015a8 <DioIrqHndlr+0x214>)
 8001470:	f7ff f87e 	bl	8000570 <myPrintf>
					"--------   If this message pop up then wait to receive   --------\r\n");
			myPrintf("__________________________________________________\r\n");
 8001474:	484d      	ldr	r0, [pc, #308]	; (80015ac <DioIrqHndlr+0x218>)
 8001476:	f7ff f87b 	bl	8000570 <myPrintf>
			SUBGRF_SetRfFrequency(FREQ_401_MHZ);
 800147a:	4840      	ldr	r0, [pc, #256]	; (800157c <DioIrqHndlr+0x1e8>)
 800147c:	f007 ffb8 	bl	80093f0 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8001480:	2100      	movs	r1, #0
 8001482:	2001      	movs	r0, #1
 8001484:	f008 fbfc 	bl	8009c80 <SUBGRF_SetSwitch>
			SUBGRF_SetRxBoosted(0xFFFFFF);
 8001488:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800148c:	f007 fddc 	bl	8009048 <SUBGRF_SetRxBoosted>

			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8001490:	2201      	movs	r2, #1
 8001492:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001496:	4846      	ldr	r0, [pc, #280]	; (80015b0 <DioIrqHndlr+0x21c>)
 8001498:	f000 ff0e 	bl	80022b8 <HAL_GPIO_WritePin>
			delay_us(1000000);  // 500ms delay
 800149c:	4845      	ldr	r0, [pc, #276]	; (80015b4 <DioIrqHndlr+0x220>)
 800149e:	f7ff f84d 	bl	800053c <delay_us>
			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014a8:	4841      	ldr	r0, [pc, #260]	; (80015b0 <DioIrqHndlr+0x21c>)
 80014aa:	f000 ff05 	bl	80022b8 <HAL_GPIO_WritePin>
			delay_us(1000000);
 80014ae:	4841      	ldr	r0, [pc, #260]	; (80015b4 <DioIrqHndlr+0x220>)
 80014b0:	f7ff f844 	bl	800053c <delay_us>
		}
	}
	if (radioIrq == IRQ_RX_DONE) {
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d143      	bne.n	8001542 <DioIrqHndlr+0x1ae>
		pkt_id++;
 80014ba:	4b29      	ldr	r3, [pc, #164]	; (8001560 <DioIrqHndlr+0x1cc>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4b27      	ldr	r3, [pc, #156]	; (8001560 <DioIrqHndlr+0x1cc>)
 80014c4:	701a      	strb	r2, [r3, #0]
		SUBGRF_GetPayload(rx_cmd, &p_len, PAYLOAD_LENGTH);
 80014c6:	2210      	movs	r2, #16
 80014c8:	493b      	ldr	r1, [pc, #236]	; (80015b8 <DioIrqHndlr+0x224>)
 80014ca:	483c      	ldr	r0, [pc, #240]	; (80015bc <DioIrqHndlr+0x228>)
 80014cc:	f007 fc30 	bl	8008d30 <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 80014d0:	f008 fa4f 	bl	8009972 <SUBGRF_GetRssiInst>
 80014d4:	4603      	mov	r3, r0
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <DioIrqHndlr+0x22c>)
 80014da:	701a      	strb	r2, [r3, #0]
		myPrintf("\nLora Received\r\n");
 80014dc:	4839      	ldr	r0, [pc, #228]	; (80015c4 <DioIrqHndlr+0x230>)
 80014de:	f7ff f847 	bl	8000570 <myPrintf>
		for (int i = 0; i < sizeof(rx_cmd); i++) {
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	e00a      	b.n	80014fe <DioIrqHndlr+0x16a>
			myPrintf(" %x", rx_cmd[i]);
 80014e8:	4a34      	ldr	r2, [pc, #208]	; (80015bc <DioIrqHndlr+0x228>)
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	4413      	add	r3, r2
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	4835      	ldr	r0, [pc, #212]	; (80015c8 <DioIrqHndlr+0x234>)
 80014f4:	f7ff f83c 	bl	8000570 <myPrintf>
		for (int i = 0; i < sizeof(rx_cmd); i++) {
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	3301      	adds	r3, #1
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2b0f      	cmp	r3, #15
 8001502:	d9f1      	bls.n	80014e8 <DioIrqHndlr+0x154>
		}
		myPrintf("\r\n");
 8001504:	4831      	ldr	r0, [pc, #196]	; (80015cc <DioIrqHndlr+0x238>)
 8001506:	f7ff f833 	bl	8000570 <myPrintf>
		if (pkt_id > 5) {
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <DioIrqHndlr+0x1cc>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b05      	cmp	r3, #5
 8001510:	d917      	bls.n	8001542 <DioIrqHndlr+0x1ae>
			myPrintf("\n\rTesting complete, Receive and Transmit done.  \r\n");
 8001512:	482f      	ldr	r0, [pc, #188]	; (80015d0 <DioIrqHndlr+0x23c>)
 8001514:	f7ff f82c 	bl	8000570 <myPrintf>
			myPrintf("__________________________________________________\r\n");
 8001518:	4824      	ldr	r0, [pc, #144]	; (80015ac <DioIrqHndlr+0x218>)
 800151a:	f7ff f829 	bl	8000570 <myPrintf>
			myPrintf(
 800151e:	482d      	ldr	r0, [pc, #180]	; (80015d4 <DioIrqHndlr+0x240>)
 8001520:	f7ff f826 	bl	8000570 <myPrintf>
					"________________Waiting to receive COM Command____________\r\n");
			myPrintf("SEND 'UART02' to test UART2 OBC'\r\n");
 8001524:	482c      	ldr	r0, [pc, #176]	; (80015d8 <DioIrqHndlr+0x244>)
 8001526:	f7ff f823 	bl	8000570 <myPrintf>
			myPrintf("SEND 'LPUART' to test LPUART OBC'\r\n");
 800152a:	482c      	ldr	r0, [pc, #176]	; (80015dc <DioIrqHndlr+0x248>)
 800152c:	f7ff f820 	bl	8000570 <myPrintf>
			myPrintf("SEND '3RADIO' to test RFO LP Radio'\r\n");
 8001530:	482b      	ldr	r0, [pc, #172]	; (80015e0 <DioIrqHndlr+0x24c>)
 8001532:	f7ff f81d 	bl	8000570 <myPrintf>
			myPrintf("__________________________________________________\r\n");
 8001536:	481d      	ldr	r0, [pc, #116]	; (80015ac <DioIrqHndlr+0x218>)
 8001538:	f7ff f81a 	bl	8000570 <myPrintf>
			pkt_id = 0;
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <DioIrqHndlr+0x1cc>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000059c 	.word	0x2000059c
 8001550:	0800ba58 	.word	0x0800ba58
 8001554:	20000448 	.word	0x20000448
 8001558:	0800ba84 	.word	0x0800ba84
 800155c:	0800ba8c 	.word	0x0800ba8c
 8001560:	20000469 	.word	0x20000469
 8001564:	200003a0 	.word	0x200003a0
 8001568:	0800ba90 	.word	0x0800ba90
 800156c:	0800bab4 	.word	0x0800bab4
 8001570:	0800bae4 	.word	0x0800bae4
 8001574:	0800b6f0 	.word	0x0800b6f0
 8001578:	0800b724 	.word	0x0800b724
 800157c:	17ec7f18 	.word	0x17ec7f18
 8001580:	17fbc158 	.word	0x17fbc158
 8001584:	0800b740 	.word	0x0800b740
 8001588:	0800b77c 	.word	0x0800b77c
 800158c:	200001bc 	.word	0x200001bc
 8001590:	0800b7dc 	.word	0x0800b7dc
 8001594:	200001a8 	.word	0x200001a8
 8001598:	0800b7f8 	.word	0x0800b7f8
 800159c:	0800b810 	.word	0x0800b810
 80015a0:	0800b828 	.word	0x0800b828
 80015a4:	0800b840 	.word	0x0800b840
 80015a8:	0800bb18 	.word	0x0800bb18
 80015ac:	0800b298 	.word	0x0800b298
 80015b0:	48000400 	.word	0x48000400
 80015b4:	000f4240 	.word	0x000f4240
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000458 	.word	0x20000458
 80015c0:	2000046e 	.word	0x2000046e
 80015c4:	0800bb5c 	.word	0x0800bb5c
 80015c8:	0800bb70 	.word	0x0800bb70
 80015cc:	0800bb74 	.word	0x0800bb74
 80015d0:	0800bb78 	.word	0x0800bb78
 80015d4:	0800b2d0 	.word	0x0800b2d0
 80015d8:	0800b310 	.word	0x0800b310
 80015dc:	0800b334 	.word	0x0800b334
 80015e0:	0800b358 	.word	0x0800b358

080015e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
}
 80015ea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015ec:	e7fe      	b.n	80015ec <Error_Handler+0x8>

080015ee <LL_AHB2_GRP1_EnableClock>:
{
 80015ee:	b480      	push	{r7}
 80015f0:	b085      	sub	sp, #20
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4313      	orrs	r3, r2
 8001604:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4013      	ands	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001612:	68fb      	ldr	r3, [r7, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800161e:	b480      	push	{r7}
 8001620:	b085      	sub	sp, #20
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800162a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800162c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4313      	orrs	r3, r2
 8001634:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4013      	ands	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800164e:	b480      	push	{r7}
 8001650:	b085      	sub	sp, #20
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800165c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4313      	orrs	r3, r2
 8001664:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4013      	ands	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800167e:	b480      	push	{r7}
 8001680:	b085      	sub	sp, #20
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800168c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4313      	orrs	r3, r2
 8001694:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800169a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4013      	ands	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016a2:	68fb      	ldr	r3, [r7, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b085      	sub	sp, #20
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80016b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80016c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4013      	ands	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016d2:	68fb      	ldr	r3, [r7, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b096      	sub	sp, #88	; 0x58
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	2238      	movs	r2, #56	; 0x38
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f009 f8d5 	bl	800a8bc <memset>
  if(huart->Instance==LPUART1)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a4f      	ldr	r2, [pc, #316]	; (8001854 <HAL_UART_MspInit+0x168>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d12c      	bne.n	8001776 <HAL_UART_MspInit+0x8a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800171c:	2320      	movs	r3, #32
 800171e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	4618      	mov	r0, r3
 800172a:	f001 fff1 	bl	8003710 <HAL_RCCEx_PeriphCLKConfig>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001734:	f7ff ff56 	bl	80015e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001738:	2001      	movs	r0, #1
 800173a:	f7ff ff88 	bl	800164e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173e:	2004      	movs	r0, #4
 8001740:	f7ff ff55 	bl	80015ee <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001744:	2303      	movs	r3, #3
 8001746:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001754:	2308      	movs	r3, #8
 8001756:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001758:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800175c:	4619      	mov	r1, r3
 800175e:	483e      	ldr	r0, [pc, #248]	; (8001858 <HAL_UART_MspInit+0x16c>)
 8001760:	f000 fc4a 	bl	8001ff8 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	2100      	movs	r1, #0
 8001768:	2026      	movs	r0, #38	; 0x26
 800176a:	f000 fb54 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800176e:	2026      	movs	r0, #38	; 0x26
 8001770:	f000 fb6b 	bl	8001e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001774:	e069      	b.n	800184a <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a38      	ldr	r2, [pc, #224]	; (800185c <HAL_UART_MspInit+0x170>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d130      	bne.n	80017e2 <HAL_UART_MspInit+0xf6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001780:	2301      	movs	r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001784:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001788:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	4618      	mov	r0, r3
 8001790:	f001 ffbe 	bl	8003710 <HAL_RCCEx_PeriphCLKConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_UART_MspInit+0xb2>
      Error_Handler();
 800179a:	f7ff ff23 	bl	80015e4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800179e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017a2:	f7ff ff6c 	bl	800167e <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	2001      	movs	r0, #1
 80017a8:	f7ff ff21 	bl	80015ee <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80017ac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017b0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017be:	2307      	movs	r3, #7
 80017c0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017c6:	4619      	mov	r1, r3
 80017c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017cc:	f000 fc14 	bl	8001ff8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	2024      	movs	r0, #36	; 0x24
 80017d6:	f000 fb1e 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017da:	2024      	movs	r0, #36	; 0x24
 80017dc:	f000 fb35 	bl	8001e4a <HAL_NVIC_EnableIRQ>
}
 80017e0:	e033      	b.n	800184a <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a1e      	ldr	r2, [pc, #120]	; (8001860 <HAL_UART_MspInit+0x174>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d12e      	bne.n	800184a <HAL_UART_MspInit+0x15e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017ec:	2302      	movs	r3, #2
 80017ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017f0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80017f4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	4618      	mov	r0, r3
 80017fc:	f001 ff88 	bl	8003710 <HAL_RCCEx_PeriphCLKConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_UART_MspInit+0x11e>
      Error_Handler();
 8001806:	f7ff feed 	bl	80015e4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800180a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800180e:	f7ff ff06 	bl	800161e <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	2001      	movs	r0, #1
 8001814:	f7ff feeb 	bl	80015ee <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001818:	230c      	movs	r3, #12
 800181a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001828:	2307      	movs	r3, #7
 800182a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001830:	4619      	mov	r1, r3
 8001832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001836:	f000 fbdf 	bl	8001ff8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	2025      	movs	r0, #37	; 0x25
 8001840:	f000 fae9 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001844:	2025      	movs	r0, #37	; 0x25
 8001846:	f000 fb00 	bl	8001e4a <HAL_NVIC_EnableIRQ>
}
 800184a:	bf00      	nop
 800184c:	3758      	adds	r7, #88	; 0x58
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40008000 	.word	0x40008000
 8001858:	48000800 	.word	0x48000800
 800185c:	40013800 	.word	0x40013800
 8001860:	40004400 	.word	0x40004400

08001864 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800186c:	2001      	movs	r0, #1
 800186e:	f7ff ff1e 	bl	80016ae <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2032      	movs	r0, #50	; 0x32
 8001878:	f000 facd 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800187c:	2032      	movs	r0, #50	; 0x32
 800187e:	f000 fae4 	bl	8001e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0d      	ldr	r2, [pc, #52]	; (80018d0 <HAL_TIM_Base_MspInit+0x44>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d10c      	bne.n	80018b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800189e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80018a2:	f7ff feec 	bl	800167e <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	2018      	movs	r0, #24
 80018ac:	f000 fab3 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80018b0:	2018      	movs	r0, #24
 80018b2:	f000 faca 	bl	8001e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018b6:	e007      	b.n	80018c8 <HAL_TIM_Base_MspInit+0x3c>
  else if(htim_base->Instance==TIM2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c0:	d102      	bne.n	80018c8 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018c2:	2001      	movs	r0, #1
 80018c4:	f7ff feab 	bl	800161e <LL_APB1_GRP1_EnableClock>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40012c00 	.word	0x40012c00

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <NMI_Handler+0x4>

080018da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <HardFault_Handler+0x4>

080018e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <MemManage_Handler+0x4>

080018e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <BusFault_Handler+0x4>

080018ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <UsageFault_Handler+0x4>

080018f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800191a:	f000 f993 	bl	8001c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <TIM1_UP_IRQHandler+0x10>)
 800192a:	f002 fdd3 	bl	80044d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200003a0 	.word	0x200003a0

08001938 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <USART1_IRQHandler+0x10>)
 800193e:	f003 fa8b 	bl	8004e58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	2000026c 	.word	0x2000026c

0800194c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <USART2_IRQHandler+0x10>)
 8001952:	f003 fa81 	bl	8004e58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000300 	.word	0x20000300

08001960 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <LPUART1_IRQHandler+0x10>)
 8001966:	f003 fa77 	bl	8004e58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200001d8 	.word	0x200001d8

08001974 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <SUBGHZ_Radio_IRQHandler+0x10>)
 800197a:	f002 faff 	bl	8003f7c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000394 	.word	0x20000394

08001988 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_GetTick+0x24>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80019a6:	f000 f892 	bl	8001ace <TIMER_IF_GetTimerValue>
 80019aa:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80019ac:	687b      	ldr	r3, [r7, #4]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200005a3 	.word	0x200005a3

080019bc <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f8af 	bl	8001b2a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019dc:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <_sbrk+0x5c>)
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <_sbrk+0x60>)
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <_sbrk+0x64>)
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <_sbrk+0x68>)
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d207      	bcs.n	8001a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a04:	f008 ff62 	bl	800a8cc <__errno>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a12:	e009      	b.n	8001a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <_sbrk+0x64>)
 8001a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20010000 	.word	0x20010000
 8001a34:	00000400 	.word	0x00000400
 8001a38:	200005a4 	.word	0x200005a4
 8001a3c:	200008b8 	.word	0x200008b8

08001a40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8001a56:	79fb      	ldrb	r3, [r7, #7]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8001a84:	79fb      	ldrb	r3, [r7, #7]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001a94:	4b02      	ldr	r3, [pc, #8]	; (8001aa0 <TIMER_IF_SetTimerContext+0x10>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	200005a8 	.word	0x200005a8

08001aa4 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001aa8:	4b02      	ldr	r3, [pc, #8]	; (8001ab4 <TIMER_IF_GetTimerContext+0x10>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	200005a8 	.word	0x200005a8

08001ab8 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8001ac2:	687b      	ldr	r3, [r7, #4]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8001ad8:	687b      	ldr	r3, [r7, #4]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8001aee:	687b      	ldr	r3, [r7, #4]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b085      	sub	sp, #20
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b085      	sub	sp, #20
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b3c:	480d      	ldr	r0, [pc, #52]	; (8001b74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b3e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b40:	f7ff ff7e 	bl	8001a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b44:	480c      	ldr	r0, [pc, #48]	; (8001b78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b46:	490d      	ldr	r1, [pc, #52]	; (8001b7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b48:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <LoopForever+0xe>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b4c:	e002      	b.n	8001b54 <LoopCopyDataInit>

08001b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b52:	3304      	adds	r3, #4

08001b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b58:	d3f9      	bcc.n	8001b4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b5c:	4c0a      	ldr	r4, [pc, #40]	; (8001b88 <LoopForever+0x16>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b60:	e001      	b.n	8001b66 <LoopFillZerobss>

08001b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b64:	3204      	adds	r2, #4

08001b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b68:	d3fb      	bcc.n	8001b62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b6a:	f008 feb5 	bl	800a8d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b6e:	f7fe fed1 	bl	8000914 <main>

08001b72 <LoopForever>:

LoopForever:
    b LoopForever
 8001b72:	e7fe      	b.n	8001b72 <LoopForever>
  ldr   r0, =_estack
 8001b74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b7c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001b80:	0800be64 	.word	0x0800be64
  ldr r2, =_sbss
 8001b84:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001b88:	200008b8 	.word	0x200008b8

08001b8c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b8c:	e7fe      	b.n	8001b8c <ADC_IRQHandler>
	...

08001b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9a:	2003      	movs	r0, #3
 8001b9c:	f000 f930 	bl	8001e00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ba0:	f001 fbd8 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4a09      	ldr	r2, [pc, #36]	; (8001bcc <HAL_Init+0x3c>)
 8001ba8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001baa:	2000      	movs	r0, #0
 8001bac:	f000 f810 	bl	8001bd0 <HAL_InitTick>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	71fb      	strb	r3, [r7, #7]
 8001bba:	e001      	b.n	8001bc0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bbc:	f7ff fd8f 	bl	80016de <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000004 	.word	0x20000004

08001bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bdc:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <HAL_InitTick+0x6c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d024      	beq.n	8001c2e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001be4:	f001 fbb6 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <HAL_InitTick+0x6c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 f932 	bl	8001e66 <HAL_SYSTICK_Config>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10f      	bne.n	8001c28 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b0f      	cmp	r3, #15
 8001c0c:	d809      	bhi.n	8001c22 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c16:	f000 f8fe 	bl	8001e16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c1a:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <HAL_InitTick+0x70>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	e007      	b.n	8001c32 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	73fb      	strb	r3, [r7, #15]
 8001c26:	e004      	b.n	8001c32 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	e001      	b.n	8001c32 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	2000000c 	.word	0x2000000c
 8001c40:	20000008 	.word	0x20000008

08001c44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_IncTick+0x1c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_IncTick+0x20>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	4a03      	ldr	r2, [pc, #12]	; (8001c64 <HAL_IncTick+0x20>)
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	2000000c 	.word	0x2000000c
 8001c64:	200005ac 	.word	0x200005ac

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9a:	4a04      	ldr	r2, [pc, #16]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	60d3      	str	r3, [r2, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0b      	blt.n	8001cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4906      	ldr	r1, [pc, #24]	; (8001d00 <__NVIC_EnableIRQ+0x34>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2001      	movs	r0, #1
 8001cee:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	e000e100 	.word	0xe000e100

08001d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	db0a      	blt.n	8001d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	490c      	ldr	r1, [pc, #48]	; (8001d50 <__NVIC_SetPriority+0x4c>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	440b      	add	r3, r1
 8001d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d2c:	e00a      	b.n	8001d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4908      	ldr	r1, [pc, #32]	; (8001d54 <__NVIC_SetPriority+0x50>)
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	0112      	lsls	r2, r2, #4
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	440b      	add	r3, r1
 8001d42:	761a      	strb	r2, [r3, #24]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000e100 	.word	0xe000e100
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f1c3 0307 	rsb	r3, r3, #7
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	bf28      	it	cs
 8001d76:	2304      	movcs	r3, #4
 8001d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d902      	bls.n	8001d88 <NVIC_EncodePriority+0x30>
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3b03      	subs	r3, #3
 8001d86:	e000      	b.n	8001d8a <NVIC_EncodePriority+0x32>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43d9      	mvns	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	4313      	orrs	r3, r2
         );
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3724      	adds	r7, #36	; 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dcc:	d301      	bcc.n	8001dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00f      	b.n	8001df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <SysTick_Config+0x40>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dda:	210f      	movs	r1, #15
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001de0:	f7ff ff90 	bl	8001d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <SysTick_Config+0x40>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <SysTick_Config+0x40>)
 8001dec:	2207      	movs	r2, #7
 8001dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	e000e010 	.word	0xe000e010

08001e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff2d 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e24:	f7ff ff44 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001e28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f7ff ff92 	bl	8001d58 <NVIC_EncodePriority>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff61 	bl	8001d04 <__NVIC_SetPriority>
}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff37 	bl	8001ccc <__NVIC_EnableIRQ>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffa4 	bl	8001dbc <SysTick_Config>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e04f      	b.n	8001f30 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d008      	beq.n	8001eae <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e040      	b.n	8001f30 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 020e 	bic.w	r2, r2, #14
 8001ebc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ecc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0201 	bic.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f003 021c 	and.w	r2, r3, #28
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	2101      	movs	r1, #1
 8001eec:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001efa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00c      	beq.n	8001f1e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f1c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d005      	beq.n	8001f5e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2204      	movs	r2, #4
 8001f56:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	e047      	b.n	8001fee <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 020e 	bic.w	r2, r2, #14
 8001f6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	f003 021c 	and.w	r2, r3, #28
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001faa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00c      	beq.n	8001fce <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001fcc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	4798      	blx	r3
    }
  }
  return status;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002006:	e140      	b.n	800228a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2101      	movs	r1, #1
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 8132 	beq.w	8002284 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d005      	beq.n	8002038 <HAL_GPIO_Init+0x40>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d130      	bne.n	800209a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	2203      	movs	r2, #3
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800206e:	2201      	movs	r2, #1
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	f003 0201 	and.w	r2, r3, #1
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d017      	beq.n	80020d6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d123      	bne.n	800212a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	08da      	lsrs	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3208      	adds	r2, #8
 80020ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	220f      	movs	r2, #15
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	08da      	lsrs	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3208      	adds	r2, #8
 8002124:	6939      	ldr	r1, [r7, #16]
 8002126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	2203      	movs	r2, #3
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0203 	and.w	r2, r3, #3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 808c 	beq.w	8002284 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800216c:	4a4e      	ldr	r2, [pc, #312]	; (80022a8 <HAL_GPIO_Init+0x2b0>)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	089b      	lsrs	r3, r3, #2
 8002172:	3302      	adds	r3, #2
 8002174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002178:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	2207      	movs	r2, #7
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002196:	d00d      	beq.n	80021b4 <HAL_GPIO_Init+0x1bc>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a44      	ldr	r2, [pc, #272]	; (80022ac <HAL_GPIO_Init+0x2b4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d007      	beq.n	80021b0 <HAL_GPIO_Init+0x1b8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a43      	ldr	r2, [pc, #268]	; (80022b0 <HAL_GPIO_Init+0x2b8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d101      	bne.n	80021ac <HAL_GPIO_Init+0x1b4>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e004      	b.n	80021b6 <HAL_GPIO_Init+0x1be>
 80021ac:	2307      	movs	r3, #7
 80021ae:	e002      	b.n	80021b6 <HAL_GPIO_Init+0x1be>
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <HAL_GPIO_Init+0x1be>
 80021b4:	2300      	movs	r3, #0
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	f002 0203 	and.w	r2, r2, #3
 80021bc:	0092      	lsls	r2, r2, #2
 80021be:	4093      	lsls	r3, r2
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021c6:	4938      	ldr	r1, [pc, #224]	; (80022a8 <HAL_GPIO_Init+0x2b0>)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3302      	adds	r3, #2
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021d4:	4b37      	ldr	r3, [pc, #220]	; (80022b4 <HAL_GPIO_Init+0x2bc>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021f8:	4a2e      	ldr	r2, [pc, #184]	; (80022b4 <HAL_GPIO_Init+0x2bc>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021fe:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <HAL_GPIO_Init+0x2bc>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002222:	4a24      	ldr	r2, [pc, #144]	; (80022b4 <HAL_GPIO_Init+0x2bc>)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002228:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <HAL_GPIO_Init+0x2bc>)
 800222a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800222e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	43db      	mvns	r3, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800224e:	4a19      	ldr	r2, [pc, #100]	; (80022b4 <HAL_GPIO_Init+0x2bc>)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <HAL_GPIO_Init+0x2bc>)
 8002258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800225c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <HAL_GPIO_Init+0x2bc>)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3301      	adds	r3, #1
 8002288:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	f47f aeb7 	bne.w	8002008 <HAL_GPIO_Init+0x10>
  }
}
 800229a:	bf00      	nop
 800229c:	bf00      	nop
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40010000 	.word	0x40010000
 80022ac:	48000400 	.word	0x48000400
 80022b0:	48000800 	.word	0x48000800
 80022b4:	58000800 	.word	0x58000800

080022b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
 80022c4:	4613      	mov	r3, r2
 80022c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022c8:	787b      	ldrb	r3, [r7, #1]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022ce:	887a      	ldrh	r2, [r7, #2]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022d4:	e002      	b.n	80022dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022d6:	887a      	ldrh	r2, [r7, #2]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
	...

080022e8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <HAL_PWR_EnableBkUpAccess+0x18>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a03      	ldr	r2, [pc, #12]	; (8002300 <HAL_PWR_EnableBkUpAccess+0x18>)
 80022f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f6:	6013      	str	r3, [r2, #0]
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	58000400 	.word	0x58000400

08002304 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <HAL_PWREx_GetVoltageRange+0x14>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	58000400 	.word	0x58000400

0800231c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800232c:	d101      	bne.n	8002332 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	58000400 	.word	0x58000400

08002340 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800234e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800236a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800236e:	6013      	str	r3, [r2, #0]
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr

08002378 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800237c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800238a:	d101      	bne.n	8002390 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800239e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80023ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr

080023d2 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80023d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023e4:	d101      	bne.n	80023ea <LL_RCC_HSE_IsReady+0x18>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <LL_RCC_HSE_IsReady+0x1a>
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80023f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800241e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002422:	6013      	str	r3, [r2, #0]
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800243e:	d101      	bne.n	8002444 <LL_RCC_HSI_IsReady+0x18>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <LL_RCC_HSI_IsReady+0x1a>
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	061b      	lsls	r3, r3, #24
 8002464:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr

08002476 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800247a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b02      	cmp	r3, #2
 8002488:	d101      	bne.n	800248e <LL_RCC_LSE_IsReady+0x18>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <LL_RCC_LSE_IsReady+0x1a>
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800249c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80024bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80024dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d101      	bne.n	80024f0 <LL_RCC_LSI_IsReady+0x18>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <LL_RCC_LSI_IsReady+0x1a>
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80024fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6013      	str	r3, [r2, #0]
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	6013      	str	r3, [r2, #0]
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr

08002532 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b02      	cmp	r3, #2
 8002542:	d101      	bne.n	8002548 <LL_RCC_MSI_IsReady+0x16>
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <LL_RCC_MSI_IsReady+0x18>
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr

08002552 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b08      	cmp	r3, #8
 8002562:	d101      	bne.n	8002568 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800258c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002594:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002598:	4618      	mov	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80025a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80025d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f023 0203 	bic.w	r2, r3, #3
 80025da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	608b      	str	r3, [r1, #8]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr

080025ee <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80025f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 030c 	and.w	r3, r3, #12
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800260c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002616:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4313      	orrs	r3, r2
 800261e:	608b      	str	r3, [r1, #8]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002636:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800263a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800263e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800265c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002660:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002664:	f023 020f 	bic.w	r2, r3, #15
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	091b      	lsrs	r3, r3, #4
 800266c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002692:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4313      	orrs	r3, r2
 800269a:	608b      	str	r3, [r1, #8]
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr

080026a6 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80026ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr

080026cc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80026d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80026e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr

080026fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800270a:	4618      	mov	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr

08002712 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800272c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800273a:	6013      	str	r3, [r2, #0]
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002756:	6013      	str	r3, [r2, #0]
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002772:	d101      	bne.n	8002778 <LL_RCC_PLL_IsReady+0x18>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <LL_RCC_PLL_IsReady+0x1a>
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr

08002782 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002792:	4618      	mov	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800279e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80027b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80027be:	4618      	mov	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80027ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0303 	and.w	r3, r3, #3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80027e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ee:	d101      	bne.n	80027f4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002806:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002812:	d101      	bne.n	8002818 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800282e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002836:	d101      	bne.n	800283c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002846:	b480      	push	{r7}
 8002848:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800284a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002858:	d101      	bne.n	800285e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800286c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002876:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800287a:	d101      	bne.n	8002880 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr
	...

0800288c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e36f      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289e:	f7ff fea6 	bl	80025ee <LL_RCC_GetSysClkSource>
 80028a2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028a4:	f7ff ff8f 	bl	80027c6 <LL_RCC_PLL_GetMainSource>
 80028a8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 80c4 	beq.w	8002a40 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <HAL_RCC_OscConfig+0x3e>
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	2b0c      	cmp	r3, #12
 80028c2:	d176      	bne.n	80029b2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d173      	bne.n	80029b2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e353      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_OscConfig+0x68>
 80028e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f2:	e006      	b.n	8002902 <HAL_RCC_OscConfig+0x76>
 80028f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002902:	4293      	cmp	r3, r2
 8002904:	d222      	bcs.n	800294c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	4618      	mov	r0, r3
 800290c:	f000 fd5a 	bl	80033c4 <RCC_SetFlashLatencyFromMSIRange>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e331      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800291a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002924:	f043 0308 	orr.w	r3, r3, #8
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800293c:	4313      	orrs	r3, r2
 800293e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fe2b 	bl	80025a0 <LL_RCC_MSI_SetCalibTrimming>
 800294a:	e021      	b.n	8002990 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002956:	f043 0308 	orr.w	r3, r3, #8
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fe12 	bl	80025a0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fd1f 	bl	80033c4 <RCC_SetFlashLatencyFromMSIRange>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e2f6      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002990:	f000 fce0 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 8002994:	4603      	mov	r3, r0
 8002996:	4aa7      	ldr	r2, [pc, #668]	; (8002c34 <HAL_RCC_OscConfig+0x3a8>)
 8002998:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800299a:	4ba7      	ldr	r3, [pc, #668]	; (8002c38 <HAL_RCC_OscConfig+0x3ac>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff f916 	bl	8001bd0 <HAL_InitTick>
 80029a4:	4603      	mov	r3, r0
 80029a6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80029a8:	7cfb      	ldrb	r3, [r7, #19]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d047      	beq.n	8002a3e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80029ae:	7cfb      	ldrb	r3, [r7, #19]
 80029b0:	e2e5      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d02c      	beq.n	8002a14 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029ba:	f7ff fd9e 	bl	80024fa <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029be:	f7fe ffe9 	bl	8001994 <HAL_GetTick>
 80029c2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029c6:	f7fe ffe5 	bl	8001994 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e2d2      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80029d8:	f7ff fdab 	bl	8002532 <LL_RCC_MSI_IsReady>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f1      	beq.n	80029c6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ec:	f043 0308 	orr.w	r3, r3, #8
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a04:	4313      	orrs	r3, r2
 8002a06:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fdc7 	bl	80025a0 <LL_RCC_MSI_SetCalibTrimming>
 8002a12:	e015      	b.n	8002a40 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a14:	f7ff fd7f 	bl	8002516 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a18:	f7fe ffbc 	bl	8001994 <HAL_GetTick>
 8002a1c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a20:	f7fe ffb8 	bl	8001994 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e2a5      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002a32:	f7ff fd7e 	bl	8002532 <LL_RCC_MSI_IsReady>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f1      	bne.n	8002a20 <HAL_RCC_OscConfig+0x194>
 8002a3c:	e000      	b.n	8002a40 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002a3e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d058      	beq.n	8002afe <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d005      	beq.n	8002a5e <HAL_RCC_OscConfig+0x1d2>
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	2b0c      	cmp	r3, #12
 8002a56:	d108      	bne.n	8002a6a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d105      	bne.n	8002a6a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d14b      	bne.n	8002afe <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e289      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a88:	d102      	bne.n	8002a90 <HAL_RCC_OscConfig+0x204>
 8002a8a:	f7ff fc86 	bl	800239a <LL_RCC_HSE_Enable>
 8002a8e:	e00d      	b.n	8002aac <HAL_RCC_OscConfig+0x220>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002a98:	d104      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x218>
 8002a9a:	f7ff fc51 	bl	8002340 <LL_RCC_HSE_EnableTcxo>
 8002a9e:	f7ff fc7c 	bl	800239a <LL_RCC_HSE_Enable>
 8002aa2:	e003      	b.n	8002aac <HAL_RCC_OscConfig+0x220>
 8002aa4:	f7ff fc87 	bl	80023b6 <LL_RCC_HSE_Disable>
 8002aa8:	f7ff fc58 	bl	800235c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d012      	beq.n	8002ada <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fe ff6e 	bl	8001994 <HAL_GetTick>
 8002ab8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002abc:	f7fe ff6a 	bl	8001994 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	; 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e257      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ace:	f7ff fc80 	bl	80023d2 <LL_RCC_HSE_IsReady>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0f1      	beq.n	8002abc <HAL_RCC_OscConfig+0x230>
 8002ad8:	e011      	b.n	8002afe <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ada:	f7fe ff5b 	bl	8001994 <HAL_GetTick>
 8002ade:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae2:	f7fe ff57 	bl	8001994 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b64      	cmp	r3, #100	; 0x64
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e244      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002af4:	f7ff fc6d 	bl	80023d2 <LL_RCC_HSE_IsReady>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f1      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d046      	beq.n	8002b98 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_OscConfig+0x290>
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d10e      	bne.n	8002b34 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d10b      	bne.n	8002b34 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e22a      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff fc8e 	bl	800244e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002b32:	e031      	b.n	8002b98 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d019      	beq.n	8002b70 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b3c:	f7ff fc5a 	bl	80023f4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe ff28 	bl	8001994 <HAL_GetTick>
 8002b44:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b48:	f7fe ff24 	bl	8001994 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e211      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002b5a:	f7ff fc67 	bl	800242c <LL_RCC_HSI_IsReady>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f1      	beq.n	8002b48 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fc70 	bl	800244e <LL_RCC_HSI_SetCalibTrimming>
 8002b6e:	e013      	b.n	8002b98 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b70:	f7ff fc4e 	bl	8002410 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7fe ff0e 	bl	8001994 <HAL_GetTick>
 8002b78:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7c:	f7fe ff0a 	bl	8001994 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e1f7      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002b8e:	f7ff fc4d 	bl	800242c <LL_RCC_HSI_IsReady>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f1      	bne.n	8002b7c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d06e      	beq.n	8002c82 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d056      	beq.n	8002c5a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69da      	ldr	r2, [r3, #28]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d031      	beq.n	8002c28 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e1d0      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d013      	beq.n	8002c0e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002be6:	f7ff fc67 	bl	80024b8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bea:	f7fe fed3 	bl	8001994 <HAL_GetTick>
 8002bee:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf2:	f7fe fecf 	bl	8001994 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b11      	cmp	r3, #17
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e1bc      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002c04:	f7ff fc68 	bl	80024d8 <LL_RCC_LSI_IsReady>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f1      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c16:	f023 0210 	bic.w	r2, r3, #16
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c28:	f7ff fc36 	bl	8002498 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2c:	f7fe feb2 	bl	8001994 <HAL_GetTick>
 8002c30:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002c32:	e00c      	b.n	8002c4e <HAL_RCC_OscConfig+0x3c2>
 8002c34:	20000004 	.word	0x20000004
 8002c38:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c3c:	f7fe feaa 	bl	8001994 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b11      	cmp	r3, #17
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e197      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002c4e:	f7ff fc43 	bl	80024d8 <LL_RCC_LSI_IsReady>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f1      	beq.n	8002c3c <HAL_RCC_OscConfig+0x3b0>
 8002c58:	e013      	b.n	8002c82 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5a:	f7ff fc2d 	bl	80024b8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5e:	f7fe fe99 	bl	8001994 <HAL_GetTick>
 8002c62:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c66:	f7fe fe95 	bl	8001994 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b11      	cmp	r3, #17
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e182      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002c78:	f7ff fc2e 	bl	80024d8 <LL_RCC_LSI_IsReady>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f1      	bne.n	8002c66 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 80d8 	beq.w	8002e40 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002c90:	f7ff fb44 	bl	800231c <LL_PWR_IsEnabledBkUpAccess>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d113      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002c9a:	f7ff fb25 	bl	80022e8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9e:	f7fe fe79 	bl	8001994 <HAL_GetTick>
 8002ca2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca6:	f7fe fe75 	bl	8001994 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e162      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002cb8:	f7ff fb30 	bl	800231c <LL_PWR_IsEnabledBkUpAccess>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f1      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d07b      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b85      	cmp	r3, #133	; 0x85
 8002cd0:	d003      	beq.n	8002cda <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b05      	cmp	r3, #5
 8002cd8:	d109      	bne.n	8002cee <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce6:	f043 0304 	orr.w	r3, r3, #4
 8002cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cee:	f7fe fe51 	bl	8001994 <HAL_GetTick>
 8002cf2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7fe fe43 	bl	8001994 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e12e      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002d20:	f7ff fba9 	bl	8002476 <LL_RCC_LSE_IsReady>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0ef      	beq.n	8002d0a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	2b81      	cmp	r3, #129	; 0x81
 8002d30:	d003      	beq.n	8002d3a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	2b85      	cmp	r3, #133	; 0x85
 8002d38:	d121      	bne.n	8002d7e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3a:	f7fe fe2b 	bl	8001994 <HAL_GetTick>
 8002d3e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fe fe1d 	bl	8001994 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e108      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0ec      	beq.n	8002d56 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002d7c:	e060      	b.n	8002e40 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7e:	f7fe fe09 	bl	8001994 <HAL_GetTick>
 8002d82:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f7fe fdfb 	bl	8001994 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e0e6      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1ec      	bne.n	8002d9a <HAL_RCC_OscConfig+0x50e>
 8002dc0:	e03e      	b.n	8002e40 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc2:	f7fe fde7 	bl	8001994 <HAL_GetTick>
 8002dc6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ddc:	e00a      	b.n	8002df4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dde:	f7fe fdd9 	bl	8001994 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e0c4      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1ec      	bne.n	8002dde <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e04:	f7fe fdc6 	bl	8001994 <HAL_GetTick>
 8002e08:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e16:	f023 0301 	bic.w	r3, r3, #1
 8002e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e20:	f7fe fdb8 	bl	8001994 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e0a3      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002e36:	f7ff fb1e 	bl	8002476 <LL_RCC_LSE_IsReady>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1ef      	bne.n	8002e20 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 8099 	beq.w	8002f7c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	2b0c      	cmp	r3, #12
 8002e4e:	d06c      	beq.n	8002f2a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d14b      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e58:	f7ff fc74 	bl	8002744 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fd9a 	bl	8001994 <HAL_GetTick>
 8002e60:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e64:	f7fe fd96 	bl	8001994 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b0a      	cmp	r3, #10
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e083      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002e76:	f7ff fc73 	bl	8002760 <LL_RCC_PLL_IsReady>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f1      	bne.n	8002e64 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	4b40      	ldr	r3, [pc, #256]	; (8002f88 <HAL_RCC_OscConfig+0x6fc>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e92:	4311      	orrs	r1, r2
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e98:	0212      	lsls	r2, r2, #8
 8002e9a:	4311      	orrs	r1, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ea0:	4311      	orrs	r1, r2
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ea6:	4311      	orrs	r1, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002eac:	430a      	orrs	r2, r1
 8002eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb6:	f7ff fc37 	bl	8002728 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eca:	f7fe fd63 	bl	8001994 <HAL_GetTick>
 8002ece:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed2:	f7fe fd5f 	bl	8001994 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b0a      	cmp	r3, #10
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e04c      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002ee4:	f7ff fc3c 	bl	8002760 <LL_RCC_PLL_IsReady>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f1      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x646>
 8002eee:	e045      	b.n	8002f7c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef0:	f7ff fc28 	bl	8002744 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7fe fd4e 	bl	8001994 <HAL_GetTick>
 8002ef8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efc:	f7fe fd4a 	bl	8001994 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b0a      	cmp	r3, #10
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e037      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002f0e:	f7ff fc27 	bl	8002760 <LL_RCC_PLL_IsReady>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f1      	bne.n	8002efc <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f22:	4b1a      	ldr	r3, [pc, #104]	; (8002f8c <HAL_RCC_OscConfig+0x700>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	60cb      	str	r3, [r1, #12]
 8002f28:	e028      	b.n	8002f7c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e023      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	f003 0203 	and.w	r2, r3, #3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d115      	bne.n	8002f78 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d10e      	bne.n	8002f78 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d106      	bne.n	8002f78 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3720      	adds	r7, #32
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	11c1808c 	.word	0x11c1808c
 8002f8c:	eefefffc 	.word	0xeefefffc

08002f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e12c      	b.n	80031fe <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b98      	ldr	r3, [pc, #608]	; (8003208 <HAL_RCC_ClockConfig+0x278>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d91b      	bls.n	8002fea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b95      	ldr	r3, [pc, #596]	; (8003208 <HAL_RCC_ClockConfig+0x278>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 0207 	bic.w	r2, r3, #7
 8002fba:	4993      	ldr	r1, [pc, #588]	; (8003208 <HAL_RCC_ClockConfig+0x278>)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc2:	f7fe fce7 	bl	8001994 <HAL_GetTick>
 8002fc6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002fca:	f7fe fce3 	bl	8001994 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e110      	b.n	80031fe <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fdc:	4b8a      	ldr	r3, [pc, #552]	; (8003208 <HAL_RCC_ClockConfig+0x278>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d1ef      	bne.n	8002fca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d016      	beq.n	8003024 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fb02 	bl	8002604 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003000:	f7fe fcc8 	bl	8001994 <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003008:	f7fe fcc4 	bl	8001994 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e0f1      	b.n	80031fe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800301a:	f7ff fbdf 	bl	80027dc <LL_RCC_IsActiveFlag_HPRE>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f1      	beq.n	8003008 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b00      	cmp	r3, #0
 800302e:	d016      	beq.n	800305e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff faf8 	bl	800262a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800303a:	f7fe fcab 	bl	8001994 <HAL_GetTick>
 800303e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003042:	f7fe fca7 	bl	8001994 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e0d4      	b.n	80031fe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003054:	f7ff fbd3 	bl	80027fe <LL_RCC_IsActiveFlag_C2HPRE>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f1      	beq.n	8003042 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d016      	beq.n	8003098 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff faf0 	bl	8002654 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003074:	f7fe fc8e 	bl	8001994 <HAL_GetTick>
 8003078:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800307c:	f7fe fc8a 	bl	8001994 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e0b7      	b.n	80031fe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800308e:	f7ff fbc8 	bl	8002822 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f1      	beq.n	800307c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d016      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fae9 	bl	8002680 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030ae:	f7fe fc71 	bl	8001994 <HAL_GetTick>
 80030b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030b6:	f7fe fc6d 	bl	8001994 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e09a      	b.n	80031fe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80030c8:	f7ff fbbd 	bl	8002846 <LL_RCC_IsActiveFlag_PPRE1>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f1      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d017      	beq.n	800310e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fade 	bl	80026a6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030ea:	f7fe fc53 	bl	8001994 <HAL_GetTick>
 80030ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030f2:	f7fe fc4f 	bl	8001994 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e07c      	b.n	80031fe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003104:	f7ff fbb0 	bl	8002868 <LL_RCC_IsActiveFlag_PPRE2>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f1      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d043      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d106      	bne.n	8003130 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003122:	f7ff f956 	bl	80023d2 <LL_RCC_HSE_IsReady>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d11e      	bne.n	800316a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e066      	b.n	80031fe <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d106      	bne.n	8003146 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003138:	f7ff fb12 	bl	8002760 <LL_RCC_PLL_IsReady>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d113      	bne.n	800316a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e05b      	b.n	80031fe <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800314e:	f7ff f9f0 	bl	8002532 <LL_RCC_MSI_IsReady>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d108      	bne.n	800316a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e050      	b.n	80031fe <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800315c:	f7ff f966 	bl	800242c <LL_RCC_HSI_IsReady>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e049      	b.n	80031fe <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fa2a 	bl	80025c8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003174:	f7fe fc0e 	bl	8001994 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	e00a      	b.n	8003192 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317c:	f7fe fc0a 	bl	8001994 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e035      	b.n	80031fe <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	f7ff fa2c 	bl	80025ee <LL_RCC_GetSysClkSource>
 8003196:	4602      	mov	r2, r0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	429a      	cmp	r2, r3
 80031a0:	d1ec      	bne.n	800317c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031a2:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_RCC_ClockConfig+0x278>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d21b      	bcs.n	80031e8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b0:	4b15      	ldr	r3, [pc, #84]	; (8003208 <HAL_RCC_ClockConfig+0x278>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f023 0207 	bic.w	r2, r3, #7
 80031b8:	4913      	ldr	r1, [pc, #76]	; (8003208 <HAL_RCC_ClockConfig+0x278>)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	4313      	orrs	r3, r2
 80031be:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c0:	f7fe fbe8 	bl	8001994 <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c6:	e008      	b.n	80031da <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80031c8:	f7fe fbe4 	bl	8001994 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e011      	b.n	80031fe <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_RCC_ClockConfig+0x278>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d1ef      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80031e8:	f000 f8b4 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 80031ec:	4603      	mov	r3, r0
 80031ee:	4a07      	ldr	r2, [pc, #28]	; (800320c <HAL_RCC_ClockConfig+0x27c>)
 80031f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80031f2:	4b07      	ldr	r3, [pc, #28]	; (8003210 <HAL_RCC_ClockConfig+0x280>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe fcea 	bl	8001bd0 <HAL_InitTick>
 80031fc:	4603      	mov	r3, r0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	58004000 	.word	0x58004000
 800320c:	20000004 	.word	0x20000004
 8003210:	20000008 	.word	0x20000008

08003214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003222:	f7ff f9e4 	bl	80025ee <LL_RCC_GetSysClkSource>
 8003226:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003228:	f7ff facd 	bl	80027c6 <LL_RCC_PLL_GetMainSource>
 800322c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x2c>
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b0c      	cmp	r3, #12
 8003238:	d139      	bne.n	80032ae <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d136      	bne.n	80032ae <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003240:	f7ff f987 	bl	8002552 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d115      	bne.n	8003276 <HAL_RCC_GetSysClockFreq+0x62>
 800324a:	f7ff f982 	bl	8002552 <LL_RCC_MSI_IsEnabledRangeSelect>
 800324e:	4603      	mov	r3, r0
 8003250:	2b01      	cmp	r3, #1
 8003252:	d106      	bne.n	8003262 <HAL_RCC_GetSysClockFreq+0x4e>
 8003254:	f7ff f98d 	bl	8002572 <LL_RCC_MSI_GetRange>
 8003258:	4603      	mov	r3, r0
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	e005      	b.n	800326e <HAL_RCC_GetSysClockFreq+0x5a>
 8003262:	f7ff f991 	bl	8002588 <LL_RCC_MSI_GetRangeAfterStandby>
 8003266:	4603      	mov	r3, r0
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	4a36      	ldr	r2, [pc, #216]	; (8003348 <HAL_RCC_GetSysClockFreq+0x134>)
 8003270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003274:	e014      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x8c>
 8003276:	f7ff f96c 	bl	8002552 <LL_RCC_MSI_IsEnabledRangeSelect>
 800327a:	4603      	mov	r3, r0
 800327c:	2b01      	cmp	r3, #1
 800327e:	d106      	bne.n	800328e <HAL_RCC_GetSysClockFreq+0x7a>
 8003280:	f7ff f977 	bl	8002572 <LL_RCC_MSI_GetRange>
 8003284:	4603      	mov	r3, r0
 8003286:	091b      	lsrs	r3, r3, #4
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	e005      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x86>
 800328e:	f7ff f97b 	bl	8002588 <LL_RCC_MSI_GetRangeAfterStandby>
 8003292:	4603      	mov	r3, r0
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	4a2b      	ldr	r2, [pc, #172]	; (8003348 <HAL_RCC_GetSysClockFreq+0x134>)
 800329c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d115      	bne.n	80032d4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80032ac:	e012      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d102      	bne.n	80032ba <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032b4:	4b25      	ldr	r3, [pc, #148]	; (800334c <HAL_RCC_GetSysClockFreq+0x138>)
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	e00c      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d109      	bne.n	80032d4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80032c0:	f7ff f85a 	bl	8002378 <LL_RCC_HSE_IsEnabledDiv2>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d102      	bne.n	80032d0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80032ca:	4b20      	ldr	r3, [pc, #128]	; (800334c <HAL_RCC_GetSysClockFreq+0x138>)
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	e001      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80032d0:	4b1f      	ldr	r3, [pc, #124]	; (8003350 <HAL_RCC_GetSysClockFreq+0x13c>)
 80032d2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d4:	f7ff f98b 	bl	80025ee <LL_RCC_GetSysClkSource>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b0c      	cmp	r3, #12
 80032dc:	d12f      	bne.n	800333e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80032de:	f7ff fa72 	bl	80027c6 <LL_RCC_PLL_GetMainSource>
 80032e2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d003      	beq.n	80032f2 <HAL_RCC_GetSysClockFreq+0xde>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d003      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0xe4>
 80032f0:	e00d      	b.n	800330e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <HAL_RCC_GetSysClockFreq+0x138>)
 80032f4:	60fb      	str	r3, [r7, #12]
        break;
 80032f6:	e00d      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80032f8:	f7ff f83e 	bl	8002378 <LL_RCC_HSE_IsEnabledDiv2>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d102      	bne.n	8003308 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003302:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_RCC_GetSysClockFreq+0x138>)
 8003304:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003306:	e005      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <HAL_RCC_GetSysClockFreq+0x13c>)
 800330a:	60fb      	str	r3, [r7, #12]
        break;
 800330c:	e002      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	60fb      	str	r3, [r7, #12]
        break;
 8003312:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003314:	f7ff fa35 	bl	8002782 <LL_RCC_PLL_GetN>
 8003318:	4602      	mov	r2, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	fb03 f402 	mul.w	r4, r3, r2
 8003320:	f7ff fa46 	bl	80027b0 <LL_RCC_PLL_GetDivider>
 8003324:	4603      	mov	r3, r0
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	3301      	adds	r3, #1
 800332a:	fbb4 f4f3 	udiv	r4, r4, r3
 800332e:	f7ff fa34 	bl	800279a <LL_RCC_PLL_GetR>
 8003332:	4603      	mov	r3, r0
 8003334:	0f5b      	lsrs	r3, r3, #29
 8003336:	3301      	adds	r3, #1
 8003338:	fbb4 f3f3 	udiv	r3, r4, r3
 800333c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800333e:	697b      	ldr	r3, [r7, #20]
}
 8003340:	4618      	mov	r0, r3
 8003342:	371c      	adds	r7, #28
 8003344:	46bd      	mov	sp, r7
 8003346:	bd90      	pop	{r4, r7, pc}
 8003348:	0800bc4c 	.word	0x0800bc4c
 800334c:	00f42400 	.word	0x00f42400
 8003350:	01e84800 	.word	0x01e84800

08003354 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003354:	b598      	push	{r3, r4, r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003358:	f7ff ff5c 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 800335c:	4604      	mov	r4, r0
 800335e:	f7ff f9b5 	bl	80026cc <LL_RCC_GetAHBPrescaler>
 8003362:	4603      	mov	r3, r0
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	4a03      	ldr	r2, [pc, #12]	; (8003378 <HAL_RCC_GetHCLKFreq+0x24>)
 800336c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003370:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd98      	pop	{r3, r4, r7, pc}
 8003378:	0800bbec 	.word	0x0800bbec

0800337c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800337c:	b598      	push	{r3, r4, r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003380:	f7ff ffe8 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 8003384:	4604      	mov	r4, r0
 8003386:	f7ff f9b9 	bl	80026fc <LL_RCC_GetAPB1Prescaler>
 800338a:	4603      	mov	r3, r0
 800338c:	0a1b      	lsrs	r3, r3, #8
 800338e:	4a03      	ldr	r2, [pc, #12]	; (800339c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003394:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003398:	4618      	mov	r0, r3
 800339a:	bd98      	pop	{r3, r4, r7, pc}
 800339c:	0800bc2c 	.word	0x0800bc2c

080033a0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a0:	b598      	push	{r3, r4, r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80033a4:	f7ff ffd6 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 80033a8:	4604      	mov	r4, r0
 80033aa:	f7ff f9b2 	bl	8002712 <LL_RCC_GetAPB2Prescaler>
 80033ae:	4603      	mov	r3, r0
 80033b0:	0adb      	lsrs	r3, r3, #11
 80033b2:	4a03      	ldr	r2, [pc, #12]	; (80033c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd98      	pop	{r3, r4, r7, pc}
 80033c0:	0800bc2c 	.word	0x0800bc2c

080033c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	4a10      	ldr	r2, [pc, #64]	; (8003418 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80033d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033da:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80033dc:	f7ff f981 	bl	80026e2 <LL_RCC_GetAHB3Prescaler>
 80033e0:	4603      	mov	r3, r0
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	4a0c      	ldr	r2, [pc, #48]	; (800341c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80033ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	4a09      	ldr	r2, [pc, #36]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	0c9c      	lsrs	r4, r3, #18
 8003400:	f7fe ff80 	bl	8002304 <HAL_PWREx_GetVoltageRange>
 8003404:	4603      	mov	r3, r0
 8003406:	4619      	mov	r1, r3
 8003408:	4620      	mov	r0, r4
 800340a:	f000 f80b 	bl	8003424 <RCC_SetFlashLatency>
 800340e:	4603      	mov	r3, r0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	bd90      	pop	{r4, r7, pc}
 8003418:	0800bc4c 	.word	0x0800bc4c
 800341c:	0800bbec 	.word	0x0800bbec
 8003420:	431bde83 	.word	0x431bde83

08003424 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08e      	sub	sp, #56	; 0x38
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800342e:	4a3a      	ldr	r2, [pc, #232]	; (8003518 <RCC_SetFlashLatency+0xf4>)
 8003430:	f107 0320 	add.w	r3, r7, #32
 8003434:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003438:	6018      	str	r0, [r3, #0]
 800343a:	3304      	adds	r3, #4
 800343c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800343e:	4a37      	ldr	r2, [pc, #220]	; (800351c <RCC_SetFlashLatency+0xf8>)
 8003440:	f107 0318 	add.w	r3, r7, #24
 8003444:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003448:	6018      	str	r0, [r3, #0]
 800344a:	3304      	adds	r3, #4
 800344c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800344e:	4a34      	ldr	r2, [pc, #208]	; (8003520 <RCC_SetFlashLatency+0xfc>)
 8003450:	f107 030c 	add.w	r3, r7, #12
 8003454:	ca07      	ldmia	r2, {r0, r1, r2}
 8003456:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800345a:	2300      	movs	r3, #0
 800345c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003464:	d11b      	bne.n	800349e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003466:	2300      	movs	r3, #0
 8003468:	633b      	str	r3, [r7, #48]	; 0x30
 800346a:	e014      	b.n	8003496 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	3338      	adds	r3, #56	; 0x38
 8003472:	443b      	add	r3, r7
 8003474:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003478:	461a      	mov	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4293      	cmp	r3, r2
 800347e:	d807      	bhi.n	8003490 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	3338      	adds	r3, #56	; 0x38
 8003486:	443b      	add	r3, r7
 8003488:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800348e:	e021      	b.n	80034d4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003492:	3301      	adds	r3, #1
 8003494:	633b      	str	r3, [r7, #48]	; 0x30
 8003496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003498:	2b02      	cmp	r3, #2
 800349a:	d9e7      	bls.n	800346c <RCC_SetFlashLatency+0x48>
 800349c:	e01a      	b.n	80034d4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800349e:	2300      	movs	r3, #0
 80034a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a2:	e014      	b.n	80034ce <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80034a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	3338      	adds	r3, #56	; 0x38
 80034aa:	443b      	add	r3, r7
 80034ac:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80034b0:	461a      	mov	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d807      	bhi.n	80034c8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80034b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	3338      	adds	r3, #56	; 0x38
 80034be:	443b      	add	r3, r7
 80034c0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80034c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034c6:	e005      	b.n	80034d4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80034c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ca:	3301      	adds	r3, #1
 80034cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d9e7      	bls.n	80034a4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034d4:	4b13      	ldr	r3, [pc, #76]	; (8003524 <RCC_SetFlashLatency+0x100>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f023 0207 	bic.w	r2, r3, #7
 80034dc:	4911      	ldr	r1, [pc, #68]	; (8003524 <RCC_SetFlashLatency+0x100>)
 80034de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e0:	4313      	orrs	r3, r2
 80034e2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034e4:	f7fe fa56 	bl	8001994 <HAL_GetTick>
 80034e8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80034ea:	e008      	b.n	80034fe <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80034ec:	f7fe fa52 	bl	8001994 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e007      	b.n	800350e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <RCC_SetFlashLatency+0x100>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003508:	429a      	cmp	r2, r3
 800350a:	d1ef      	bne.n	80034ec <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3738      	adds	r7, #56	; 0x38
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	0800bbac 	.word	0x0800bbac
 800351c:	0800bbb4 	.word	0x0800bbb4
 8003520:	0800bbbc 	.word	0x0800bbbc
 8003524:	58004000 	.word	0x58004000

08003528 <LL_RCC_LSE_IsReady>:
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800352c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b02      	cmp	r3, #2
 800353a:	d101      	bne.n	8003540 <LL_RCC_LSE_IsReady+0x18>
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <LL_RCC_LSE_IsReady+0x1a>
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr

0800354a <LL_RCC_SetUSARTClockSource>:
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003556:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	0c1b      	lsrs	r3, r3, #16
 800355e:	43db      	mvns	r3, r3
 8003560:	401a      	ands	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	b29b      	uxth	r3, r3
 8003566:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr

0800357a <LL_RCC_SetI2SClockSource>:
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800358e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr

080035a4 <LL_RCC_SetLPUARTClockSource>:
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80035ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr

080035ce <LL_RCC_SetI2CClockSource>:
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80035d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80035e6:	43db      	mvns	r3, r3
 80035e8:	401a      	ands	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80035f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr

08003606 <LL_RCC_SetLPTIMClockSource>:
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800360e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003612:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	041b      	lsls	r3, r3, #16
 800361c:	43db      	mvns	r3, r3
 800361e:	401a      	ands	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	041b      	lsls	r3, r3, #16
 8003624:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr

08003638 <LL_RCC_SetRNGClockSource>:
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003648:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800364c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <LL_RCC_SetADCClockSource>:
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800366a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003676:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr

0800368c <LL_RCC_SetRTCClockSource>:
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr

080036b6 <LL_RCC_GetRTCClockSource>:
{
 80036b6:	b480      	push	{r7}
 80036b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80036ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <LL_RCC_ForceBackupDomainReset>:
{
 80036ce:	b480      	push	{r7}
 80036d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80036d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80036e6:	bf00      	nop
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr

080036ee <LL_RCC_ReleaseBackupDomainReset>:
{
 80036ee:	b480      	push	{r7}
 80036f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80036f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003706:	bf00      	nop
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr
	...

08003710 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800371c:	2300      	movs	r3, #0
 800371e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003720:	2300      	movs	r3, #0
 8003722:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d058      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003730:	f7fe fdda 	bl	80022e8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003734:	f7fe f92e 	bl	8001994 <HAL_GetTick>
 8003738:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800373a:	e009      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373c:	f7fe f92a 	bl	8001994 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d902      	bls.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	74fb      	strb	r3, [r7, #19]
        break;
 800374e:	e006      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003750:	4b7b      	ldr	r3, [pc, #492]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800375c:	d1ee      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d13c      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003764:	f7ff ffa7 	bl	80036b6 <LL_RCC_GetRTCClockSource>
 8003768:	4602      	mov	r2, r0
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376e:	429a      	cmp	r2, r3
 8003770:	d00f      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800377e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003780:	f7ff ffa5 	bl	80036ce <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003784:	f7ff ffb3 	bl	80036ee <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d014      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7fe f8fa 	bl	8001994 <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80037a2:	e00b      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a4:	f7fe f8f6 	bl	8001994 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d902      	bls.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	74fb      	strb	r3, [r7, #19]
            break;
 80037ba:	e004      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80037bc:	f7ff feb4 	bl	8003528 <LL_RCC_LSE_IsReady>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d1ee      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d105      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff ff5b 	bl	800368c <LL_RCC_SetRTCClockSource>
 80037d6:	e004      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037d8:	7cfb      	ldrb	r3, [r7, #19]
 80037da:	74bb      	strb	r3, [r7, #18]
 80037dc:	e001      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037de:	7cfb      	ldrb	r3, [r7, #19]
 80037e0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d004      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff fea9 	bl	800354a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d004      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff fe9e 	bl	800354a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b00      	cmp	r3, #0
 8003818:	d004      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff fec0 	bl	80035a4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800382c:	2b00      	cmp	r3, #0
 800382e:	d004      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff fee6 	bl	8003606 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003842:	2b00      	cmp	r3, #0
 8003844:	d004      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fedb 	bl	8003606 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003858:	2b00      	cmp	r3, #0
 800385a:	d004      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff fed0 	bl	8003606 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	d004      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff fea9 	bl	80035ce <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003884:	2b00      	cmp	r3, #0
 8003886:	d004      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fe9e 	bl	80035ce <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389a:	2b00      	cmp	r3, #0
 800389c:	d004      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff fe93 	bl	80035ce <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d011      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff fe5e 	bl	800357a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c6:	d107      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80038c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d010      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fea5 	bl	8003638 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d107      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80038f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003900:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003904:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d011      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff fea3 	bl	8003662 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003924:	d107      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003934:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003936:	7cbb      	ldrb	r3, [r7, #18]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	58000400 	.word	0x58000400

08003944 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003954:	4904      	ldr	r1, [pc, #16]	; (8003968 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4313      	orrs	r3, r2
 800395a:	608b      	str	r3, [r1, #8]
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	58000400 	.word	0x58000400

0800396c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003976:	4a04      	ldr	r2, [pc, #16]	; (8003988 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800397c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003980:	bf00      	nop
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	58000400 	.word	0x58000400

0800398c <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003996:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003998:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800399c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80039a0:	bf00      	nop
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr
 80039a8:	58000400 	.word	0x58000400

080039ac <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80039b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039b6:	619a      	str	r2, [r3, #24]
}
 80039b8:	bf00      	nop
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr
 80039c0:	58000400 	.word	0x58000400

080039c4 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80039c8:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d101      	bne.n	80039d8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	58000400 	.word	0x58000400

080039e8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d101      	bne.n	80039fc <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	58000400 	.word	0x58000400

08003a0c <LL_RCC_RF_DisableReset>:
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr

08003a2c <LL_RCC_IsRFUnderReset>:
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a40:	d101      	bne.n	8003a46 <LL_RCC_IsRFUnderReset+0x1a>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <LL_RCC_IsRFUnderReset+0x1c>
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr

08003a50 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003a58:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <LL_EXTI_EnableIT_32_63+0x24>)
 8003a5a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003a5e:	4905      	ldr	r1, [pc, #20]	; (8003a74 <LL_EXTI_EnableIT_32_63+0x24>)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	58000800 	.word	0x58000800

08003a78 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d103      	bne.n	8003a8e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
    return status;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	e052      	b.n	8003b34 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	799b      	ldrb	r3, [r3, #6]
 8003a96:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003a98:	7bbb      	ldrb	r3, [r7, #14]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_SUBGHZ_Init+0x2c>
 8003a9e:	7bbb      	ldrb	r3, [r7, #14]
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d109      	bne.n	8003ab8 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fd feda 	bl	8001864 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003ab0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003ab4:	f7ff ffcc 	bl	8003a50 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003ab8:	7bbb      	ldrb	r3, [r7, #14]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d126      	bne.n	8003b0c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8003ac4:	f7ff ffa2 	bl	8003a0c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003ac8:	4b1c      	ldr	r3, [pc, #112]	; (8003b3c <HAL_SUBGHZ_Init+0xc4>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	0cdb      	lsrs	r3, r3, #19
 8003ad6:	2264      	movs	r2, #100	; 0x64
 8003ad8:	fb02 f303 	mul.w	r3, r2, r3
 8003adc:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d105      	bne.n	8003af0 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	609a      	str	r2, [r3, #8]
        break;
 8003aee:	e007      	b.n	8003b00 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003af6:	f7ff ff99 	bl	8003a2c <LL_RCC_IsRFUnderReset>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1ee      	bne.n	8003ade <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003b00:	f7ff ff34 	bl	800396c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003b04:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003b08:	f7ff ff1c 	bl	8003944 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003b0c:	f7ff ff4e 	bl	80039ac <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10a      	bne.n	8003b2c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 faac 	bl	8004078 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	719a      	strb	r2, [r3, #6]

  return status;
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20000004 	.word	0x20000004

08003b40 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	817b      	strh	r3, [r7, #10]
 8003b50:	4613      	mov	r3, r2
 8003b52:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	799b      	ldrb	r3, [r3, #6]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d14a      	bne.n	8003bf4 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	795b      	ldrb	r3, [r3, #5]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e045      	b.n	8003bf6 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2202      	movs	r2, #2
 8003b74:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fb4c 	bl	8004214 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003b7c:	f7ff ff06 	bl	800398c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003b80:	210d      	movs	r1, #13
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 fa98 	bl	80040b8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003b88:	897b      	ldrh	r3, [r7, #10]
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	4619      	mov	r1, r3
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 fa90 	bl	80040b8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003b98:	897b      	ldrh	r3, [r7, #10]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 fa8a 	bl	80040b8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	82bb      	strh	r3, [r7, #20]
 8003ba8:	e00a      	b.n	8003bc0 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003baa:	8abb      	ldrh	r3, [r7, #20]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	4413      	add	r3, r2
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 fa7f 	bl	80040b8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003bba:	8abb      	ldrh	r3, [r7, #20]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	82bb      	strh	r3, [r7, #20]
 8003bc0:	8aba      	ldrh	r2, [r7, #20]
 8003bc2:	893b      	ldrh	r3, [r7, #8]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d3f0      	bcc.n	8003baa <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003bc8:	f7ff fed0 	bl	800396c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 fb45 	bl	800425c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	75fb      	strb	r3, [r7, #23]
 8003bde:	e001      	b.n	8003be4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	715a      	strb	r2, [r3, #5]

    return status;
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
 8003bf2:	e000      	b.n	8003bf6 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003bf4:	2302      	movs	r3, #2
  }
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b088      	sub	sp, #32
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	817b      	strh	r3, [r7, #10]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	799b      	ldrb	r3, [r3, #6]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d14a      	bne.n	8003cb6 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	795b      	ldrb	r3, [r3, #5]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e045      	b.n	8003cb8 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 faee 	bl	8004214 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003c38:	f7ff fea8 	bl	800398c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003c3c:	211d      	movs	r1, #29
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 fa3a 	bl	80040b8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003c44:	897b      	ldrh	r3, [r7, #10]
 8003c46:	0a1b      	lsrs	r3, r3, #8
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 fa32 	bl	80040b8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003c54:	897b      	ldrh	r3, [r7, #10]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	4619      	mov	r1, r3
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 fa2c 	bl	80040b8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003c60:	2100      	movs	r1, #0
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fa28 	bl	80040b8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003c68:	2300      	movs	r3, #0
 8003c6a:	82fb      	strh	r3, [r7, #22]
 8003c6c:	e009      	b.n	8003c82 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003c6e:	69b9      	ldr	r1, [r7, #24]
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 fa77 	bl	8004164 <SUBGHZSPI_Receive>
      pData++;
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003c7c:	8afb      	ldrh	r3, [r7, #22]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	82fb      	strh	r3, [r7, #22]
 8003c82:	8afa      	ldrh	r2, [r7, #22]
 8003c84:	893b      	ldrh	r3, [r7, #8]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d3f1      	bcc.n	8003c6e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003c8a:	f7ff fe6f 	bl	800396c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 fae4 	bl	800425c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e001      	b.n	8003ca6 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	715a      	strb	r2, [r3, #5]

    return status;
 8003cb2:	7ffb      	ldrb	r3, [r7, #31]
 8003cb4:	e000      	b.n	8003cb8 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003cb6:	2302      	movs	r3, #2
  }
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3720      	adds	r7, #32
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	607a      	str	r2, [r7, #4]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	460b      	mov	r3, r1
 8003cce:	72fb      	strb	r3, [r7, #11]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	799b      	ldrb	r3, [r3, #6]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d14a      	bne.n	8003d74 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	795b      	ldrb	r3, [r3, #5]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e045      	b.n	8003d76 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2201      	movs	r2, #1
 8003cee:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 fa8f 	bl	8004214 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003cf6:	7afb      	ldrb	r3, [r7, #11]
 8003cf8:	2b84      	cmp	r3, #132	; 0x84
 8003cfa:	d002      	beq.n	8003d02 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003cfc:	7afb      	ldrb	r3, [r7, #11]
 8003cfe:	2b94      	cmp	r3, #148	; 0x94
 8003d00:	d103      	bne.n	8003d0a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2201      	movs	r2, #1
 8003d06:	711a      	strb	r2, [r3, #4]
 8003d08:	e002      	b.n	8003d10 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003d10:	f7ff fe3c 	bl	800398c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003d14:	7afb      	ldrb	r3, [r7, #11]
 8003d16:	4619      	mov	r1, r3
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f9cd 	bl	80040b8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003d1e:	2300      	movs	r3, #0
 8003d20:	82bb      	strh	r3, [r7, #20]
 8003d22:	e00a      	b.n	8003d3a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003d24:	8abb      	ldrh	r3, [r7, #20]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	4413      	add	r3, r2
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f9c2 	bl	80040b8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003d34:	8abb      	ldrh	r3, [r7, #20]
 8003d36:	3301      	adds	r3, #1
 8003d38:	82bb      	strh	r3, [r7, #20]
 8003d3a:	8aba      	ldrh	r2, [r7, #20]
 8003d3c:	893b      	ldrh	r3, [r7, #8]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d3f0      	bcc.n	8003d24 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003d42:	f7ff fe13 	bl	800396c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003d46:	7afb      	ldrb	r3, [r7, #11]
 8003d48:	2b84      	cmp	r3, #132	; 0x84
 8003d4a:	d002      	beq.n	8003d52 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 fa85 	bl	800425c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	75fb      	strb	r3, [r7, #23]
 8003d5e:	e001      	b.n	8003d64 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	715a      	strb	r2, [r3, #5]

    return status;
 8003d70:	7dfb      	ldrb	r3, [r7, #23]
 8003d72:	e000      	b.n	8003d76 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003d74:	2302      	movs	r3, #2
  }
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b088      	sub	sp, #32
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	72fb      	strb	r3, [r7, #11]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	799b      	ldrb	r3, [r3, #6]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d13d      	bne.n	8003e1c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	795b      	ldrb	r3, [r3, #5]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e038      	b.n	8003e1e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2201      	movs	r2, #1
 8003db0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 fa2e 	bl	8004214 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003db8:	f7ff fde8 	bl	800398c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003dbc:	7afb      	ldrb	r3, [r7, #11]
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f979 	bl	80040b8 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f975 	bl	80040b8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003dce:	2300      	movs	r3, #0
 8003dd0:	82fb      	strh	r3, [r7, #22]
 8003dd2:	e009      	b.n	8003de8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003dd4:	69b9      	ldr	r1, [r7, #24]
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f9c4 	bl	8004164 <SUBGHZSPI_Receive>
      pData++;
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	3301      	adds	r3, #1
 8003de0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003de2:	8afb      	ldrh	r3, [r7, #22]
 8003de4:	3301      	adds	r3, #1
 8003de6:	82fb      	strh	r3, [r7, #22]
 8003de8:	8afa      	ldrh	r2, [r7, #22]
 8003dea:	893b      	ldrh	r3, [r7, #8]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d3f1      	bcc.n	8003dd4 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003df0:	f7ff fdbc 	bl	800396c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fa31 	bl	800425c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	77fb      	strb	r3, [r7, #31]
 8003e06:	e001      	b.n	8003e0c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	715a      	strb	r2, [r3, #5]

    return status;
 8003e18:	7ffb      	ldrb	r3, [r7, #31]
 8003e1a:	e000      	b.n	8003e1e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e1c:	2302      	movs	r3, #2
  }
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b086      	sub	sp, #24
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	461a      	mov	r2, r3
 8003e32:	460b      	mov	r3, r1
 8003e34:	72fb      	strb	r3, [r7, #11]
 8003e36:	4613      	mov	r3, r2
 8003e38:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	799b      	ldrb	r3, [r3, #6]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d13e      	bne.n	8003ec2 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	795b      	ldrb	r3, [r3, #5]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e039      	b.n	8003ec4 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2201      	movs	r2, #1
 8003e54:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f9dc 	bl	8004214 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003e5c:	f7ff fd96 	bl	800398c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003e60:	210e      	movs	r1, #14
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f928 	bl	80040b8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003e68:	7afb      	ldrb	r3, [r7, #11]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f923 	bl	80040b8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003e72:	2300      	movs	r3, #0
 8003e74:	82bb      	strh	r3, [r7, #20]
 8003e76:	e00a      	b.n	8003e8e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003e78:	8abb      	ldrh	r3, [r7, #20]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	4619      	mov	r1, r3
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f918 	bl	80040b8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003e88:	8abb      	ldrh	r3, [r7, #20]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	82bb      	strh	r3, [r7, #20]
 8003e8e:	8aba      	ldrh	r2, [r7, #20]
 8003e90:	893b      	ldrh	r3, [r7, #8]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d3f0      	bcc.n	8003e78 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003e96:	f7ff fd69 	bl	800396c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f9de 	bl	800425c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	75fb      	strb	r3, [r7, #23]
 8003eac:	e001      	b.n	8003eb2 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	715a      	strb	r2, [r3, #5]

    return status;
 8003ebe:	7dfb      	ldrb	r3, [r7, #23]
 8003ec0:	e000      	b.n	8003ec4 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003ec2:	2302      	movs	r3, #2
  }
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b088      	sub	sp, #32
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	607a      	str	r2, [r7, #4]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	460b      	mov	r3, r1
 8003eda:	72fb      	strb	r3, [r7, #11]
 8003edc:	4613      	mov	r3, r2
 8003ede:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	799b      	ldrb	r3, [r3, #6]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d141      	bne.n	8003f72 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	795b      	ldrb	r3, [r3, #5]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e03c      	b.n	8003f74 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f987 	bl	8004214 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003f06:	f7ff fd41 	bl	800398c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003f0a:	211e      	movs	r1, #30
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f8d3 	bl	80040b8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003f12:	7afb      	ldrb	r3, [r7, #11]
 8003f14:	4619      	mov	r1, r3
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f8ce 	bl	80040b8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f8ca 	bl	80040b8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003f24:	2300      	movs	r3, #0
 8003f26:	82fb      	strh	r3, [r7, #22]
 8003f28:	e009      	b.n	8003f3e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003f2a:	69b9      	ldr	r1, [r7, #24]
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 f919 	bl	8004164 <SUBGHZSPI_Receive>
      pData++;
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	3301      	adds	r3, #1
 8003f36:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003f38:	8afb      	ldrh	r3, [r7, #22]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	82fb      	strh	r3, [r7, #22]
 8003f3e:	8afa      	ldrh	r2, [r7, #22]
 8003f40:	893b      	ldrh	r3, [r7, #8]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d3f1      	bcc.n	8003f2a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003f46:	f7ff fd11 	bl	800396c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f986 	bl	800425c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	77fb      	strb	r3, [r7, #31]
 8003f5c:	e001      	b.n	8003f62 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	715a      	strb	r2, [r3, #5]

    return status;
 8003f6e:	7ffb      	ldrb	r3, [r7, #31]
 8003f70:	e000      	b.n	8003f74 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003f72:	2302      	movs	r3, #2
  }
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3720      	adds	r7, #32
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8003f84:	2300      	movs	r3, #0
 8003f86:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8003f88:	f107 020c 	add.w	r2, r7, #12
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	2112      	movs	r1, #18
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff fef4 	bl	8003d7e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8003f96:	7b3b      	ldrb	r3, [r7, #12]
 8003f98:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8003f9a:	89fb      	ldrh	r3, [r7, #14]
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	b21a      	sxth	r2, r3
 8003fa0:	7b7b      	ldrb	r3, [r7, #13]
 8003fa2:	b21b      	sxth	r3, r3
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	b21b      	sxth	r3, r3
 8003fa8:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8003faa:	f107 020c 	add.w	r2, r7, #12
 8003fae:	2302      	movs	r3, #2
 8003fb0:	2102      	movs	r1, #2
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff fe84 	bl	8003cc0 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8003fb8:	89fb      	ldrh	r3, [r7, #14]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f005 fec0 	bl	8009d48 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8003fc8:	89fb      	ldrh	r3, [r7, #14]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f005 fec6 	bl	8009d64 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003fd8:	89fb      	ldrh	r3, [r7, #14]
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f005 ff16 	bl	8009e14 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003fe8:	89fb      	ldrh	r3, [r7, #14]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f005 ff1c 	bl	8009e30 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003ff8:	89fb      	ldrh	r3, [r7, #14]
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f005 ff22 	bl	8009e4c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004008:	89fb      	ldrh	r3, [r7, #14]
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f005 fef0 	bl	8009df8 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004018:	89fb      	ldrh	r3, [r7, #14]
 800401a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f005 feac 	bl	8009d80 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004028:	89fb      	ldrh	r3, [r7, #14]
 800402a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00d      	beq.n	800404e <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004032:	89fb      	ldrh	r3, [r7, #14]
 8004034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d004      	beq.n	8004046 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800403c:	2101      	movs	r1, #1
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f005 feac 	bl	8009d9c <HAL_SUBGHZ_CADStatusCallback>
 8004044:	e003      	b.n	800404e <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004046:	2100      	movs	r1, #0
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f005 fea7 	bl	8009d9c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800404e:	89fb      	ldrh	r3, [r7, #14]
 8004050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f005 febd 	bl	8009dd8 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800405e:	89fb      	ldrh	r3, [r7, #14]
 8004060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f005 fefd 	bl	8009e68 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004080:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <SUBGHZSPI_Init+0x3c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a0b      	ldr	r2, [pc, #44]	; (80040b4 <SUBGHZSPI_Init+0x3c>)
 8004086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800408a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800408c:	4a09      	ldr	r2, [pc, #36]	; (80040b4 <SUBGHZSPI_Init+0x3c>)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004094:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004096:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <SUBGHZSPI_Init+0x3c>)
 8004098:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800409c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800409e:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <SUBGHZSPI_Init+0x3c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a04      	ldr	r2, [pc, #16]	; (80040b4 <SUBGHZSPI_Init+0x3c>)
 80040a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040a8:	6013      	str	r3, [r2, #0]
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr
 80040b4:	58010000 	.word	0x58010000

080040b8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80040c8:	4b23      	ldr	r3, [pc, #140]	; (8004158 <SUBGHZSPI_Transmit+0xa0>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	4613      	mov	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	0cdb      	lsrs	r3, r3, #19
 80040d6:	2264      	movs	r2, #100	; 0x64
 80040d8:	fb02 f303 	mul.w	r3, r2, r3
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d105      	bne.n	80040f0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	609a      	str	r2, [r3, #8]
      break;
 80040ee:	e008      	b.n	8004102 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80040f6:	4b19      	ldr	r3, [pc, #100]	; (800415c <SUBGHZSPI_Transmit+0xa4>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d1ed      	bne.n	80040de <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004102:	4b17      	ldr	r3, [pc, #92]	; (8004160 <SUBGHZSPI_Transmit+0xa8>)
 8004104:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	78fa      	ldrb	r2, [r7, #3]
 800410a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800410c:	4b12      	ldr	r3, [pc, #72]	; (8004158 <SUBGHZSPI_Transmit+0xa0>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	4613      	mov	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	0cdb      	lsrs	r3, r3, #19
 800411a:	2264      	movs	r2, #100	; 0x64
 800411c:	fb02 f303 	mul.w	r3, r2, r3
 8004120:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d105      	bne.n	8004134 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	609a      	str	r2, [r3, #8]
      break;
 8004132:	e008      	b.n	8004146 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3b01      	subs	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800413a:	4b08      	ldr	r3, [pc, #32]	; (800415c <SUBGHZSPI_Transmit+0xa4>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b01      	cmp	r3, #1
 8004144:	d1ed      	bne.n	8004122 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004146:	4b05      	ldr	r3, [pc, #20]	; (800415c <SUBGHZSPI_Transmit+0xa4>)
 8004148:	68db      	ldr	r3, [r3, #12]

  return status;
 800414a:	7dfb      	ldrb	r3, [r7, #23]
}
 800414c:	4618      	mov	r0, r3
 800414e:	371c      	adds	r7, #28
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20000004 	.word	0x20000004
 800415c:	58010000 	.word	0x58010000
 8004160:	5801000c 	.word	0x5801000c

08004164 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004172:	4b25      	ldr	r3, [pc, #148]	; (8004208 <SUBGHZSPI_Receive+0xa4>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4613      	mov	r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	0cdb      	lsrs	r3, r3, #19
 8004180:	2264      	movs	r2, #100	; 0x64
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d105      	bne.n	800419a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	609a      	str	r2, [r3, #8]
      break;
 8004198:	e008      	b.n	80041ac <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3b01      	subs	r3, #1
 800419e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80041a0:	4b1a      	ldr	r3, [pc, #104]	; (800420c <SUBGHZSPI_Receive+0xa8>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d1ed      	bne.n	8004188 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80041ac:	4b18      	ldr	r3, [pc, #96]	; (8004210 <SUBGHZSPI_Receive+0xac>)
 80041ae:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	22ff      	movs	r2, #255	; 0xff
 80041b4:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80041b6:	4b14      	ldr	r3, [pc, #80]	; (8004208 <SUBGHZSPI_Receive+0xa4>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4613      	mov	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	1a9b      	subs	r3, r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	0cdb      	lsrs	r3, r3, #19
 80041c4:	2264      	movs	r2, #100	; 0x64
 80041c6:	fb02 f303 	mul.w	r3, r2, r3
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d105      	bne.n	80041de <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	609a      	str	r2, [r3, #8]
      break;
 80041dc:	e008      	b.n	80041f0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80041e4:	4b09      	ldr	r3, [pc, #36]	; (800420c <SUBGHZSPI_Receive+0xa8>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d1ed      	bne.n	80041cc <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <SUBGHZSPI_Receive+0xa8>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	701a      	strb	r2, [r3, #0]

  return status;
 80041fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	20000004 	.word	0x20000004
 800420c:	58010000 	.word	0x58010000
 8004210:	5801000c 	.word	0x5801000c

08004214 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	791b      	ldrb	r3, [r3, #4]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d111      	bne.n	8004248 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004224:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <SUBGHZ_CheckDeviceReady+0x44>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	4413      	add	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	0c1b      	lsrs	r3, r3, #16
 8004232:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004234:	f7ff fbaa 	bl	800398c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3b01      	subs	r3, #1
 800423c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f9      	bne.n	8004238 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004244:	f7ff fb92 	bl	800396c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f807 	bl	800425c <SUBGHZ_WaitOnBusy>
 800424e:	4603      	mov	r3, r0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20000004 	.word	0x20000004

0800425c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <SUBGHZ_WaitOnBusy+0x58>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4613      	mov	r3, r2
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	4413      	add	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	0d1b      	lsrs	r3, r3, #20
 8004276:	2264      	movs	r2, #100	; 0x64
 8004278:	fb02 f303 	mul.w	r3, r2, r3
 800427c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800427e:	f7ff fbb3 	bl	80039e8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004282:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d105      	bne.n	8004296 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2202      	movs	r2, #2
 8004292:	609a      	str	r2, [r3, #8]
      break;
 8004294:	e009      	b.n	80042aa <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3b01      	subs	r3, #1
 800429a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800429c:	f7ff fb92 	bl	80039c4 <LL_PWR_IsActiveFlag_RFBUSYS>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d0e9      	beq.n	800427e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000004 	.word	0x20000004

080042b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e049      	b.n	800435e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fd fad4 	bl	800188c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	4619      	mov	r1, r3
 80042f6:	4610      	mov	r0, r2
 80042f8:	f000 faf8 	bl	80048ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	d001      	beq.n	8004380 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e02e      	b.n	80043de <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a16      	ldr	r2, [pc, #88]	; (80043e8 <HAL_TIM_Base_Start+0x80>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_TIM_Base_Start+0x34>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439a:	d115      	bne.n	80043c8 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	4b12      	ldr	r3, [pc, #72]	; (80043ec <HAL_TIM_Base_Start+0x84>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b06      	cmp	r3, #6
 80043ac:	d015      	beq.n	80043da <HAL_TIM_Base_Start+0x72>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b4:	d011      	beq.n	80043da <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0201 	orr.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c6:	e008      	b.n	80043da <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	e000      	b.n	80043dc <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr
 80043e8:	40012c00 	.word	0x40012c00
 80043ec:	00010007 	.word	0x00010007

080043f0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6a1a      	ldr	r2, [r3, #32]
 80043fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8004402:	4013      	ands	r3, r2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10f      	bne.n	8004428 <HAL_TIM_Base_Stop+0x38>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6a1a      	ldr	r2, [r3, #32]
 800440e:	f240 4344 	movw	r3, #1092	; 0x444
 8004412:	4013      	ands	r3, r2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d107      	bne.n	8004428 <HAL_TIM_Base_Stop+0x38>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0201 	bic.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr

0800443c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b01      	cmp	r3, #1
 800444e:	d001      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e036      	b.n	80044c2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0201 	orr.w	r2, r2, #1
 800446a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a16      	ldr	r2, [pc, #88]	; (80044cc <HAL_TIM_Base_Start_IT+0x90>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d004      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0x44>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447e:	d115      	bne.n	80044ac <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <HAL_TIM_Base_Start_IT+0x94>)
 8004488:	4013      	ands	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b06      	cmp	r3, #6
 8004490:	d015      	beq.n	80044be <HAL_TIM_Base_Start_IT+0x82>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004498:	d011      	beq.n	80044be <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0201 	orr.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044aa:	e008      	b.n	80044be <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e000      	b.n	80044c0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr
 80044cc:	40012c00 	.word	0x40012c00
 80044d0:	00010007 	.word	0x00010007

080044d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d122      	bne.n	8004530 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d11b      	bne.n	8004530 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0202 	mvn.w	r2, #2
 8004500:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f9cd 	bl	80048b6 <HAL_TIM_IC_CaptureCallback>
 800451c:	e005      	b.n	800452a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f9c0 	bl	80048a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f9cf 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b04      	cmp	r3, #4
 800453c:	d122      	bne.n	8004584 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b04      	cmp	r3, #4
 800454a:	d11b      	bne.n	8004584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0204 	mvn.w	r2, #4
 8004554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f9a3 	bl	80048b6 <HAL_TIM_IC_CaptureCallback>
 8004570:	e005      	b.n	800457e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f996 	bl	80048a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f9a5 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b08      	cmp	r3, #8
 8004590:	d122      	bne.n	80045d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b08      	cmp	r3, #8
 800459e:	d11b      	bne.n	80045d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0208 	mvn.w	r2, #8
 80045a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2204      	movs	r2, #4
 80045ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f979 	bl	80048b6 <HAL_TIM_IC_CaptureCallback>
 80045c4:	e005      	b.n	80045d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f96c 	bl	80048a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f97b 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f003 0310 	and.w	r3, r3, #16
 80045e2:	2b10      	cmp	r3, #16
 80045e4:	d122      	bne.n	800462c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0310 	and.w	r3, r3, #16
 80045f0:	2b10      	cmp	r3, #16
 80045f2:	d11b      	bne.n	800462c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0210 	mvn.w	r2, #16
 80045fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2208      	movs	r2, #8
 8004602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f94f 	bl	80048b6 <HAL_TIM_IC_CaptureCallback>
 8004618:	e005      	b.n	8004626 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f942 	bl	80048a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f951 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b01      	cmp	r3, #1
 8004638:	d10e      	bne.n	8004658 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b01      	cmp	r3, #1
 8004646:	d107      	bne.n	8004658 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0201 	mvn.w	r2, #1
 8004650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fc f826 	bl	80006a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004662:	2b80      	cmp	r3, #128	; 0x80
 8004664:	d10e      	bne.n	8004684 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004670:	2b80      	cmp	r3, #128	; 0x80
 8004672:	d107      	bne.n	8004684 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800467c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fa95 	bl	8004bae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004692:	d10e      	bne.n	80046b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469e:	2b80      	cmp	r3, #128	; 0x80
 80046a0:	d107      	bne.n	80046b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 fa87 	bl	8004bc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046bc:	2b40      	cmp	r3, #64	; 0x40
 80046be:	d10e      	bne.n	80046de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ca:	2b40      	cmp	r3, #64	; 0x40
 80046cc:	d107      	bne.n	80046de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f8fe 	bl	80048da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d10e      	bne.n	800470a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	d107      	bne.n	800470a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f06f 0220 	mvn.w	r2, #32
 8004702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fa49 	bl	8004b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800470a:	bf00      	nop
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_TIM_ConfigClockSource+0x1c>
 800472a:	2302      	movs	r3, #2
 800472c:	e0b6      	b.n	800489c <HAL_TIM_ConfigClockSource+0x18a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2202      	movs	r2, #2
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800474c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004750:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004758:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800476a:	d03e      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0xd8>
 800476c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004770:	f200 8087 	bhi.w	8004882 <HAL_TIM_ConfigClockSource+0x170>
 8004774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004778:	f000 8086 	beq.w	8004888 <HAL_TIM_ConfigClockSource+0x176>
 800477c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004780:	d87f      	bhi.n	8004882 <HAL_TIM_ConfigClockSource+0x170>
 8004782:	2b70      	cmp	r3, #112	; 0x70
 8004784:	d01a      	beq.n	80047bc <HAL_TIM_ConfigClockSource+0xaa>
 8004786:	2b70      	cmp	r3, #112	; 0x70
 8004788:	d87b      	bhi.n	8004882 <HAL_TIM_ConfigClockSource+0x170>
 800478a:	2b60      	cmp	r3, #96	; 0x60
 800478c:	d050      	beq.n	8004830 <HAL_TIM_ConfigClockSource+0x11e>
 800478e:	2b60      	cmp	r3, #96	; 0x60
 8004790:	d877      	bhi.n	8004882 <HAL_TIM_ConfigClockSource+0x170>
 8004792:	2b50      	cmp	r3, #80	; 0x50
 8004794:	d03c      	beq.n	8004810 <HAL_TIM_ConfigClockSource+0xfe>
 8004796:	2b50      	cmp	r3, #80	; 0x50
 8004798:	d873      	bhi.n	8004882 <HAL_TIM_ConfigClockSource+0x170>
 800479a:	2b40      	cmp	r3, #64	; 0x40
 800479c:	d058      	beq.n	8004850 <HAL_TIM_ConfigClockSource+0x13e>
 800479e:	2b40      	cmp	r3, #64	; 0x40
 80047a0:	d86f      	bhi.n	8004882 <HAL_TIM_ConfigClockSource+0x170>
 80047a2:	2b30      	cmp	r3, #48	; 0x30
 80047a4:	d064      	beq.n	8004870 <HAL_TIM_ConfigClockSource+0x15e>
 80047a6:	2b30      	cmp	r3, #48	; 0x30
 80047a8:	d86b      	bhi.n	8004882 <HAL_TIM_ConfigClockSource+0x170>
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	d060      	beq.n	8004870 <HAL_TIM_ConfigClockSource+0x15e>
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d867      	bhi.n	8004882 <HAL_TIM_ConfigClockSource+0x170>
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d05c      	beq.n	8004870 <HAL_TIM_ConfigClockSource+0x15e>
 80047b6:	2b10      	cmp	r3, #16
 80047b8:	d05a      	beq.n	8004870 <HAL_TIM_ConfigClockSource+0x15e>
 80047ba:	e062      	b.n	8004882 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047cc:	f000 f969 	bl	8004aa2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	609a      	str	r2, [r3, #8]
      break;
 80047e8:	e04f      	b.n	800488a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047fa:	f000 f952 	bl	8004aa2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800480c:	609a      	str	r2, [r3, #8]
      break;
 800480e:	e03c      	b.n	800488a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800481c:	461a      	mov	r2, r3
 800481e:	f000 f8c7 	bl	80049b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2150      	movs	r1, #80	; 0x50
 8004828:	4618      	mov	r0, r3
 800482a:	f000 f91e 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 800482e:	e02c      	b.n	800488a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800483c:	461a      	mov	r2, r3
 800483e:	f000 f8e5 	bl	8004a0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2160      	movs	r1, #96	; 0x60
 8004848:	4618      	mov	r0, r3
 800484a:	f000 f90e 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 800484e:	e01c      	b.n	800488a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800485c:	461a      	mov	r2, r3
 800485e:	f000 f8a7 	bl	80049b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2140      	movs	r1, #64	; 0x40
 8004868:	4618      	mov	r0, r3
 800486a:	f000 f8fe 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 800486e:	e00c      	b.n	800488a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4619      	mov	r1, r3
 800487a:	4610      	mov	r0, r2
 800487c:	f000 f8f5 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 8004880:	e003      	b.n	800488a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	73fb      	strb	r3, [r7, #15]
      break;
 8004886:	e000      	b.n	800488a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004888:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800489a:	7bfb      	ldrb	r3, [r7, #15]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr

080048b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr

080048da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr

080048ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a29      	ldr	r2, [pc, #164]	; (80049a4 <TIM_Base_SetConfig+0xb8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d003      	beq.n	800490c <TIM_Base_SetConfig+0x20>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490a:	d108      	bne.n	800491e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a20      	ldr	r2, [pc, #128]	; (80049a4 <TIM_Base_SetConfig+0xb8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00b      	beq.n	800493e <TIM_Base_SetConfig+0x52>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492c:	d007      	beq.n	800493e <TIM_Base_SetConfig+0x52>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a1d      	ldr	r2, [pc, #116]	; (80049a8 <TIM_Base_SetConfig+0xbc>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_Base_SetConfig+0x52>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a1c      	ldr	r2, [pc, #112]	; (80049ac <TIM_Base_SetConfig+0xc0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d108      	bne.n	8004950 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a0b      	ldr	r2, [pc, #44]	; (80049a4 <TIM_Base_SetConfig+0xb8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d007      	beq.n	800498c <TIM_Base_SetConfig+0xa0>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a0a      	ldr	r2, [pc, #40]	; (80049a8 <TIM_Base_SetConfig+0xbc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <TIM_Base_SetConfig+0xa0>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a09      	ldr	r2, [pc, #36]	; (80049ac <TIM_Base_SetConfig+0xc0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d103      	bne.n	8004994 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	615a      	str	r2, [r3, #20]
}
 800499a:	bf00      	nop
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr
 80049a4:	40012c00 	.word	0x40012c00
 80049a8:	40014400 	.word	0x40014400
 80049ac:	40014800 	.word	0x40014800

080049b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f023 0201 	bic.w	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f023 030a 	bic.w	r3, r3, #10
 80049ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr

08004a0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	f023 0210 	bic.w	r2, r3, #16
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	031b      	lsls	r3, r3, #12
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	621a      	str	r2, [r3, #32]
}
 8004a60:	bf00      	nop
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr

08004a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f043 0307 	orr.w	r3, r3, #7
 8004a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	609a      	str	r2, [r3, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr

08004aa2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b087      	sub	sp, #28
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	607a      	str	r2, [r7, #4]
 8004aae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004abc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	021a      	lsls	r2, r3, #8
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	609a      	str	r2, [r3, #8]
}
 8004ad6:	bf00      	nop
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr

08004ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e04a      	b.n	8004b8e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1e      	ldr	r2, [pc, #120]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d108      	bne.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a11      	ldr	r2, [pc, #68]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d004      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b60:	d10c      	bne.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr
 8004b98:	40012c00 	.word	0x40012c00

08004b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bc80      	pop	{r7}
 8004bac:	4770      	bx	lr

08004bae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bc80      	pop	{r7}
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr

08004bd2 <LL_RCC_GetUSARTClockSource>:
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bde:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	401a      	ands	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	041b      	lsls	r3, r3, #16
 8004bea:	4313      	orrs	r3, r2
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bc80      	pop	{r7}
 8004bf4:	4770      	bx	lr

08004bf6 <LL_RCC_GetLPUARTClockSource>:
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c02:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4013      	ands	r3, r2
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr

08004c14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e042      	b.n	8004cac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d106      	bne.n	8004c3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7fc fd57 	bl	80016ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2224      	movs	r2, #36	; 0x24
 8004c42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0201 	bic.w	r2, r2, #1
 8004c54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fc40 	bl	80054dc <UART_SetConfig>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e022      	b.n	8004cac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fea8 	bl	80059c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 ff2e 	bl	8005b06 <UART_CheckIdleState>
 8004caa:	4603      	mov	r3, r0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08a      	sub	sp, #40	; 0x28
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cca:	2b20      	cmp	r3, #32
 8004ccc:	d173      	bne.n	8004db6 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <HAL_UART_Transmit+0x26>
 8004cd4:	88fb      	ldrh	r3, [r7, #6]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e06c      	b.n	8004db8 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2221      	movs	r2, #33	; 0x21
 8004cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cee:	f7fc fe51 	bl	8001994 <HAL_GetTick>
 8004cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	88fa      	ldrh	r2, [r7, #6]
 8004cf8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	88fa      	ldrh	r2, [r7, #6]
 8004d00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0c:	d108      	bne.n	8004d20 <HAL_UART_Transmit+0x6c>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d104      	bne.n	8004d20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	61bb      	str	r3, [r7, #24]
 8004d1e:	e003      	b.n	8004d28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d28:	e02c      	b.n	8004d84 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2200      	movs	r2, #0
 8004d32:	2180      	movs	r1, #128	; 0x80
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 ff34 	bl	8005ba2 <UART_WaitOnFlagUntilTimeout>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e039      	b.n	8004db8 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10b      	bne.n	8004d62 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	3302      	adds	r3, #2
 8004d5e:	61bb      	str	r3, [r7, #24]
 8004d60:	e007      	b.n	8004d72 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	781a      	ldrb	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1cc      	bne.n	8004d2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	2200      	movs	r2, #0
 8004d98:	2140      	movs	r1, #64	; 0x40
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 ff01 	bl	8005ba2 <UART_WaitOnFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e006      	b.n	8004db8 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	e000      	b.n	8004db8 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004db6:	2302      	movs	r3, #2
  }
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3720      	adds	r7, #32
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08a      	sub	sp, #40	; 0x28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d137      	bne.n	8004e48 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <HAL_UART_Receive_IT+0x24>
 8004dde:	88fb      	ldrh	r3, [r7, #6]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e030      	b.n	8004e4a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <HAL_UART_Receive_IT+0x94>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d01f      	beq.n	8004e38 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d018      	beq.n	8004e38 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	e853 3f00 	ldrex	r3, [r3]
 8004e12:	613b      	str	r3, [r7, #16]
   return(result);
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	623b      	str	r3, [r7, #32]
 8004e26:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	69f9      	ldr	r1, [r7, #28]
 8004e2a:	6a3a      	ldr	r2, [r7, #32]
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e6      	bne.n	8004e06 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e38:	88fb      	ldrh	r3, [r7, #6]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 ff78 	bl	8005d34 <UART_Start_Receive_IT>
 8004e44:	4603      	mov	r3, r0
 8004e46:	e000      	b.n	8004e4a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e48:	2302      	movs	r3, #2
  }
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3728      	adds	r7, #40	; 0x28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	40008000 	.word	0x40008000

08004e58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b0ba      	sub	sp, #232	; 0xe8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004e82:	f640 030f 	movw	r3, #2063	; 0x80f
 8004e86:	4013      	ands	r3, r2
 8004e88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004e8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d11b      	bne.n	8004ecc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d015      	beq.n	8004ecc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ea4:	f003 0320 	and.w	r3, r3, #32
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d105      	bne.n	8004eb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d009      	beq.n	8004ecc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 82e3 	beq.w	8005488 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	4798      	blx	r3
      }
      return;
 8004eca:	e2dd      	b.n	8005488 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ecc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8123 	beq.w	800511c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004ed6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004eda:	4b8d      	ldr	r3, [pc, #564]	; (8005110 <HAL_UART_IRQHandler+0x2b8>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d106      	bne.n	8004ef0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004ee2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004ee6:	4b8b      	ldr	r3, [pc, #556]	; (8005114 <HAL_UART_IRQHandler+0x2bc>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 8116 	beq.w	800511c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d011      	beq.n	8004f20 <HAL_UART_IRQHandler+0xc8>
 8004efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00b      	beq.n	8004f20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f16:	f043 0201 	orr.w	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d011      	beq.n	8004f50 <HAL_UART_IRQHandler+0xf8>
 8004f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00b      	beq.n	8004f50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f46:	f043 0204 	orr.w	r2, r3, #4
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d011      	beq.n	8004f80 <HAL_UART_IRQHandler+0x128>
 8004f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00b      	beq.n	8004f80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2204      	movs	r2, #4
 8004f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f76:	f043 0202 	orr.w	r2, r3, #2
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d017      	beq.n	8004fbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d105      	bne.n	8004fa4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004f98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004f9c:	4b5c      	ldr	r3, [pc, #368]	; (8005110 <HAL_UART_IRQHandler+0x2b8>)
 8004f9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00b      	beq.n	8004fbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2208      	movs	r2, #8
 8004faa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb2:	f043 0208 	orr.w	r2, r3, #8
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d012      	beq.n	8004fee <HAL_UART_IRQHandler+0x196>
 8004fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00c      	beq.n	8004fee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe4:	f043 0220 	orr.w	r2, r3, #32
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8249 	beq.w	800548c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	2b00      	cmp	r3, #0
 8005004:	d013      	beq.n	800502e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800500a:	f003 0320 	and.w	r3, r3, #32
 800500e:	2b00      	cmp	r3, #0
 8005010:	d105      	bne.n	800501e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005034:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005042:	2b40      	cmp	r3, #64	; 0x40
 8005044:	d005      	beq.n	8005052 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800504a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800504e:	2b00      	cmp	r3, #0
 8005050:	d054      	beq.n	80050fc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 ff8e 	bl	8005f74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005062:	2b40      	cmp	r3, #64	; 0x40
 8005064:	d146      	bne.n	80050f4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3308      	adds	r3, #8
 800506c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800507c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3308      	adds	r3, #8
 800508e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005092:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800509e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050a2:	e841 2300 	strex	r3, r2, [r1]
 80050a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1d9      	bne.n	8005066 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d017      	beq.n	80050ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050c2:	4a15      	ldr	r2, [pc, #84]	; (8005118 <HAL_UART_IRQHandler+0x2c0>)
 80050c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fc ff34 	bl	8001f3a <HAL_DMA_Abort_IT>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d019      	beq.n	800510c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80050e6:	4610      	mov	r0, r2
 80050e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ea:	e00f      	b.n	800510c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f9e0 	bl	80054b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f2:	e00b      	b.n	800510c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f9dc 	bl	80054b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050fa:	e007      	b.n	800510c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f9d8 	bl	80054b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800510a:	e1bf      	b.n	800548c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800510c:	bf00      	nop
    return;
 800510e:	e1bd      	b.n	800548c <HAL_UART_IRQHandler+0x634>
 8005110:	10000001 	.word	0x10000001
 8005114:	04000120 	.word	0x04000120
 8005118:	0800603f 	.word	0x0800603f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005120:	2b01      	cmp	r3, #1
 8005122:	f040 8153 	bne.w	80053cc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800512a:	f003 0310 	and.w	r3, r3, #16
 800512e:	2b00      	cmp	r3, #0
 8005130:	f000 814c 	beq.w	80053cc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8145 	beq.w	80053cc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2210      	movs	r2, #16
 8005148:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	f040 80bb 	bne.w	80052d0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005168:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 818f 	beq.w	8005490 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005178:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800517c:	429a      	cmp	r2, r3
 800517e:	f080 8187 	bcs.w	8005490 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005188:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	f040 8087 	bne.w	80052ae <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051da:	e841 2300 	strex	r3, r2, [r1]
 80051de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1da      	bne.n	80051a0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3308      	adds	r3, #8
 80051f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051fc:	f023 0301 	bic.w	r3, r3, #1
 8005200:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3308      	adds	r3, #8
 800520a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800520e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005212:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005216:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800521a:	e841 2300 	strex	r3, r2, [r1]
 800521e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1e1      	bne.n	80051ea <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	3308      	adds	r3, #8
 800522c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005230:	e853 3f00 	ldrex	r3, [r3]
 8005234:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800523c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3308      	adds	r3, #8
 8005246:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800524a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800524c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005250:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005252:	e841 2300 	strex	r3, r2, [r1]
 8005256:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1e3      	bne.n	8005226 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2220      	movs	r2, #32
 8005262:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005274:	e853 3f00 	ldrex	r3, [r3]
 8005278:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800527a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800527c:	f023 0310 	bic.w	r3, r3, #16
 8005280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800528e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005290:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005294:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005296:	e841 2300 	strex	r3, r2, [r1]
 800529a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800529c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e4      	bne.n	800526c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fc fde8 	bl	8001e7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2202      	movs	r2, #2
 80052b2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	4619      	mov	r1, r3
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f8fb 	bl	80054c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052ce:	e0df      	b.n	8005490 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052dc:	b29b      	uxth	r3, r3
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 80d1 	beq.w	8005494 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80052f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 80cc 	beq.w	8005494 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800530a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005310:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	461a      	mov	r2, r3
 800531a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800531e:	647b      	str	r3, [r7, #68]	; 0x44
 8005320:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005324:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005326:	e841 2300 	strex	r3, r2, [r1]
 800532a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800532c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1e4      	bne.n	80052fc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3308      	adds	r3, #8
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	e853 3f00 	ldrex	r3, [r3]
 8005340:	623b      	str	r3, [r7, #32]
   return(result);
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3308      	adds	r3, #8
 8005356:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800535a:	633a      	str	r2, [r7, #48]	; 0x30
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e1      	bne.n	8005332 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	e853 3f00 	ldrex	r3, [r3]
 800538e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0310 	bic.w	r3, r3, #16
 8005396:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a8:	69b9      	ldr	r1, [r7, #24]
 80053aa:	69fa      	ldr	r2, [r7, #28]
 80053ac:	e841 2300 	strex	r3, r2, [r1]
 80053b0:	617b      	str	r3, [r7, #20]
   return(result);
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1e4      	bne.n	8005382 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053c2:	4619      	mov	r1, r3
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f87d 	bl	80054c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053ca:	e063      	b.n	8005494 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00e      	beq.n	80053f6 <HAL_UART_IRQHandler+0x59e>
 80053d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d008      	beq.n	80053f6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80053ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f001 fb82 	bl	8006af8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053f4:	e051      	b.n	800549a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80053f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d014      	beq.n	800542c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540a:	2b00      	cmp	r3, #0
 800540c:	d105      	bne.n	800541a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800540e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005412:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d008      	beq.n	800542c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800541e:	2b00      	cmp	r3, #0
 8005420:	d03a      	beq.n	8005498 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	4798      	blx	r3
    }
    return;
 800542a:	e035      	b.n	8005498 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800542c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005434:	2b00      	cmp	r3, #0
 8005436:	d009      	beq.n	800544c <HAL_UART_IRQHandler+0x5f4>
 8005438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800543c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fe10 	bl	800606a <UART_EndTransmit_IT>
    return;
 800544a:	e026      	b.n	800549a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800544c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005450:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d009      	beq.n	800546c <HAL_UART_IRQHandler+0x614>
 8005458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800545c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f001 fb59 	bl	8006b1c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800546a:	e016      	b.n	800549a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800546c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d010      	beq.n	800549a <HAL_UART_IRQHandler+0x642>
 8005478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800547c:	2b00      	cmp	r3, #0
 800547e:	da0c      	bge.n	800549a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f001 fb42 	bl	8006b0a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005486:	e008      	b.n	800549a <HAL_UART_IRQHandler+0x642>
      return;
 8005488:	bf00      	nop
 800548a:	e006      	b.n	800549a <HAL_UART_IRQHandler+0x642>
    return;
 800548c:	bf00      	nop
 800548e:	e004      	b.n	800549a <HAL_UART_IRQHandler+0x642>
      return;
 8005490:	bf00      	nop
 8005492:	e002      	b.n	800549a <HAL_UART_IRQHandler+0x642>
      return;
 8005494:	bf00      	nop
 8005496:	e000      	b.n	800549a <HAL_UART_IRQHandler+0x642>
    return;
 8005498:	bf00      	nop
  }
}
 800549a:	37e8      	adds	r7, #232	; 0xe8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc80      	pop	{r7}
 80054b0:	4770      	bx	lr

080054b2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr

080054c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	460b      	mov	r3, r1
 80054ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bc80      	pop	{r7}
 80054d8:	4770      	bx	lr
	...

080054dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054e0:	b08c      	sub	sp, #48	; 0x30
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	431a      	orrs	r2, r3
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	431a      	orrs	r2, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	4313      	orrs	r3, r2
 8005502:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4b94      	ldr	r3, [pc, #592]	; (800575c <UART_SetConfig+0x280>)
 800550c:	4013      	ands	r3, r2
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	6812      	ldr	r2, [r2, #0]
 8005512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005514:	430b      	orrs	r3, r1
 8005516:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a89      	ldr	r2, [pc, #548]	; (8005760 <UART_SetConfig+0x284>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d004      	beq.n	8005548 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005544:	4313      	orrs	r3, r2
 8005546:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005552:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	6812      	ldr	r2, [r2, #0]
 800555a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800555c:	430b      	orrs	r3, r1
 800555e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	f023 010f 	bic.w	r1, r3, #15
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a7a      	ldr	r2, [pc, #488]	; (8005764 <UART_SetConfig+0x288>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d127      	bne.n	80055d0 <UART_SetConfig+0xf4>
 8005580:	2003      	movs	r0, #3
 8005582:	f7ff fb26 	bl	8004bd2 <LL_RCC_GetUSARTClockSource>
 8005586:	4603      	mov	r3, r0
 8005588:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800558c:	2b03      	cmp	r3, #3
 800558e:	d81b      	bhi.n	80055c8 <UART_SetConfig+0xec>
 8005590:	a201      	add	r2, pc, #4	; (adr r2, 8005598 <UART_SetConfig+0xbc>)
 8005592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005596:	bf00      	nop
 8005598:	080055a9 	.word	0x080055a9
 800559c:	080055b9 	.word	0x080055b9
 80055a0:	080055b1 	.word	0x080055b1
 80055a4:	080055c1 	.word	0x080055c1
 80055a8:	2301      	movs	r3, #1
 80055aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ae:	e080      	b.n	80056b2 <UART_SetConfig+0x1d6>
 80055b0:	2302      	movs	r3, #2
 80055b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055b6:	e07c      	b.n	80056b2 <UART_SetConfig+0x1d6>
 80055b8:	2304      	movs	r3, #4
 80055ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055be:	e078      	b.n	80056b2 <UART_SetConfig+0x1d6>
 80055c0:	2308      	movs	r3, #8
 80055c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055c6:	e074      	b.n	80056b2 <UART_SetConfig+0x1d6>
 80055c8:	2310      	movs	r3, #16
 80055ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ce:	e070      	b.n	80056b2 <UART_SetConfig+0x1d6>
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a64      	ldr	r2, [pc, #400]	; (8005768 <UART_SetConfig+0x28c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d138      	bne.n	800564c <UART_SetConfig+0x170>
 80055da:	200c      	movs	r0, #12
 80055dc:	f7ff faf9 	bl	8004bd2 <LL_RCC_GetUSARTClockSource>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80055e6:	2b0c      	cmp	r3, #12
 80055e8:	d82c      	bhi.n	8005644 <UART_SetConfig+0x168>
 80055ea:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <UART_SetConfig+0x114>)
 80055ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f0:	08005625 	.word	0x08005625
 80055f4:	08005645 	.word	0x08005645
 80055f8:	08005645 	.word	0x08005645
 80055fc:	08005645 	.word	0x08005645
 8005600:	08005635 	.word	0x08005635
 8005604:	08005645 	.word	0x08005645
 8005608:	08005645 	.word	0x08005645
 800560c:	08005645 	.word	0x08005645
 8005610:	0800562d 	.word	0x0800562d
 8005614:	08005645 	.word	0x08005645
 8005618:	08005645 	.word	0x08005645
 800561c:	08005645 	.word	0x08005645
 8005620:	0800563d 	.word	0x0800563d
 8005624:	2300      	movs	r3, #0
 8005626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800562a:	e042      	b.n	80056b2 <UART_SetConfig+0x1d6>
 800562c:	2302      	movs	r3, #2
 800562e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005632:	e03e      	b.n	80056b2 <UART_SetConfig+0x1d6>
 8005634:	2304      	movs	r3, #4
 8005636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800563a:	e03a      	b.n	80056b2 <UART_SetConfig+0x1d6>
 800563c:	2308      	movs	r3, #8
 800563e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005642:	e036      	b.n	80056b2 <UART_SetConfig+0x1d6>
 8005644:	2310      	movs	r3, #16
 8005646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800564a:	e032      	b.n	80056b2 <UART_SetConfig+0x1d6>
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a43      	ldr	r2, [pc, #268]	; (8005760 <UART_SetConfig+0x284>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d12a      	bne.n	80056ac <UART_SetConfig+0x1d0>
 8005656:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800565a:	f7ff facc 	bl	8004bf6 <LL_RCC_GetLPUARTClockSource>
 800565e:	4603      	mov	r3, r0
 8005660:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005664:	d01a      	beq.n	800569c <UART_SetConfig+0x1c0>
 8005666:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800566a:	d81b      	bhi.n	80056a4 <UART_SetConfig+0x1c8>
 800566c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005670:	d00c      	beq.n	800568c <UART_SetConfig+0x1b0>
 8005672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005676:	d815      	bhi.n	80056a4 <UART_SetConfig+0x1c8>
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <UART_SetConfig+0x1a8>
 800567c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005680:	d008      	beq.n	8005694 <UART_SetConfig+0x1b8>
 8005682:	e00f      	b.n	80056a4 <UART_SetConfig+0x1c8>
 8005684:	2300      	movs	r3, #0
 8005686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800568a:	e012      	b.n	80056b2 <UART_SetConfig+0x1d6>
 800568c:	2302      	movs	r3, #2
 800568e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005692:	e00e      	b.n	80056b2 <UART_SetConfig+0x1d6>
 8005694:	2304      	movs	r3, #4
 8005696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800569a:	e00a      	b.n	80056b2 <UART_SetConfig+0x1d6>
 800569c:	2308      	movs	r3, #8
 800569e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056a2:	e006      	b.n	80056b2 <UART_SetConfig+0x1d6>
 80056a4:	2310      	movs	r3, #16
 80056a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056aa:	e002      	b.n	80056b2 <UART_SetConfig+0x1d6>
 80056ac:	2310      	movs	r3, #16
 80056ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a2a      	ldr	r2, [pc, #168]	; (8005760 <UART_SetConfig+0x284>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	f040 80a4 	bne.w	8005806 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056c2:	2b08      	cmp	r3, #8
 80056c4:	d823      	bhi.n	800570e <UART_SetConfig+0x232>
 80056c6:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <UART_SetConfig+0x1f0>)
 80056c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056cc:	080056f1 	.word	0x080056f1
 80056d0:	0800570f 	.word	0x0800570f
 80056d4:	080056f9 	.word	0x080056f9
 80056d8:	0800570f 	.word	0x0800570f
 80056dc:	080056ff 	.word	0x080056ff
 80056e0:	0800570f 	.word	0x0800570f
 80056e4:	0800570f 	.word	0x0800570f
 80056e8:	0800570f 	.word	0x0800570f
 80056ec:	08005707 	.word	0x08005707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f0:	f7fd fe44 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 80056f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056f6:	e010      	b.n	800571a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f8:	4b1c      	ldr	r3, [pc, #112]	; (800576c <UART_SetConfig+0x290>)
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056fc:	e00d      	b.n	800571a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056fe:	f7fd fd89 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 8005702:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005704:	e009      	b.n	800571a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800570c:	e005      	b.n	800571a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005718:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 8137 	beq.w	8005990 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	4a12      	ldr	r2, [pc, #72]	; (8005770 <UART_SetConfig+0x294>)
 8005728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800572c:	461a      	mov	r2, r3
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	fbb3 f3f2 	udiv	r3, r3, r2
 8005734:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	4413      	add	r3, r2
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	429a      	cmp	r2, r3
 8005744:	d305      	bcc.n	8005752 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	429a      	cmp	r2, r3
 8005750:	d910      	bls.n	8005774 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005758:	e11a      	b.n	8005990 <UART_SetConfig+0x4b4>
 800575a:	bf00      	nop
 800575c:	cfff69f3 	.word	0xcfff69f3
 8005760:	40008000 	.word	0x40008000
 8005764:	40013800 	.word	0x40013800
 8005768:	40004400 	.word	0x40004400
 800576c:	00f42400 	.word	0x00f42400
 8005770:	0800bcb8 	.word	0x0800bcb8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	2200      	movs	r2, #0
 8005778:	60bb      	str	r3, [r7, #8]
 800577a:	60fa      	str	r2, [r7, #12]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	4a8e      	ldr	r2, [pc, #568]	; (80059bc <UART_SetConfig+0x4e0>)
 8005782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005786:	b29b      	uxth	r3, r3
 8005788:	2200      	movs	r2, #0
 800578a:	603b      	str	r3, [r7, #0]
 800578c:	607a      	str	r2, [r7, #4]
 800578e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005796:	f7fa fd53 	bl	8000240 <__aeabi_uldivmod>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4610      	mov	r0, r2
 80057a0:	4619      	mov	r1, r3
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	f04f 0300 	mov.w	r3, #0
 80057aa:	020b      	lsls	r3, r1, #8
 80057ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057b0:	0202      	lsls	r2, r0, #8
 80057b2:	6979      	ldr	r1, [r7, #20]
 80057b4:	6849      	ldr	r1, [r1, #4]
 80057b6:	0849      	lsrs	r1, r1, #1
 80057b8:	2000      	movs	r0, #0
 80057ba:	460c      	mov	r4, r1
 80057bc:	4605      	mov	r5, r0
 80057be:	eb12 0804 	adds.w	r8, r2, r4
 80057c2:	eb43 0905 	adc.w	r9, r3, r5
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	469a      	mov	sl, r3
 80057ce:	4693      	mov	fp, r2
 80057d0:	4652      	mov	r2, sl
 80057d2:	465b      	mov	r3, fp
 80057d4:	4640      	mov	r0, r8
 80057d6:	4649      	mov	r1, r9
 80057d8:	f7fa fd32 	bl	8000240 <__aeabi_uldivmod>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4613      	mov	r3, r2
 80057e2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ea:	d308      	bcc.n	80057fe <UART_SetConfig+0x322>
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057f2:	d204      	bcs.n	80057fe <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6a3a      	ldr	r2, [r7, #32]
 80057fa:	60da      	str	r2, [r3, #12]
 80057fc:	e0c8      	b.n	8005990 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005804:	e0c4      	b.n	8005990 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800580e:	d167      	bne.n	80058e0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005810:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005814:	2b08      	cmp	r3, #8
 8005816:	d828      	bhi.n	800586a <UART_SetConfig+0x38e>
 8005818:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <UART_SetConfig+0x344>)
 800581a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581e:	bf00      	nop
 8005820:	08005845 	.word	0x08005845
 8005824:	0800584d 	.word	0x0800584d
 8005828:	08005855 	.word	0x08005855
 800582c:	0800586b 	.word	0x0800586b
 8005830:	0800585b 	.word	0x0800585b
 8005834:	0800586b 	.word	0x0800586b
 8005838:	0800586b 	.word	0x0800586b
 800583c:	0800586b 	.word	0x0800586b
 8005840:	08005863 	.word	0x08005863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005844:	f7fd fd9a 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 8005848:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800584a:	e014      	b.n	8005876 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800584c:	f7fd fda8 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 8005850:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005852:	e010      	b.n	8005876 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005854:	4b5a      	ldr	r3, [pc, #360]	; (80059c0 <UART_SetConfig+0x4e4>)
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005858:	e00d      	b.n	8005876 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800585a:	f7fd fcdb 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 800585e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005860:	e009      	b.n	8005876 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005868:	e005      	b.n	8005876 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005874:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 8089 	beq.w	8005990 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	4a4e      	ldr	r2, [pc, #312]	; (80059bc <UART_SetConfig+0x4e0>)
 8005884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005888:	461a      	mov	r2, r3
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005890:	005a      	lsls	r2, r3, #1
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	085b      	lsrs	r3, r3, #1
 8005898:	441a      	add	r2, r3
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	2b0f      	cmp	r3, #15
 80058a8:	d916      	bls.n	80058d8 <UART_SetConfig+0x3fc>
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b0:	d212      	bcs.n	80058d8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f023 030f 	bic.w	r3, r3, #15
 80058ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	8bfb      	ldrh	r3, [r7, #30]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	8bfa      	ldrh	r2, [r7, #30]
 80058d4:	60da      	str	r2, [r3, #12]
 80058d6:	e05b      	b.n	8005990 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058de:	e057      	b.n	8005990 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d828      	bhi.n	800593a <UART_SetConfig+0x45e>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <UART_SetConfig+0x414>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005915 	.word	0x08005915
 80058f4:	0800591d 	.word	0x0800591d
 80058f8:	08005925 	.word	0x08005925
 80058fc:	0800593b 	.word	0x0800593b
 8005900:	0800592b 	.word	0x0800592b
 8005904:	0800593b 	.word	0x0800593b
 8005908:	0800593b 	.word	0x0800593b
 800590c:	0800593b 	.word	0x0800593b
 8005910:	08005933 	.word	0x08005933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005914:	f7fd fd32 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 8005918:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800591a:	e014      	b.n	8005946 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800591c:	f7fd fd40 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 8005920:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005922:	e010      	b.n	8005946 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005924:	4b26      	ldr	r3, [pc, #152]	; (80059c0 <UART_SetConfig+0x4e4>)
 8005926:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005928:	e00d      	b.n	8005946 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800592a:	f7fd fc73 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 800592e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005930:	e009      	b.n	8005946 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005938:	e005      	b.n	8005946 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005944:	bf00      	nop
    }

    if (pclk != 0U)
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	2b00      	cmp	r3, #0
 800594a:	d021      	beq.n	8005990 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	4a1a      	ldr	r2, [pc, #104]	; (80059bc <UART_SetConfig+0x4e0>)
 8005952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005956:	461a      	mov	r2, r3
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	fbb3 f2f2 	udiv	r2, r3, r2
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	085b      	lsrs	r3, r3, #1
 8005964:	441a      	add	r2, r3
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	fbb2 f3f3 	udiv	r3, r2, r3
 800596e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	2b0f      	cmp	r3, #15
 8005974:	d909      	bls.n	800598a <UART_SetConfig+0x4ae>
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597c:	d205      	bcs.n	800598a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	b29a      	uxth	r2, r3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60da      	str	r2, [r3, #12]
 8005988:	e002      	b.n	8005990 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2201      	movs	r2, #1
 8005994:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2201      	movs	r2, #1
 800599c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2200      	movs	r2, #0
 80059a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2200      	movs	r2, #0
 80059aa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80059ac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3730      	adds	r7, #48	; 0x30
 80059b4:	46bd      	mov	sp, r7
 80059b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ba:	bf00      	nop
 80059bc:	0800bcb8 	.word	0x0800bcb8
 80059c0:	00f42400 	.word	0x00f42400

080059c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00a      	beq.n	80059ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00a      	beq.n	8005a76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7a:	f003 0320 	and.w	r3, r3, #32
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d01a      	beq.n	8005ada <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ac2:	d10a      	bne.n	8005ada <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	605a      	str	r2, [r3, #4]
  }
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bc80      	pop	{r7}
 8005b04:	4770      	bx	lr

08005b06 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b086      	sub	sp, #24
 8005b0a:	af02      	add	r7, sp, #8
 8005b0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b16:	f7fb ff3d 	bl	8001994 <HAL_GetTick>
 8005b1a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d10e      	bne.n	8005b48 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f832 	bl	8005ba2 <UART_WaitOnFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e028      	b.n	8005b9a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0304 	and.w	r3, r3, #4
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d10e      	bne.n	8005b74 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f81c 	bl	8005ba2 <UART_WaitOnFlagUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e012      	b.n	8005b9a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b09c      	sub	sp, #112	; 0x70
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	603b      	str	r3, [r7, #0]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb2:	e0a9      	b.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bba:	f000 80a5 	beq.w	8005d08 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bbe:	f7fb fee9 	bl	8001994 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d302      	bcc.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d140      	bne.n	8005c56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005be8:	667b      	str	r3, [r7, #100]	; 0x64
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bf4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005bf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e6      	bne.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c18:	f023 0301 	bic.w	r3, r3, #1
 8005c1c:	663b      	str	r3, [r7, #96]	; 0x60
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3308      	adds	r3, #8
 8005c24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c26:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e5      	bne.n	8005c06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e069      	b.n	8005d2a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d051      	beq.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c72:	d149      	bne.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e6      	bne.n	8005c7e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3308      	adds	r3, #8
 8005cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	e853 3f00 	ldrex	r3, [r3]
 8005cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f023 0301 	bic.w	r3, r3, #1
 8005cc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3308      	adds	r3, #8
 8005cce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005cd0:	623a      	str	r2, [r7, #32]
 8005cd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	69f9      	ldr	r1, [r7, #28]
 8005cd6:	6a3a      	ldr	r2, [r7, #32]
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e5      	bne.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e010      	b.n	8005d2a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69da      	ldr	r2, [r3, #28]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	4013      	ands	r3, r2
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	bf0c      	ite	eq
 8005d18:	2301      	moveq	r3, #1
 8005d1a:	2300      	movne	r3, #0
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	461a      	mov	r2, r3
 8005d20:	79fb      	ldrb	r3, [r7, #7]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	f43f af46 	beq.w	8005bb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3770      	adds	r7, #112	; 0x70
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b0a3      	sub	sp, #140	; 0x8c
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	88fa      	ldrh	r2, [r7, #6]
 8005d4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	88fa      	ldrh	r2, [r7, #6]
 8005d54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d66:	d10e      	bne.n	8005d86 <UART_Start_Receive_IT+0x52>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d105      	bne.n	8005d7c <UART_Start_Receive_IT+0x48>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d7a:	e02d      	b.n	8005dd8 <UART_Start_Receive_IT+0xa4>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	22ff      	movs	r2, #255	; 0xff
 8005d80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d84:	e028      	b.n	8005dd8 <UART_Start_Receive_IT+0xa4>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10d      	bne.n	8005daa <UART_Start_Receive_IT+0x76>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d104      	bne.n	8005da0 <UART_Start_Receive_IT+0x6c>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	22ff      	movs	r2, #255	; 0xff
 8005d9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d9e:	e01b      	b.n	8005dd8 <UART_Start_Receive_IT+0xa4>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	227f      	movs	r2, #127	; 0x7f
 8005da4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005da8:	e016      	b.n	8005dd8 <UART_Start_Receive_IT+0xa4>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005db2:	d10d      	bne.n	8005dd0 <UART_Start_Receive_IT+0x9c>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d104      	bne.n	8005dc6 <UART_Start_Receive_IT+0x92>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	227f      	movs	r2, #127	; 0x7f
 8005dc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005dc4:	e008      	b.n	8005dd8 <UART_Start_Receive_IT+0xa4>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	223f      	movs	r2, #63	; 0x3f
 8005dca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005dce:	e003      	b.n	8005dd8 <UART_Start_Receive_IT+0xa4>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2222      	movs	r2, #34	; 0x22
 8005de4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3308      	adds	r3, #8
 8005dee:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005df2:	e853 3f00 	ldrex	r3, [r3]
 8005df6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005df8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dfa:	f043 0301 	orr.w	r3, r3, #1
 8005dfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3308      	adds	r3, #8
 8005e08:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005e0c:	673a      	str	r2, [r7, #112]	; 0x70
 8005e0e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005e12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005e14:	e841 2300 	strex	r3, r2, [r1]
 8005e18:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005e1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e3      	bne.n	8005de8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e28:	d14f      	bne.n	8005eca <UART_Start_Receive_IT+0x196>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005e30:	88fa      	ldrh	r2, [r7, #6]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d349      	bcc.n	8005eca <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e3e:	d107      	bne.n	8005e50 <UART_Start_Receive_IT+0x11c>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d103      	bne.n	8005e50 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4a46      	ldr	r2, [pc, #280]	; (8005f64 <UART_Start_Receive_IT+0x230>)
 8005e4c:	675a      	str	r2, [r3, #116]	; 0x74
 8005e4e:	e002      	b.n	8005e56 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4a45      	ldr	r2, [pc, #276]	; (8005f68 <UART_Start_Receive_IT+0x234>)
 8005e54:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d01a      	beq.n	8005e94 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e66:	e853 3f00 	ldrex	r3, [r3]
 8005e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e82:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e4      	bne.n	8005e5e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3308      	adds	r3, #8
 8005e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005eb4:	64ba      	str	r2, [r7, #72]	; 0x48
 8005eb6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005eba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ebc:	e841 2300 	strex	r3, r2, [r1]
 8005ec0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e5      	bne.n	8005e94 <UART_Start_Receive_IT+0x160>
 8005ec8:	e046      	b.n	8005f58 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed2:	d107      	bne.n	8005ee4 <UART_Start_Receive_IT+0x1b0>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d103      	bne.n	8005ee4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4a23      	ldr	r2, [pc, #140]	; (8005f6c <UART_Start_Receive_IT+0x238>)
 8005ee0:	675a      	str	r2, [r3, #116]	; 0x74
 8005ee2:	e002      	b.n	8005eea <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4a22      	ldr	r2, [pc, #136]	; (8005f70 <UART_Start_Receive_IT+0x23c>)
 8005ee8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d019      	beq.n	8005f26 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efa:	e853 3f00 	ldrex	r3, [r3]
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005f06:	677b      	str	r3, [r7, #116]	; 0x74
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f10:	637b      	str	r3, [r7, #52]	; 0x34
 8005f12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f18:	e841 2300 	strex	r3, r2, [r1]
 8005f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1e6      	bne.n	8005ef2 <UART_Start_Receive_IT+0x1be>
 8005f24:	e018      	b.n	8005f58 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	e853 3f00 	ldrex	r3, [r3]
 8005f32:	613b      	str	r3, [r7, #16]
   return(result);
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f043 0320 	orr.w	r3, r3, #32
 8005f3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	461a      	mov	r2, r3
 8005f42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f44:	623b      	str	r3, [r7, #32]
 8005f46:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f48:	69f9      	ldr	r1, [r7, #28]
 8005f4a:	6a3a      	ldr	r2, [r7, #32]
 8005f4c:	e841 2300 	strex	r3, r2, [r1]
 8005f50:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1e6      	bne.n	8005f26 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	378c      	adds	r7, #140	; 0x8c
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bc80      	pop	{r7}
 8005f62:	4770      	bx	lr
 8005f64:	08006791 	.word	0x08006791
 8005f68:	08006431 	.word	0x08006431
 8005f6c:	08006279 	.word	0x08006279
 8005f70:	080060c1 	.word	0x080060c1

08005f74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b095      	sub	sp, #84	; 0x54
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f9a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1e6      	bne.n	8005f7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fc4:	f023 0301 	bic.w	r3, r3, #1
 8005fc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3308      	adds	r3, #8
 8005fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e3      	bne.n	8005fae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d118      	bne.n	8006020 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	e853 3f00 	ldrex	r3, [r3]
 8005ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f023 0310 	bic.w	r3, r3, #16
 8006002:	647b      	str	r3, [r7, #68]	; 0x44
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	461a      	mov	r2, r3
 800600a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006010:	6979      	ldr	r1, [r7, #20]
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	e841 2300 	strex	r3, r2, [r1]
 8006018:	613b      	str	r3, [r7, #16]
   return(result);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1e6      	bne.n	8005fee <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2220      	movs	r2, #32
 8006024:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006034:	bf00      	nop
 8006036:	3754      	adds	r7, #84	; 0x54
 8006038:	46bd      	mov	sp, r7
 800603a:	bc80      	pop	{r7}
 800603c:	4770      	bx	lr

0800603e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f7ff fa28 	bl	80054b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006062:	bf00      	nop
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b088      	sub	sp, #32
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006086:	61fb      	str	r3, [r7, #28]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	461a      	mov	r2, r3
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	61bb      	str	r3, [r7, #24]
 8006092:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6979      	ldr	r1, [r7, #20]
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	613b      	str	r3, [r7, #16]
   return(result);
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e6      	bne.n	8006072 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7ff f9f4 	bl	80054a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060b8:	bf00      	nop
 80060ba:	3720      	adds	r7, #32
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b09c      	sub	sp, #112	; 0x70
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80060ce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060d8:	2b22      	cmp	r3, #34	; 0x22
 80060da:	f040 80be 	bne.w	800625a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80060e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80060ec:	b2d9      	uxtb	r1, r3
 80060ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f8:	400a      	ands	r2, r1
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006120:	b29b      	uxth	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	f040 80a1 	bne.w	800626a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006138:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800613c:	66bb      	str	r3, [r7, #104]	; 0x68
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006146:	65bb      	str	r3, [r7, #88]	; 0x58
 8006148:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800614c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1e6      	bne.n	8006128 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3308      	adds	r3, #8
 8006160:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800616a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616c:	f023 0301 	bic.w	r3, r3, #1
 8006170:	667b      	str	r3, [r7, #100]	; 0x64
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3308      	adds	r3, #8
 8006178:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800617a:	647a      	str	r2, [r7, #68]	; 0x44
 800617c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006182:	e841 2300 	strex	r3, r2, [r1]
 8006186:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e5      	bne.n	800615a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2220      	movs	r2, #32
 8006192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a33      	ldr	r2, [pc, #204]	; (8006274 <UART_RxISR_8BIT+0x1b4>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d01f      	beq.n	80061ec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d018      	beq.n	80061ec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	e853 3f00 	ldrex	r3, [r3]
 80061c6:	623b      	str	r3, [r7, #32]
   return(result);
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061ce:	663b      	str	r3, [r7, #96]	; 0x60
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061d8:	633b      	str	r3, [r7, #48]	; 0x30
 80061da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e6      	bne.n	80061ba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d12e      	bne.n	8006252 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	60fb      	str	r3, [r7, #12]
   return(result);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0310 	bic.w	r3, r3, #16
 800620e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006218:	61fb      	str	r3, [r7, #28]
 800621a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	69b9      	ldr	r1, [r7, #24]
 800621e:	69fa      	ldr	r2, [r7, #28]
 8006220:	e841 2300 	strex	r3, r2, [r1]
 8006224:	617b      	str	r3, [r7, #20]
   return(result);
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e6      	bne.n	80061fa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	f003 0310 	and.w	r3, r3, #16
 8006236:	2b10      	cmp	r3, #16
 8006238:	d103      	bne.n	8006242 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2210      	movs	r2, #16
 8006240:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006248:	4619      	mov	r1, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff f93a 	bl	80054c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006250:	e00b      	b.n	800626a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7fa fe9a 	bl	8000f8c <HAL_UART_RxCpltCallback>
}
 8006258:	e007      	b.n	800626a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	699a      	ldr	r2, [r3, #24]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f042 0208 	orr.w	r2, r2, #8
 8006268:	619a      	str	r2, [r3, #24]
}
 800626a:	bf00      	nop
 800626c:	3770      	adds	r7, #112	; 0x70
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	40008000 	.word	0x40008000

08006278 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b09c      	sub	sp, #112	; 0x70
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006286:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006290:	2b22      	cmp	r3, #34	; 0x22
 8006292:	f040 80be 	bne.w	8006412 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80062a6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80062aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80062ae:	4013      	ands	r3, r2
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ba:	1c9a      	adds	r2, r3, #2
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	3b01      	subs	r3, #1
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f040 80a1 	bne.w	8006422 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80062ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062f4:	667b      	str	r3, [r7, #100]	; 0x64
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062fe:	657b      	str	r3, [r7, #84]	; 0x54
 8006300:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006302:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006304:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006306:	e841 2300 	strex	r3, r2, [r1]
 800630a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800630c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1e6      	bne.n	80062e0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3308      	adds	r3, #8
 8006318:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631c:	e853 3f00 	ldrex	r3, [r3]
 8006320:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	f023 0301 	bic.w	r3, r3, #1
 8006328:	663b      	str	r3, [r7, #96]	; 0x60
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3308      	adds	r3, #8
 8006330:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006332:	643a      	str	r2, [r7, #64]	; 0x40
 8006334:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006338:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800633a:	e841 2300 	strex	r3, r2, [r1]
 800633e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1e5      	bne.n	8006312 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2220      	movs	r2, #32
 800634a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a33      	ldr	r2, [pc, #204]	; (800642c <UART_RxISR_16BIT+0x1b4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d01f      	beq.n	80063a4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d018      	beq.n	80063a4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	e853 3f00 	ldrex	r3, [r3]
 800637e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006386:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
 800638e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006392:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006394:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006398:	e841 2300 	strex	r3, r2, [r1]
 800639c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1e6      	bne.n	8006372 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d12e      	bne.n	800640a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	e853 3f00 	ldrex	r3, [r3]
 80063be:	60bb      	str	r3, [r7, #8]
   return(result);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f023 0310 	bic.w	r3, r3, #16
 80063c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	461a      	mov	r2, r3
 80063ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063d0:	61bb      	str	r3, [r7, #24]
 80063d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d4:	6979      	ldr	r1, [r7, #20]
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	e841 2300 	strex	r3, r2, [r1]
 80063dc:	613b      	str	r3, [r7, #16]
   return(result);
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1e6      	bne.n	80063b2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	f003 0310 	and.w	r3, r3, #16
 80063ee:	2b10      	cmp	r3, #16
 80063f0:	d103      	bne.n	80063fa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2210      	movs	r2, #16
 80063f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7ff f85e 	bl	80054c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006408:	e00b      	b.n	8006422 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7fa fdbe 	bl	8000f8c <HAL_UART_RxCpltCallback>
}
 8006410:	e007      	b.n	8006422 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	699a      	ldr	r2, [r3, #24]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f042 0208 	orr.w	r2, r2, #8
 8006420:	619a      	str	r2, [r3, #24]
}
 8006422:	bf00      	nop
 8006424:	3770      	adds	r7, #112	; 0x70
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	40008000 	.word	0x40008000

08006430 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b0ac      	sub	sp, #176	; 0xb0
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800643e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006466:	2b22      	cmp	r3, #34	; 0x22
 8006468:	f040 8182 	bne.w	8006770 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006472:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006476:	e125      	b.n	80066c4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006482:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006486:	b2d9      	uxtb	r1, r3
 8006488:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800648c:	b2da      	uxtb	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006492:	400a      	ands	r2, r1
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80064be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064c2:	f003 0307 	and.w	r3, r3, #7
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d053      	beq.n	8006572 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d011      	beq.n	80064fa <UART_RxISR_8BIT_FIFOEN+0xca>
 80064d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80064da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00b      	beq.n	80064fa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2201      	movs	r2, #1
 80064e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f0:	f043 0201 	orr.w	r2, r3, #1
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d011      	beq.n	800652a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006506:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00b      	beq.n	800652a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2202      	movs	r2, #2
 8006518:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006520:	f043 0204 	orr.w	r2, r3, #4
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800652a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800652e:	f003 0304 	and.w	r3, r3, #4
 8006532:	2b00      	cmp	r3, #0
 8006534:	d011      	beq.n	800655a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00b      	beq.n	800655a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2204      	movs	r2, #4
 8006548:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006550:	f043 0202 	orr.w	r2, r3, #2
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006560:	2b00      	cmp	r3, #0
 8006562:	d006      	beq.n	8006572 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7fe ffa4 	bl	80054b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006578:	b29b      	uxth	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	f040 80a2 	bne.w	80066c4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006586:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800658e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006594:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065a4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80065a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80065aa:	e841 2300 	strex	r3, r2, [r1]
 80065ae:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80065b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1e4      	bne.n	8006580 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3308      	adds	r3, #8
 80065bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065c0:	e853 3f00 	ldrex	r3, [r3]
 80065c4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80065c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065cc:	f023 0301 	bic.w	r3, r3, #1
 80065d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3308      	adds	r3, #8
 80065da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065de:	66ba      	str	r2, [r7, #104]	; 0x68
 80065e0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80065e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80065ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e1      	bne.n	80065b6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a5f      	ldr	r2, [pc, #380]	; (8006788 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d021      	beq.n	8006654 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d01a      	beq.n	8006654 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006626:	e853 3f00 	ldrex	r3, [r3]
 800662a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800662c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800662e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006632:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006640:	657b      	str	r3, [r7, #84]	; 0x54
 8006642:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006646:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006648:	e841 2300 	strex	r3, r2, [r1]
 800664c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800664e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e4      	bne.n	800661e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006658:	2b01      	cmp	r3, #1
 800665a:	d130      	bne.n	80066be <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666a:	e853 3f00 	ldrex	r3, [r3]
 800666e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	f023 0310 	bic.w	r3, r3, #16
 8006676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006684:	643b      	str	r3, [r7, #64]	; 0x40
 8006686:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006688:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800668a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800668c:	e841 2300 	strex	r3, r2, [r1]
 8006690:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1e4      	bne.n	8006662 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	f003 0310 	and.w	r3, r3, #16
 80066a2:	2b10      	cmp	r3, #16
 80066a4:	d103      	bne.n	80066ae <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2210      	movs	r2, #16
 80066ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80066b4:	4619      	mov	r1, r3
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7fe ff04 	bl	80054c4 <HAL_UARTEx_RxEventCallback>
 80066bc:	e002      	b.n	80066c4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7fa fc64 	bl	8000f8c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80066c4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d006      	beq.n	80066da <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80066cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066d0:	f003 0320 	and.w	r3, r3, #32
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f47f aecf 	bne.w	8006478 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066e0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80066e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d049      	beq.n	8006780 <UART_RxISR_8BIT_FIFOEN+0x350>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80066f2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d242      	bcs.n	8006780 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3308      	adds	r3, #8
 8006700:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	61fb      	str	r3, [r7, #28]
   return(result);
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3308      	adds	r3, #8
 800671a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800671e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006720:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e3      	bne.n	80066fa <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a15      	ldr	r2, [pc, #84]	; (800678c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006736:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	e853 3f00 	ldrex	r3, [r3]
 8006744:	60bb      	str	r3, [r7, #8]
   return(result);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f043 0320 	orr.w	r3, r3, #32
 800674c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	6979      	ldr	r1, [r7, #20]
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	613b      	str	r3, [r7, #16]
   return(result);
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e4      	bne.n	8006738 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800676e:	e007      	b.n	8006780 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699a      	ldr	r2, [r3, #24]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0208 	orr.w	r2, r2, #8
 800677e:	619a      	str	r2, [r3, #24]
}
 8006780:	bf00      	nop
 8006782:	37b0      	adds	r7, #176	; 0xb0
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	40008000 	.word	0x40008000
 800678c:	080060c1 	.word	0x080060c1

08006790 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b0ae      	sub	sp, #184	; 0xb8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800679e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067c6:	2b22      	cmp	r3, #34	; 0x22
 80067c8:	f040 8186 	bne.w	8006ad8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80067d2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80067d6:	e129      	b.n	8006a2c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80067ea:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80067ee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80067f2:	4013      	ands	r3, r2
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006800:	1c9a      	adds	r2, r3, #2
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800680c:	b29b      	uxth	r3, r3
 800680e:	3b01      	subs	r3, #1
 8006810:	b29a      	uxth	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006822:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	2b00      	cmp	r3, #0
 800682c:	d053      	beq.n	80068d6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800682e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d011      	beq.n	800685e <UART_RxISR_16BIT_FIFOEN+0xce>
 800683a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800683e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00b      	beq.n	800685e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2201      	movs	r2, #1
 800684c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006854:	f043 0201 	orr.w	r2, r3, #1
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800685e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d011      	beq.n	800688e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800686a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00b      	beq.n	800688e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2202      	movs	r2, #2
 800687c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006884:	f043 0204 	orr.w	r2, r3, #4
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800688e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006892:	f003 0304 	and.w	r3, r3, #4
 8006896:	2b00      	cmp	r3, #0
 8006898:	d011      	beq.n	80068be <UART_RxISR_16BIT_FIFOEN+0x12e>
 800689a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00b      	beq.n	80068be <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2204      	movs	r2, #4
 80068ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b4:	f043 0202 	orr.w	r2, r3, #2
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d006      	beq.n	80068d6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7fe fdf2 	bl	80054b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f040 80a4 	bne.w	8006a2c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068ec:	e853 3f00 	ldrex	r3, [r3]
 80068f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	461a      	mov	r2, r3
 8006902:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006906:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800690a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800690e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e2      	bne.n	80068e4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3308      	adds	r3, #8
 8006924:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006928:	e853 3f00 	ldrex	r3, [r3]
 800692c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800692e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006934:	f023 0301 	bic.w	r3, r3, #1
 8006938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3308      	adds	r3, #8
 8006942:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006946:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006948:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800694c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e1      	bne.n	800691e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2220      	movs	r2, #32
 800695e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a5f      	ldr	r2, [pc, #380]	; (8006af0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d021      	beq.n	80069bc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d01a      	beq.n	80069bc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006996:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800699a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80069a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80069aa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069b0:	e841 2300 	strex	r3, r2, [r1]
 80069b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e4      	bne.n	8006986 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d130      	bne.n	8006a26 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069da:	f023 0310 	bic.w	r3, r3, #16
 80069de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	461a      	mov	r2, r3
 80069e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069ec:	647b      	str	r3, [r7, #68]	; 0x44
 80069ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e4      	bne.n	80069ca <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	f003 0310 	and.w	r3, r3, #16
 8006a0a:	2b10      	cmp	r3, #16
 8006a0c:	d103      	bne.n	8006a16 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2210      	movs	r2, #16
 8006a14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7fe fd50 	bl	80054c4 <HAL_UARTEx_RxEventCallback>
 8006a24:	e002      	b.n	8006a2c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7fa fab0 	bl	8000f8c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a2c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d006      	beq.n	8006a42 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006a34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a38:	f003 0320 	and.w	r3, r3, #32
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f47f aecb 	bne.w	80067d8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a48:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a4c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d049      	beq.n	8006ae8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a5a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d242      	bcs.n	8006ae8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3308      	adds	r3, #8
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	e853 3f00 	ldrex	r3, [r3]
 8006a70:	623b      	str	r3, [r7, #32]
   return(result);
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3308      	adds	r3, #8
 8006a82:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006a86:	633a      	str	r2, [r7, #48]	; 0x30
 8006a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e3      	bne.n	8006a62 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a15      	ldr	r2, [pc, #84]	; (8006af4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006a9e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	e853 3f00 	ldrex	r3, [r3]
 8006aac:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f043 0320 	orr.w	r3, r3, #32
 8006ab4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ac2:	61fb      	str	r3, [r7, #28]
 8006ac4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	69b9      	ldr	r1, [r7, #24]
 8006ac8:	69fa      	ldr	r2, [r7, #28]
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	617b      	str	r3, [r7, #20]
   return(result);
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e4      	bne.n	8006aa0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ad6:	e007      	b.n	8006ae8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0208 	orr.w	r2, r2, #8
 8006ae6:	619a      	str	r2, [r3, #24]
}
 8006ae8:	bf00      	nop
 8006aea:	37b8      	adds	r7, #184	; 0xb8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	40008000 	.word	0x40008000
 8006af4:	08006279 	.word	0x08006279

08006af8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bc80      	pop	{r7}
 8006b08:	4770      	bx	lr

08006b0a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006b12:	bf00      	nop
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bc80      	pop	{r7}
 8006b1a:	4770      	bx	lr

08006b1c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bc80      	pop	{r7}
 8006b2c:	4770      	bx	lr

08006b2e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b085      	sub	sp, #20
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d101      	bne.n	8006b44 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b40:	2302      	movs	r3, #2
 8006b42:	e027      	b.n	8006b94 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2224      	movs	r2, #36	; 0x24
 8006b50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0201 	bic.w	r2, r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b72:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2220      	movs	r2, #32
 8006b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bc80      	pop	{r7}
 8006b9c:	4770      	bx	lr

08006b9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d101      	bne.n	8006bb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	e02d      	b.n	8006c12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2224      	movs	r2, #36	; 0x24
 8006bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0201 	bic.w	r2, r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f850 	bl	8006c98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b084      	sub	sp, #16
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d101      	bne.n	8006c32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c2e:	2302      	movs	r3, #2
 8006c30:	e02d      	b.n	8006c8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2224      	movs	r2, #36	; 0x24
 8006c3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 0201 	bic.w	r2, r2, #1
 8006c58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f812 	bl	8006c98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
	...

08006c98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d108      	bne.n	8006cba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006cb8:	e031      	b.n	8006d1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006cba:	2308      	movs	r3, #8
 8006cbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006cbe:	2308      	movs	r3, #8
 8006cc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	0e5b      	lsrs	r3, r3, #25
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	f003 0307 	and.w	r3, r3, #7
 8006cd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	0f5b      	lsrs	r3, r3, #29
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	f003 0307 	and.w	r3, r3, #7
 8006ce0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ce2:	7bbb      	ldrb	r3, [r7, #14]
 8006ce4:	7b3a      	ldrb	r2, [r7, #12]
 8006ce6:	4910      	ldr	r1, [pc, #64]	; (8006d28 <UARTEx_SetNbDataToProcess+0x90>)
 8006ce8:	5c8a      	ldrb	r2, [r1, r2]
 8006cea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006cee:	7b3a      	ldrb	r2, [r7, #12]
 8006cf0:	490e      	ldr	r1, [pc, #56]	; (8006d2c <UARTEx_SetNbDataToProcess+0x94>)
 8006cf2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cf4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	7b7a      	ldrb	r2, [r7, #13]
 8006d04:	4908      	ldr	r1, [pc, #32]	; (8006d28 <UARTEx_SetNbDataToProcess+0x90>)
 8006d06:	5c8a      	ldrb	r2, [r1, r2]
 8006d08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d0c:	7b7a      	ldrb	r2, [r7, #13]
 8006d0e:	4907      	ldr	r1, [pc, #28]	; (8006d2c <UARTEx_SetNbDataToProcess+0x94>)
 8006d10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d12:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d1e:	bf00      	nop
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bc80      	pop	{r7}
 8006d26:	4770      	bx	lr
 8006d28:	0800bcd0 	.word	0x0800bcd0
 8006d2c:	0800bcd8 	.word	0x0800bcd8

08006d30 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8006d38:	4a24      	ldr	r2, [pc, #144]	; (8006dcc <RadioInit+0x9c>)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8006d3e:	4b24      	ldr	r3, [pc, #144]	; (8006dd0 <RadioInit+0xa0>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8006d44:	4b22      	ldr	r3, [pc, #136]	; (8006dd0 <RadioInit+0xa0>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8006d4a:	4b21      	ldr	r3, [pc, #132]	; (8006dd0 <RadioInit+0xa0>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8006d50:	4b1f      	ldr	r3, [pc, #124]	; (8006dd0 <RadioInit+0xa0>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8006d56:	481f      	ldr	r0, [pc, #124]	; (8006dd4 <RadioInit+0xa4>)
 8006d58:	f001 ff88 	bl	8008c6c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8006d5c:	4b1c      	ldr	r3, [pc, #112]	; (8006dd0 <RadioInit+0xa0>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8006d62:	4b1b      	ldr	r3, [pc, #108]	; (8006dd0 <RadioInit+0xa0>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8006d68:	f002 fa1c 	bl	80091a4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	2000      	movs	r0, #0
 8006d70:	f002 fde8 	bl	8009944 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8006d74:	2204      	movs	r2, #4
 8006d76:	2100      	movs	r1, #0
 8006d78:	2001      	movs	r0, #1
 8006d7a:	f002 fba5 	bl	80094c8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006d7e:	2300      	movs	r3, #0
 8006d80:	2200      	movs	r2, #0
 8006d82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d86:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006d8a:	f002 fad5 	bl	8009338 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8006d8e:	f000 fe91 	bl	8007ab4 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8006d92:	2300      	movs	r3, #0
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	4b10      	ldr	r3, [pc, #64]	; (8006dd8 <RadioInit+0xa8>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006d9e:	480f      	ldr	r0, [pc, #60]	; (8006ddc <RadioInit+0xac>)
 8006da0:	f003 fb32 	bl	800a408 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8006da4:	2300      	movs	r3, #0
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	4b0d      	ldr	r3, [pc, #52]	; (8006de0 <RadioInit+0xb0>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006db0:	480c      	ldr	r0, [pc, #48]	; (8006de4 <RadioInit+0xb4>)
 8006db2:	f003 fb29 	bl	800a408 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8006db6:	4809      	ldr	r0, [pc, #36]	; (8006ddc <RadioInit+0xac>)
 8006db8:	f003 fbca 	bl	800a550 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8006dbc:	4809      	ldr	r0, [pc, #36]	; (8006de4 <RadioInit+0xb4>)
 8006dbe:	f003 fbc7 	bl	800a550 <UTIL_TIMER_Stop>
}
 8006dc2:	bf00      	nop
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	200006b0 	.word	0x200006b0
 8006dd0:	200006b4 	.word	0x200006b4
 8006dd4:	08007ead 	.word	0x08007ead
 8006dd8:	08007e35 	.word	0x08007e35
 8006ddc:	20000710 	.word	0x20000710
 8006de0:	08007e49 	.word	0x08007e49
 8006de4:	20000728 	.word	0x20000728

08006de8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8006dec:	f001 ff86 	bl	8008cfc <SUBGRF_GetOperatingMode>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b07      	cmp	r3, #7
 8006df4:	d00a      	beq.n	8006e0c <RadioGetStatus+0x24>
 8006df6:	2b07      	cmp	r3, #7
 8006df8:	dc0a      	bgt.n	8006e10 <RadioGetStatus+0x28>
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d002      	beq.n	8006e04 <RadioGetStatus+0x1c>
 8006dfe:	2b05      	cmp	r3, #5
 8006e00:	d002      	beq.n	8006e08 <RadioGetStatus+0x20>
 8006e02:	e005      	b.n	8006e10 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8006e04:	2302      	movs	r3, #2
 8006e06:	e004      	b.n	8006e12 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e002      	b.n	8006e12 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e000      	b.n	8006e12 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8006e10:	2300      	movs	r3, #0
    }
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	bd80      	pop	{r7, pc}
	...

08006e18 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8006e22:	4a2a      	ldr	r2, [pc, #168]	; (8006ecc <RadioSetModem+0xb4>)
 8006e24:	79fb      	ldrb	r3, [r7, #7]
 8006e26:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8006e28:	79fb      	ldrb	r3, [r7, #7]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f003 f95d 	bl	800a0ea <RFW_SetRadioModem>
    switch( modem )
 8006e30:	79fb      	ldrb	r3, [r7, #7]
 8006e32:	2b05      	cmp	r3, #5
 8006e34:	d80e      	bhi.n	8006e54 <RadioSetModem+0x3c>
 8006e36:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <RadioSetModem+0x24>)
 8006e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3c:	08006e63 	.word	0x08006e63
 8006e40:	08006e71 	.word	0x08006e71
 8006e44:	08006e55 	.word	0x08006e55
 8006e48:	08006e97 	.word	0x08006e97
 8006e4c:	08006ea5 	.word	0x08006ea5
 8006e50:	08006eb3 	.word	0x08006eb3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8006e54:	2003      	movs	r0, #3
 8006e56:	f002 fb11 	bl	800947c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006e5a:	4b1c      	ldr	r3, [pc, #112]	; (8006ecc <RadioSetModem+0xb4>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	735a      	strb	r2, [r3, #13]
        break;
 8006e60:	e02f      	b.n	8006ec2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8006e62:	2000      	movs	r0, #0
 8006e64:	f002 fb0a 	bl	800947c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006e68:	4b18      	ldr	r3, [pc, #96]	; (8006ecc <RadioSetModem+0xb4>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	735a      	strb	r2, [r3, #13]
        break;
 8006e6e:	e028      	b.n	8006ec2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8006e70:	2001      	movs	r0, #1
 8006e72:	f002 fb03 	bl	800947c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8006e76:	4b15      	ldr	r3, [pc, #84]	; (8006ecc <RadioSetModem+0xb4>)
 8006e78:	7b5a      	ldrb	r2, [r3, #13]
 8006e7a:	4b14      	ldr	r3, [pc, #80]	; (8006ecc <RadioSetModem+0xb4>)
 8006e7c:	7b1b      	ldrb	r3, [r3, #12]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d01e      	beq.n	8006ec0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8006e82:	4b12      	ldr	r3, [pc, #72]	; (8006ecc <RadioSetModem+0xb4>)
 8006e84:	7b1a      	ldrb	r2, [r3, #12]
 8006e86:	4b11      	ldr	r3, [pc, #68]	; (8006ecc <RadioSetModem+0xb4>)
 8006e88:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8006e8a:	4b10      	ldr	r3, [pc, #64]	; (8006ecc <RadioSetModem+0xb4>)
 8006e8c:	7b5b      	ldrb	r3, [r3, #13]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 ff9a 	bl	8007dc8 <RadioSetPublicNetwork>
        }
        break;
 8006e94:	e014      	b.n	8006ec0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8006e96:	2002      	movs	r0, #2
 8006e98:	f002 faf0 	bl	800947c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006e9c:	4b0b      	ldr	r3, [pc, #44]	; (8006ecc <RadioSetModem+0xb4>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	735a      	strb	r2, [r3, #13]
        break;
 8006ea2:	e00e      	b.n	8006ec2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8006ea4:	2002      	movs	r0, #2
 8006ea6:	f002 fae9 	bl	800947c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006eaa:	4b08      	ldr	r3, [pc, #32]	; (8006ecc <RadioSetModem+0xb4>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	735a      	strb	r2, [r3, #13]
        break;
 8006eb0:	e007      	b.n	8006ec2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	f002 fae2 	bl	800947c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006eb8:	4b04      	ldr	r3, [pc, #16]	; (8006ecc <RadioSetModem+0xb4>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	735a      	strb	r2, [r3, #13]
        break;
 8006ebe:	e000      	b.n	8006ec2 <RadioSetModem+0xaa>
        break;
 8006ec0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8006ec2:	bf00      	nop
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	200006b4 	.word	0x200006b4

08006ed0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f002 fa89 	bl	80093f0 <SUBGRF_SetRfFrequency>
}
 8006ede:	bf00      	nop
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b090      	sub	sp, #64	; 0x40
 8006eea:	af0a      	add	r7, sp, #40	; 0x28
 8006eec:	60f8      	str	r0, [r7, #12]
 8006eee:	60b9      	str	r1, [r7, #8]
 8006ef0:	603b      	str	r3, [r7, #0]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8006efa:	2300      	movs	r3, #0
 8006efc:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8006efe:	2300      	movs	r3, #0
 8006f00:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8006f02:	f000 fdea 	bl	8007ada <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8006f06:	2000      	movs	r0, #0
 8006f08:	f7ff ff86 	bl	8006e18 <RadioSetModem>

    RadioSetChannel( freq );
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f7ff ffdf 	bl	8006ed0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8006f12:	2301      	movs	r3, #1
 8006f14:	9309      	str	r3, [sp, #36]	; 0x24
 8006f16:	2300      	movs	r3, #0
 8006f18:	9308      	str	r3, [sp, #32]
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	9307      	str	r3, [sp, #28]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	9306      	str	r3, [sp, #24]
 8006f22:	2300      	movs	r3, #0
 8006f24:	9305      	str	r3, [sp, #20]
 8006f26:	2300      	movs	r3, #0
 8006f28:	9304      	str	r3, [sp, #16]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	9303      	str	r3, [sp, #12]
 8006f2e:	2300      	movs	r3, #0
 8006f30:	9302      	str	r3, [sp, #8]
 8006f32:	2303      	movs	r3, #3
 8006f34:	9301      	str	r3, [sp, #4]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006f40:	68b9      	ldr	r1, [r7, #8]
 8006f42:	2000      	movs	r0, #0
 8006f44:	f000 f83c 	bl	8006fc0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8006f48:	2000      	movs	r0, #0
 8006f4a:	f000 fdcd 	bl	8007ae8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8006f4e:	f000 ff69 	bl	8007e24 <RadioGetWakeupTime>
 8006f52:	4603      	mov	r3, r0
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fa fd31 	bl	80019bc <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8006f5a:	f003 fb93 	bl	800a684 <UTIL_TIMER_GetCurrentTime>
 8006f5e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006f60:	e00d      	b.n	8006f7e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8006f62:	2000      	movs	r0, #0
 8006f64:	f000 feae 	bl	8007cc4 <RadioRssi>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8006f6c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006f70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	dd02      	ble.n	8006f7e <RadioIsChannelFree+0x98>
        {
            status = false;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	75fb      	strb	r3, [r7, #23]
            break;
 8006f7c:	e006      	b.n	8006f8c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006f7e:	6938      	ldr	r0, [r7, #16]
 8006f80:	f003 fb92 	bl	800a6a8 <UTIL_TIMER_GetElapsedTime>
 8006f84:	4602      	mov	r2, r0
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d8ea      	bhi.n	8006f62 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8006f8c:	f000 fda5 	bl	8007ada <RadioStandby>

    return status;
 8006f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	2100      	movs	r1, #0
 8006faa:	2000      	movs	r0, #0
 8006fac:	f002 f9c4 	bl	8009338 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8006fb0:	f001 ff75 	bl	8008e9e <SUBGRF_GetRandom>
 8006fb4:	6078      	str	r0, [r7, #4]

    return rnd;
 8006fb6:	687b      	ldr	r3, [r7, #4]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08a      	sub	sp, #40	; 0x28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60b9      	str	r1, [r7, #8]
 8006fc8:	607a      	str	r2, [r7, #4]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	4603      	mov	r3, r0
 8006fce:	73fb      	strb	r3, [r7, #15]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8006fd4:	4ab9      	ldr	r2, [pc, #740]	; (80072bc <RadioSetRxConfig+0x2fc>)
 8006fd6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8006fda:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8006fdc:	f003 f843 	bl	800a066 <RFW_DeInit>
    if( rxContinuous == true )
 8006fe0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8006fec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d004      	beq.n	8006ffe <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8006ff4:	4ab2      	ldr	r2, [pc, #712]	; (80072c0 <RadioSetRxConfig+0x300>)
 8006ff6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006ffa:	7013      	strb	r3, [r2, #0]
 8006ffc:	e002      	b.n	8007004 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8006ffe:	4bb0      	ldr	r3, [pc, #704]	; (80072c0 <RadioSetRxConfig+0x300>)
 8007000:	22ff      	movs	r2, #255	; 0xff
 8007002:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8007004:	7bfb      	ldrb	r3, [r7, #15]
 8007006:	2b05      	cmp	r3, #5
 8007008:	d009      	beq.n	800701e <RadioSetRxConfig+0x5e>
 800700a:	2b05      	cmp	r3, #5
 800700c:	f300 81d7 	bgt.w	80073be <RadioSetRxConfig+0x3fe>
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 80bf 	beq.w	8007194 <RadioSetRxConfig+0x1d4>
 8007016:	2b01      	cmp	r3, #1
 8007018:	f000 8124 	beq.w	8007264 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800701c:	e1cf      	b.n	80073be <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800701e:	2001      	movs	r0, #1
 8007020:	f002 f882 	bl	8009128 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007024:	4ba5      	ldr	r3, [pc, #660]	; (80072bc <RadioSetRxConfig+0x2fc>)
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800702c:	4aa3      	ldr	r2, [pc, #652]	; (80072bc <RadioSetRxConfig+0x2fc>)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8007032:	4ba2      	ldr	r3, [pc, #648]	; (80072bc <RadioSetRxConfig+0x2fc>)
 8007034:	2209      	movs	r2, #9
 8007036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800703a:	4ba0      	ldr	r3, [pc, #640]	; (80072bc <RadioSetRxConfig+0x2fc>)
 800703c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007040:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007042:	68b8      	ldr	r0, [r7, #8]
 8007044:	f002 ff42 	bl	8009ecc <SUBGRF_GetFskBandwidthRegValue>
 8007048:	4603      	mov	r3, r0
 800704a:	461a      	mov	r2, r3
 800704c:	4b9b      	ldr	r3, [pc, #620]	; (80072bc <RadioSetRxConfig+0x2fc>)
 800704e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007052:	4b9a      	ldr	r3, [pc, #616]	; (80072bc <RadioSetRxConfig+0x2fc>)
 8007054:	2200      	movs	r2, #0
 8007056:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007058:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	b29a      	uxth	r2, r3
 800705e:	4b97      	ldr	r3, [pc, #604]	; (80072bc <RadioSetRxConfig+0x2fc>)
 8007060:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8007062:	4b96      	ldr	r3, [pc, #600]	; (80072bc <RadioSetRxConfig+0x2fc>)
 8007064:	2200      	movs	r2, #0
 8007066:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8007068:	4b94      	ldr	r3, [pc, #592]	; (80072bc <RadioSetRxConfig+0x2fc>)
 800706a:	2210      	movs	r2, #16
 800706c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800706e:	4b93      	ldr	r3, [pc, #588]	; (80072bc <RadioSetRxConfig+0x2fc>)
 8007070:	2200      	movs	r2, #0
 8007072:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8007074:	4b91      	ldr	r3, [pc, #580]	; (80072bc <RadioSetRxConfig+0x2fc>)
 8007076:	2200      	movs	r2, #0
 8007078:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800707a:	4b91      	ldr	r3, [pc, #580]	; (80072c0 <RadioSetRxConfig+0x300>)
 800707c:	781a      	ldrb	r2, [r3, #0]
 800707e:	4b8f      	ldr	r3, [pc, #572]	; (80072bc <RadioSetRxConfig+0x2fc>)
 8007080:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007082:	4b8e      	ldr	r3, [pc, #568]	; (80072bc <RadioSetRxConfig+0x2fc>)
 8007084:	2201      	movs	r2, #1
 8007086:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8007088:	4b8c      	ldr	r3, [pc, #560]	; (80072bc <RadioSetRxConfig+0x2fc>)
 800708a:	2200      	movs	r2, #0
 800708c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800708e:	2005      	movs	r0, #5
 8007090:	f7ff fec2 	bl	8006e18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007094:	488b      	ldr	r0, [pc, #556]	; (80072c4 <RadioSetRxConfig+0x304>)
 8007096:	f002 fae5 	bl	8009664 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800709a:	488b      	ldr	r0, [pc, #556]	; (80072c8 <RadioSetRxConfig+0x308>)
 800709c:	f002 fbb4 	bl	8009808 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80070a0:	4a8a      	ldr	r2, [pc, #552]	; (80072cc <RadioSetRxConfig+0x30c>)
 80070a2:	f107 031c 	add.w	r3, r7, #28
 80070a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80070aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80070ae:	f107 031c 	add.w	r3, r7, #28
 80070b2:	4618      	mov	r0, r3
 80070b4:	f001 fe71 	bl	8008d9a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80070b8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80070bc:	f001 febc 	bl	8008e38 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80070c0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80070c4:	f000 fe1d 	bl	8007d02 <RadioRead>
 80070c8:	4603      	mov	r3, r0
 80070ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80070ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070d2:	f023 0310 	bic.w	r3, r3, #16
 80070d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80070da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070de:	4619      	mov	r1, r3
 80070e0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80070e4:	f000 fdfb 	bl	8007cde <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80070e8:	2104      	movs	r1, #4
 80070ea:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80070ee:	f000 fdf6 	bl	8007cde <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80070f2:	f640 009b 	movw	r0, #2203	; 0x89b
 80070f6:	f000 fe04 	bl	8007d02 <RadioRead>
 80070fa:	4603      	mov	r3, r0
 80070fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007104:	f023 031c 	bic.w	r3, r3, #28
 8007108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800710c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007110:	f043 0308 	orr.w	r3, r3, #8
 8007114:	b2db      	uxtb	r3, r3
 8007116:	4619      	mov	r1, r3
 8007118:	f640 009b 	movw	r0, #2203	; 0x89b
 800711c:	f000 fddf 	bl	8007cde <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8007120:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007124:	f000 fded 	bl	8007d02 <RadioRead>
 8007128:	4603      	mov	r3, r0
 800712a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800712e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007132:	f023 0318 	bic.w	r3, r3, #24
 8007136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800713a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800713e:	f043 0318 	orr.w	r3, r3, #24
 8007142:	b2db      	uxtb	r3, r3
 8007144:	4619      	mov	r1, r3
 8007146:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800714a:	f000 fdc8 	bl	8007cde <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800714e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007152:	f000 fdd6 	bl	8007d02 <RadioRead>
 8007156:	4603      	mov	r3, r0
 8007158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800715c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8007168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800716c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8007170:	b2db      	uxtb	r3, r3
 8007172:	4619      	mov	r1, r3
 8007174:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007178:	f000 fdb1 	bl	8007cde <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800717c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800717e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007182:	fb02 f303 	mul.w	r3, r2, r3
 8007186:	461a      	mov	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	fbb2 f3f3 	udiv	r3, r2, r3
 800718e:	4a4b      	ldr	r2, [pc, #300]	; (80072bc <RadioSetRxConfig+0x2fc>)
 8007190:	6093      	str	r3, [r2, #8]
            break;
 8007192:	e115      	b.n	80073c0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8007194:	2000      	movs	r0, #0
 8007196:	f001 ffc7 	bl	8009128 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800719a:	4b48      	ldr	r3, [pc, #288]	; (80072bc <RadioSetRxConfig+0x2fc>)
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80071a2:	4a46      	ldr	r2, [pc, #280]	; (80072bc <RadioSetRxConfig+0x2fc>)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80071a8:	4b44      	ldr	r3, [pc, #272]	; (80072bc <RadioSetRxConfig+0x2fc>)
 80071aa:	220b      	movs	r2, #11
 80071ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80071b0:	68b8      	ldr	r0, [r7, #8]
 80071b2:	f002 fe8b 	bl	8009ecc <SUBGRF_GetFskBandwidthRegValue>
 80071b6:	4603      	mov	r3, r0
 80071b8:	461a      	mov	r2, r3
 80071ba:	4b40      	ldr	r3, [pc, #256]	; (80072bc <RadioSetRxConfig+0x2fc>)
 80071bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80071c0:	4b3e      	ldr	r3, [pc, #248]	; (80072bc <RadioSetRxConfig+0x2fc>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80071c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80071c8:	00db      	lsls	r3, r3, #3
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	4b3b      	ldr	r3, [pc, #236]	; (80072bc <RadioSetRxConfig+0x2fc>)
 80071ce:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80071d0:	4b3a      	ldr	r3, [pc, #232]	; (80072bc <RadioSetRxConfig+0x2fc>)
 80071d2:	2204      	movs	r2, #4
 80071d4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80071d6:	4b39      	ldr	r3, [pc, #228]	; (80072bc <RadioSetRxConfig+0x2fc>)
 80071d8:	2218      	movs	r2, #24
 80071da:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80071dc:	4b37      	ldr	r3, [pc, #220]	; (80072bc <RadioSetRxConfig+0x2fc>)
 80071de:	2200      	movs	r2, #0
 80071e0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80071e2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80071e6:	f083 0301 	eor.w	r3, r3, #1
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	461a      	mov	r2, r3
 80071ee:	4b33      	ldr	r3, [pc, #204]	; (80072bc <RadioSetRxConfig+0x2fc>)
 80071f0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80071f2:	4b33      	ldr	r3, [pc, #204]	; (80072c0 <RadioSetRxConfig+0x300>)
 80071f4:	781a      	ldrb	r2, [r3, #0]
 80071f6:	4b31      	ldr	r3, [pc, #196]	; (80072bc <RadioSetRxConfig+0x2fc>)
 80071f8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80071fa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007202:	4b2e      	ldr	r3, [pc, #184]	; (80072bc <RadioSetRxConfig+0x2fc>)
 8007204:	22f2      	movs	r2, #242	; 0xf2
 8007206:	75da      	strb	r2, [r3, #23]
 8007208:	e002      	b.n	8007210 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800720a:	4b2c      	ldr	r3, [pc, #176]	; (80072bc <RadioSetRxConfig+0x2fc>)
 800720c:	2201      	movs	r2, #1
 800720e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007210:	4b2a      	ldr	r3, [pc, #168]	; (80072bc <RadioSetRxConfig+0x2fc>)
 8007212:	2201      	movs	r2, #1
 8007214:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007216:	f000 fc60 	bl	8007ada <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800721a:	2000      	movs	r0, #0
 800721c:	f7ff fdfc 	bl	8006e18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007220:	4828      	ldr	r0, [pc, #160]	; (80072c4 <RadioSetRxConfig+0x304>)
 8007222:	f002 fa1f 	bl	8009664 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007226:	4828      	ldr	r0, [pc, #160]	; (80072c8 <RadioSetRxConfig+0x308>)
 8007228:	f002 faee 	bl	8009808 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800722c:	4a28      	ldr	r2, [pc, #160]	; (80072d0 <RadioSetRxConfig+0x310>)
 800722e:	f107 0314 	add.w	r3, r7, #20
 8007232:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007236:	e883 0003 	stmia.w	r3, {r0, r1}
 800723a:	f107 0314 	add.w	r3, r7, #20
 800723e:	4618      	mov	r0, r3
 8007240:	f001 fdab 	bl	8008d9a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007244:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007248:	f001 fdf6 	bl	8008e38 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800724c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800724e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007252:	fb02 f303 	mul.w	r3, r2, r3
 8007256:	461a      	mov	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	fbb2 f3f3 	udiv	r3, r2, r3
 800725e:	4a17      	ldr	r2, [pc, #92]	; (80072bc <RadioSetRxConfig+0x2fc>)
 8007260:	6093      	str	r3, [r2, #8]
            break;
 8007262:	e0ad      	b.n	80073c0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8007264:	2000      	movs	r0, #0
 8007266:	f001 ff5f 	bl	8009128 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800726a:	4b14      	ldr	r3, [pc, #80]	; (80072bc <RadioSetRxConfig+0x2fc>)
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	b2da      	uxtb	r2, r3
 8007276:	4b11      	ldr	r3, [pc, #68]	; (80072bc <RadioSetRxConfig+0x2fc>)
 8007278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800727c:	4a15      	ldr	r2, [pc, #84]	; (80072d4 <RadioSetRxConfig+0x314>)
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	4413      	add	r3, r2
 8007282:	781a      	ldrb	r2, [r3, #0]
 8007284:	4b0d      	ldr	r3, [pc, #52]	; (80072bc <RadioSetRxConfig+0x2fc>)
 8007286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800728a:	4a0c      	ldr	r2, [pc, #48]	; (80072bc <RadioSetRxConfig+0x2fc>)
 800728c:	7bbb      	ldrb	r3, [r7, #14]
 800728e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d105      	bne.n	80072a4 <RadioSetRxConfig+0x2e4>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b0b      	cmp	r3, #11
 800729c:	d008      	beq.n	80072b0 <RadioSetRxConfig+0x2f0>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b0c      	cmp	r3, #12
 80072a2:	d005      	beq.n	80072b0 <RadioSetRxConfig+0x2f0>
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d116      	bne.n	80072d8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b0c      	cmp	r3, #12
 80072ae:	d113      	bne.n	80072d8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80072b0:	4b02      	ldr	r3, [pc, #8]	; (80072bc <RadioSetRxConfig+0x2fc>)
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80072b8:	e012      	b.n	80072e0 <RadioSetRxConfig+0x320>
 80072ba:	bf00      	nop
 80072bc:	200006b4 	.word	0x200006b4
 80072c0:	2000000d 	.word	0x2000000d
 80072c4:	200006ec 	.word	0x200006ec
 80072c8:	200006c2 	.word	0x200006c2
 80072cc:	0800bbc8 	.word	0x0800bbc8
 80072d0:	0800bbd0 	.word	0x0800bbd0
 80072d4:	0800bd6c 	.word	0x0800bd6c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80072d8:	4b3b      	ldr	r3, [pc, #236]	; (80073c8 <RadioSetRxConfig+0x408>)
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80072e0:	4b39      	ldr	r3, [pc, #228]	; (80073c8 <RadioSetRxConfig+0x408>)
 80072e2:	2201      	movs	r2, #1
 80072e4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80072e6:	4b38      	ldr	r3, [pc, #224]	; (80073c8 <RadioSetRxConfig+0x408>)
 80072e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072ec:	2b05      	cmp	r3, #5
 80072ee:	d004      	beq.n	80072fa <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80072f0:	4b35      	ldr	r3, [pc, #212]	; (80073c8 <RadioSetRxConfig+0x408>)
 80072f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80072f6:	2b06      	cmp	r3, #6
 80072f8:	d10a      	bne.n	8007310 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80072fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80072fc:	2b0b      	cmp	r3, #11
 80072fe:	d803      	bhi.n	8007308 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007300:	4b31      	ldr	r3, [pc, #196]	; (80073c8 <RadioSetRxConfig+0x408>)
 8007302:	220c      	movs	r2, #12
 8007304:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007306:	e006      	b.n	8007316 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007308:	4a2f      	ldr	r2, [pc, #188]	; (80073c8 <RadioSetRxConfig+0x408>)
 800730a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800730c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800730e:	e002      	b.n	8007316 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007310:	4a2d      	ldr	r2, [pc, #180]	; (80073c8 <RadioSetRxConfig+0x408>)
 8007312:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007314:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007316:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800731a:	4b2b      	ldr	r3, [pc, #172]	; (80073c8 <RadioSetRxConfig+0x408>)
 800731c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800731e:	4b2b      	ldr	r3, [pc, #172]	; (80073cc <RadioSetRxConfig+0x40c>)
 8007320:	781a      	ldrb	r2, [r3, #0]
 8007322:	4b29      	ldr	r3, [pc, #164]	; (80073c8 <RadioSetRxConfig+0x408>)
 8007324:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007326:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800732a:	4b27      	ldr	r3, [pc, #156]	; (80073c8 <RadioSetRxConfig+0x408>)
 800732c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007330:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8007334:	4b24      	ldr	r3, [pc, #144]	; (80073c8 <RadioSetRxConfig+0x408>)
 8007336:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800733a:	f000 fbce 	bl	8007ada <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800733e:	2001      	movs	r0, #1
 8007340:	f7ff fd6a 	bl	8006e18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007344:	4822      	ldr	r0, [pc, #136]	; (80073d0 <RadioSetRxConfig+0x410>)
 8007346:	f002 f98d 	bl	8009664 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800734a:	4822      	ldr	r0, [pc, #136]	; (80073d4 <RadioSetRxConfig+0x414>)
 800734c:	f002 fa5c 	bl	8009808 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8007350:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007352:	b2db      	uxtb	r3, r3
 8007354:	4618      	mov	r0, r3
 8007356:	f001 fef6 	bl	8009146 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800735a:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800735e:	f002 fbaf 	bl	8009ac0 <SUBGRF_ReadRegister>
 8007362:	4603      	mov	r3, r0
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	b2db      	uxtb	r3, r3
 800736a:	4619      	mov	r1, r3
 800736c:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8007370:	f002 fb92 	bl	8009a98 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8007374:	4b14      	ldr	r3, [pc, #80]	; (80073c8 <RadioSetRxConfig+0x408>)
 8007376:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800737a:	2b01      	cmp	r3, #1
 800737c:	d10d      	bne.n	800739a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800737e:	f240 7036 	movw	r0, #1846	; 0x736
 8007382:	f002 fb9d 	bl	8009ac0 <SUBGRF_ReadRegister>
 8007386:	4603      	mov	r3, r0
 8007388:	f023 0304 	bic.w	r3, r3, #4
 800738c:	b2db      	uxtb	r3, r3
 800738e:	4619      	mov	r1, r3
 8007390:	f240 7036 	movw	r0, #1846	; 0x736
 8007394:	f002 fb80 	bl	8009a98 <SUBGRF_WriteRegister>
 8007398:	e00c      	b.n	80073b4 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800739a:	f240 7036 	movw	r0, #1846	; 0x736
 800739e:	f002 fb8f 	bl	8009ac0 <SUBGRF_ReadRegister>
 80073a2:	4603      	mov	r3, r0
 80073a4:	f043 0304 	orr.w	r3, r3, #4
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	4619      	mov	r1, r3
 80073ac:	f240 7036 	movw	r0, #1846	; 0x736
 80073b0:	f002 fb72 	bl	8009a98 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80073b4:	4b04      	ldr	r3, [pc, #16]	; (80073c8 <RadioSetRxConfig+0x408>)
 80073b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073ba:	609a      	str	r2, [r3, #8]
            break;
 80073bc:	e000      	b.n	80073c0 <RadioSetRxConfig+0x400>
            break;
 80073be:	bf00      	nop
    }
}
 80073c0:	bf00      	nop
 80073c2:	3728      	adds	r7, #40	; 0x28
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	200006b4 	.word	0x200006b4
 80073cc:	2000000d 	.word	0x2000000d
 80073d0:	200006ec 	.word	0x200006ec
 80073d4:	200006c2 	.word	0x200006c2

080073d8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60ba      	str	r2, [r7, #8]
 80073e0:	607b      	str	r3, [r7, #4]
 80073e2:	4603      	mov	r3, r0
 80073e4:	73fb      	strb	r3, [r7, #15]
 80073e6:	460b      	mov	r3, r1
 80073e8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80073ea:	f002 fe3c 	bl	800a066 <RFW_DeInit>
    switch( modem )
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	2b04      	cmp	r3, #4
 80073f2:	f000 80c7 	beq.w	8007584 <RadioSetTxConfig+0x1ac>
 80073f6:	2b04      	cmp	r3, #4
 80073f8:	f300 80d6 	bgt.w	80075a8 <RadioSetTxConfig+0x1d0>
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <RadioSetTxConfig+0x2e>
 8007400:	2b01      	cmp	r3, #1
 8007402:	d059      	beq.n	80074b8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007404:	e0d0      	b.n	80075a8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007406:	4b77      	ldr	r3, [pc, #476]	; (80075e4 <RadioSetTxConfig+0x20c>)
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800740e:	4a75      	ldr	r2, [pc, #468]	; (80075e4 <RadioSetTxConfig+0x20c>)
 8007410:	6a3b      	ldr	r3, [r7, #32]
 8007412:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007414:	4b73      	ldr	r3, [pc, #460]	; (80075e4 <RadioSetTxConfig+0x20c>)
 8007416:	220b      	movs	r2, #11
 8007418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f002 fd55 	bl	8009ecc <SUBGRF_GetFskBandwidthRegValue>
 8007422:	4603      	mov	r3, r0
 8007424:	461a      	mov	r2, r3
 8007426:	4b6f      	ldr	r3, [pc, #444]	; (80075e4 <RadioSetTxConfig+0x20c>)
 8007428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800742c:	4a6d      	ldr	r2, [pc, #436]	; (80075e4 <RadioSetTxConfig+0x20c>)
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007432:	4b6c      	ldr	r3, [pc, #432]	; (80075e4 <RadioSetTxConfig+0x20c>)
 8007434:	2200      	movs	r2, #0
 8007436:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007438:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	b29a      	uxth	r2, r3
 800743e:	4b69      	ldr	r3, [pc, #420]	; (80075e4 <RadioSetTxConfig+0x20c>)
 8007440:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007442:	4b68      	ldr	r3, [pc, #416]	; (80075e4 <RadioSetTxConfig+0x20c>)
 8007444:	2204      	movs	r2, #4
 8007446:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8007448:	4b66      	ldr	r3, [pc, #408]	; (80075e4 <RadioSetTxConfig+0x20c>)
 800744a:	2218      	movs	r2, #24
 800744c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800744e:	4b65      	ldr	r3, [pc, #404]	; (80075e4 <RadioSetTxConfig+0x20c>)
 8007450:	2200      	movs	r2, #0
 8007452:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007454:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007458:	f083 0301 	eor.w	r3, r3, #1
 800745c:	b2db      	uxtb	r3, r3
 800745e:	461a      	mov	r2, r3
 8007460:	4b60      	ldr	r3, [pc, #384]	; (80075e4 <RadioSetTxConfig+0x20c>)
 8007462:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8007464:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007468:	2b00      	cmp	r3, #0
 800746a:	d003      	beq.n	8007474 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800746c:	4b5d      	ldr	r3, [pc, #372]	; (80075e4 <RadioSetTxConfig+0x20c>)
 800746e:	22f2      	movs	r2, #242	; 0xf2
 8007470:	75da      	strb	r2, [r3, #23]
 8007472:	e002      	b.n	800747a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007474:	4b5b      	ldr	r3, [pc, #364]	; (80075e4 <RadioSetTxConfig+0x20c>)
 8007476:	2201      	movs	r2, #1
 8007478:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800747a:	4b5a      	ldr	r3, [pc, #360]	; (80075e4 <RadioSetTxConfig+0x20c>)
 800747c:	2201      	movs	r2, #1
 800747e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007480:	f000 fb2b 	bl	8007ada <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8007484:	2000      	movs	r0, #0
 8007486:	f7ff fcc7 	bl	8006e18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800748a:	4857      	ldr	r0, [pc, #348]	; (80075e8 <RadioSetTxConfig+0x210>)
 800748c:	f002 f8ea 	bl	8009664 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007490:	4856      	ldr	r0, [pc, #344]	; (80075ec <RadioSetTxConfig+0x214>)
 8007492:	f002 f9b9 	bl	8009808 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007496:	4a56      	ldr	r2, [pc, #344]	; (80075f0 <RadioSetTxConfig+0x218>)
 8007498:	f107 0310 	add.w	r3, r7, #16
 800749c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80074a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80074a4:	f107 0310 	add.w	r3, r7, #16
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 fc76 	bl	8008d9a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80074ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80074b2:	f001 fcc1 	bl	8008e38 <SUBGRF_SetWhiteningSeed>
            break;
 80074b6:	e078      	b.n	80075aa <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80074b8:	4b4a      	ldr	r3, [pc, #296]	; (80075e4 <RadioSetTxConfig+0x20c>)
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	4b47      	ldr	r3, [pc, #284]	; (80075e4 <RadioSetTxConfig+0x20c>)
 80074c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80074ca:	4a4a      	ldr	r2, [pc, #296]	; (80075f4 <RadioSetTxConfig+0x21c>)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4413      	add	r3, r2
 80074d0:	781a      	ldrb	r2, [r3, #0]
 80074d2:	4b44      	ldr	r3, [pc, #272]	; (80075e4 <RadioSetTxConfig+0x20c>)
 80074d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80074d8:	4a42      	ldr	r2, [pc, #264]	; (80075e4 <RadioSetTxConfig+0x20c>)
 80074da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80074de:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d105      	bne.n	80074f4 <RadioSetTxConfig+0x11c>
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	2b0b      	cmp	r3, #11
 80074ec:	d008      	beq.n	8007500 <RadioSetTxConfig+0x128>
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	2b0c      	cmp	r3, #12
 80074f2:	d005      	beq.n	8007500 <RadioSetTxConfig+0x128>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d107      	bne.n	800750a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	2b0c      	cmp	r3, #12
 80074fe:	d104      	bne.n	800750a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007500:	4b38      	ldr	r3, [pc, #224]	; (80075e4 <RadioSetTxConfig+0x20c>)
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007508:	e003      	b.n	8007512 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800750a:	4b36      	ldr	r3, [pc, #216]	; (80075e4 <RadioSetTxConfig+0x20c>)
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007512:	4b34      	ldr	r3, [pc, #208]	; (80075e4 <RadioSetTxConfig+0x20c>)
 8007514:	2201      	movs	r2, #1
 8007516:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007518:	4b32      	ldr	r3, [pc, #200]	; (80075e4 <RadioSetTxConfig+0x20c>)
 800751a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800751e:	2b05      	cmp	r3, #5
 8007520:	d004      	beq.n	800752c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007522:	4b30      	ldr	r3, [pc, #192]	; (80075e4 <RadioSetTxConfig+0x20c>)
 8007524:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007528:	2b06      	cmp	r3, #6
 800752a:	d10a      	bne.n	8007542 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 800752c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800752e:	2b0b      	cmp	r3, #11
 8007530:	d803      	bhi.n	800753a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007532:	4b2c      	ldr	r3, [pc, #176]	; (80075e4 <RadioSetTxConfig+0x20c>)
 8007534:	220c      	movs	r2, #12
 8007536:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007538:	e006      	b.n	8007548 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800753a:	4a2a      	ldr	r2, [pc, #168]	; (80075e4 <RadioSetTxConfig+0x20c>)
 800753c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800753e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007540:	e002      	b.n	8007548 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007542:	4a28      	ldr	r2, [pc, #160]	; (80075e4 <RadioSetTxConfig+0x20c>)
 8007544:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007546:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007548:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800754c:	4b25      	ldr	r3, [pc, #148]	; (80075e4 <RadioSetTxConfig+0x20c>)
 800754e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007550:	4b29      	ldr	r3, [pc, #164]	; (80075f8 <RadioSetTxConfig+0x220>)
 8007552:	781a      	ldrb	r2, [r3, #0]
 8007554:	4b23      	ldr	r3, [pc, #140]	; (80075e4 <RadioSetTxConfig+0x20c>)
 8007556:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007558:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800755c:	4b21      	ldr	r3, [pc, #132]	; (80075e4 <RadioSetTxConfig+0x20c>)
 800755e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007562:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007566:	4b1f      	ldr	r3, [pc, #124]	; (80075e4 <RadioSetTxConfig+0x20c>)
 8007568:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800756c:	f000 fab5 	bl	8007ada <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8007570:	2001      	movs	r0, #1
 8007572:	f7ff fc51 	bl	8006e18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007576:	481c      	ldr	r0, [pc, #112]	; (80075e8 <RadioSetTxConfig+0x210>)
 8007578:	f002 f874 	bl	8009664 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800757c:	481b      	ldr	r0, [pc, #108]	; (80075ec <RadioSetTxConfig+0x214>)
 800757e:	f002 f943 	bl	8009808 <SUBGRF_SetPacketParams>
            break;
 8007582:	e012      	b.n	80075aa <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8007584:	2004      	movs	r0, #4
 8007586:	f7ff fc47 	bl	8006e18 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800758a:	4b16      	ldr	r3, [pc, #88]	; (80075e4 <RadioSetTxConfig+0x20c>)
 800758c:	2202      	movs	r2, #2
 800758e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8007592:	4a14      	ldr	r2, [pc, #80]	; (80075e4 <RadioSetTxConfig+0x20c>)
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007598:	4b12      	ldr	r3, [pc, #72]	; (80075e4 <RadioSetTxConfig+0x20c>)
 800759a:	2216      	movs	r2, #22
 800759c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80075a0:	4811      	ldr	r0, [pc, #68]	; (80075e8 <RadioSetTxConfig+0x210>)
 80075a2:	f002 f85f 	bl	8009664 <SUBGRF_SetModulationParams>
            break;
 80075a6:	e000      	b.n	80075aa <RadioSetTxConfig+0x1d2>
            break;
 80075a8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80075aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f002 fb8e 	bl	8009cd0 <SUBGRF_SetRfTxPower>
 80075b4:	4603      	mov	r3, r0
 80075b6:	461a      	mov	r2, r3
 80075b8:	4b0a      	ldr	r3, [pc, #40]	; (80075e4 <RadioSetTxConfig+0x20c>)
 80075ba:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80075be:	210e      	movs	r1, #14
 80075c0:	f640 101f 	movw	r0, #2335	; 0x91f
 80075c4:	f002 fa68 	bl	8009a98 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80075c8:	4b06      	ldr	r3, [pc, #24]	; (80075e4 <RadioSetTxConfig+0x20c>)
 80075ca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80075ce:	4618      	mov	r0, r3
 80075d0:	f002 fd5d 	bl	800a08e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80075d4:	4a03      	ldr	r2, [pc, #12]	; (80075e4 <RadioSetTxConfig+0x20c>)
 80075d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075d8:	6053      	str	r3, [r2, #4]
}
 80075da:	bf00      	nop
 80075dc:	3718      	adds	r7, #24
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	200006b4 	.word	0x200006b4
 80075e8:	200006ec 	.word	0x200006ec
 80075ec:	200006c2 	.word	0x200006c2
 80075f0:	0800bbd0 	.word	0x0800bbd0
 80075f4:	0800bd6c 	.word	0x0800bd6c
 80075f8:	2000000d 	.word	0x2000000d

080075fc <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
    return true;
 8007604:	2301      	movs	r3, #1
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	bc80      	pop	{r7}
 800760e:	4770      	bx	lr

08007610 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	4603      	mov	r3, r0
 8007618:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800761e:	79fb      	ldrb	r3, [r7, #7]
 8007620:	2b0a      	cmp	r3, #10
 8007622:	d83e      	bhi.n	80076a2 <RadioGetLoRaBandwidthInHz+0x92>
 8007624:	a201      	add	r2, pc, #4	; (adr r2, 800762c <RadioGetLoRaBandwidthInHz+0x1c>)
 8007626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762a:	bf00      	nop
 800762c:	08007659 	.word	0x08007659
 8007630:	08007669 	.word	0x08007669
 8007634:	08007679 	.word	0x08007679
 8007638:	08007689 	.word	0x08007689
 800763c:	08007691 	.word	0x08007691
 8007640:	08007697 	.word	0x08007697
 8007644:	0800769d 	.word	0x0800769d
 8007648:	080076a3 	.word	0x080076a3
 800764c:	08007661 	.word	0x08007661
 8007650:	08007671 	.word	0x08007671
 8007654:	08007681 	.word	0x08007681
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8007658:	f641 6384 	movw	r3, #7812	; 0x1e84
 800765c:	60fb      	str	r3, [r7, #12]
        break;
 800765e:	e020      	b.n	80076a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8007660:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8007664:	60fb      	str	r3, [r7, #12]
        break;
 8007666:	e01c      	b.n	80076a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8007668:	f643 5309 	movw	r3, #15625	; 0x3d09
 800766c:	60fb      	str	r3, [r7, #12]
        break;
 800766e:	e018      	b.n	80076a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8007670:	f245 1361 	movw	r3, #20833	; 0x5161
 8007674:	60fb      	str	r3, [r7, #12]
        break;
 8007676:	e014      	b.n	80076a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8007678:	f647 2312 	movw	r3, #31250	; 0x7a12
 800767c:	60fb      	str	r3, [r7, #12]
        break;
 800767e:	e010      	b.n	80076a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8007680:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8007684:	60fb      	str	r3, [r7, #12]
        break;
 8007686:	e00c      	b.n	80076a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8007688:	f24f 4324 	movw	r3, #62500	; 0xf424
 800768c:	60fb      	str	r3, [r7, #12]
        break;
 800768e:	e008      	b.n	80076a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8007690:	4b07      	ldr	r3, [pc, #28]	; (80076b0 <RadioGetLoRaBandwidthInHz+0xa0>)
 8007692:	60fb      	str	r3, [r7, #12]
        break;
 8007694:	e005      	b.n	80076a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8007696:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <RadioGetLoRaBandwidthInHz+0xa4>)
 8007698:	60fb      	str	r3, [r7, #12]
        break;
 800769a:	e002      	b.n	80076a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800769c:	4b06      	ldr	r3, [pc, #24]	; (80076b8 <RadioGetLoRaBandwidthInHz+0xa8>)
 800769e:	60fb      	str	r3, [r7, #12]
        break;
 80076a0:	bf00      	nop
    }

    return bandwidthInHz;
 80076a2:	68fb      	ldr	r3, [r7, #12]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bc80      	pop	{r7}
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	0001e848 	.word	0x0001e848
 80076b4:	0003d090 	.word	0x0003d090
 80076b8:	0007a120 	.word	0x0007a120

080076bc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	4608      	mov	r0, r1
 80076c6:	4611      	mov	r1, r2
 80076c8:	461a      	mov	r2, r3
 80076ca:	4603      	mov	r3, r0
 80076cc:	70fb      	strb	r3, [r7, #3]
 80076ce:	460b      	mov	r3, r1
 80076d0:	803b      	strh	r3, [r7, #0]
 80076d2:	4613      	mov	r3, r2
 80076d4:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80076d6:	883b      	ldrh	r3, [r7, #0]
 80076d8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80076da:	78ba      	ldrb	r2, [r7, #2]
 80076dc:	f082 0201 	eor.w	r2, r2, #1
 80076e0:	b2d2      	uxtb	r2, r2
 80076e2:	2a00      	cmp	r2, #0
 80076e4:	d001      	beq.n	80076ea <RadioGetGfskTimeOnAirNumerator+0x2e>
 80076e6:	2208      	movs	r2, #8
 80076e8:	e000      	b.n	80076ec <RadioGetGfskTimeOnAirNumerator+0x30>
 80076ea:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80076ec:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80076ee:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80076f2:	7c3b      	ldrb	r3, [r7, #16]
 80076f4:	7d39      	ldrb	r1, [r7, #20]
 80076f6:	2900      	cmp	r1, #0
 80076f8:	d001      	beq.n	80076fe <RadioGetGfskTimeOnAirNumerator+0x42>
 80076fa:	2102      	movs	r1, #2
 80076fc:	e000      	b.n	8007700 <RadioGetGfskTimeOnAirNumerator+0x44>
 80076fe:	2100      	movs	r1, #0
 8007700:	440b      	add	r3, r1
 8007702:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007704:	4413      	add	r3, r2
}
 8007706:	4618      	mov	r0, r3
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	bc80      	pop	{r7}
 800770e:	4770      	bx	lr

08007710 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007710:	b480      	push	{r7}
 8007712:	b08b      	sub	sp, #44	; 0x2c
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	4611      	mov	r1, r2
 800771c:	461a      	mov	r2, r3
 800771e:	460b      	mov	r3, r1
 8007720:	71fb      	strb	r3, [r7, #7]
 8007722:	4613      	mov	r3, r2
 8007724:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8007726:	79fb      	ldrb	r3, [r7, #7]
 8007728:	3304      	adds	r3, #4
 800772a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800772c:	2300      	movs	r3, #0
 800772e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2b05      	cmp	r3, #5
 8007736:	d002      	beq.n	800773e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b06      	cmp	r3, #6
 800773c:	d104      	bne.n	8007748 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800773e:	88bb      	ldrh	r3, [r7, #4]
 8007740:	2b0b      	cmp	r3, #11
 8007742:	d801      	bhi.n	8007748 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8007744:	230c      	movs	r3, #12
 8007746:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d105      	bne.n	800775a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	2b0b      	cmp	r3, #11
 8007752:	d008      	beq.n	8007766 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b0c      	cmp	r3, #12
 8007758:	d005      	beq.n	8007766 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d105      	bne.n	800776c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b0c      	cmp	r3, #12
 8007764:	d102      	bne.n	800776c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8007766:	2301      	movs	r3, #1
 8007768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800776c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007770:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8007772:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007776:	2a00      	cmp	r2, #0
 8007778:	d001      	beq.n	800777e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800777a:	2210      	movs	r2, #16
 800777c:	e000      	b.n	8007780 <RadioGetLoRaTimeOnAirNumerator+0x70>
 800777e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007780:	4413      	add	r3, r2
 8007782:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8007788:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800778a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800778e:	2a00      	cmp	r2, #0
 8007790:	d001      	beq.n	8007796 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8007792:	2200      	movs	r2, #0
 8007794:	e000      	b.n	8007798 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8007796:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8007798:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800779a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2b06      	cmp	r3, #6
 80077a0:	d803      	bhi.n	80077aa <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	623b      	str	r3, [r7, #32]
 80077a8:	e00e      	b.n	80077c8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	3308      	adds	r3, #8
 80077ae:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80077b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d004      	beq.n	80077c2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	3b02      	subs	r3, #2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	623b      	str	r3, [r7, #32]
 80077c0:	e002      	b.n	80077c8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	da01      	bge.n	80077d2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	4413      	add	r3, r2
 80077d8:	1e5a      	subs	r2, r3, #1
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	fb03 f202 	mul.w	r2, r3, r2
 80077e6:	88bb      	ldrh	r3, [r7, #4]
 80077e8:	4413      	add	r3, r2
    int32_t intermediate =
 80077ea:	330c      	adds	r3, #12
 80077ec:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b06      	cmp	r3, #6
 80077f2:	d802      	bhi.n	80077fa <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	3302      	adds	r3, #2
 80077f8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	3b02      	subs	r3, #2
 8007804:	fa02 f303 	lsl.w	r3, r2, r3
}
 8007808:	4618      	mov	r0, r3
 800780a:	372c      	adds	r7, #44	; 0x2c
 800780c:	46bd      	mov	sp, r7
 800780e:	bc80      	pop	{r7}
 8007810:	4770      	bx	lr
	...

08007814 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08a      	sub	sp, #40	; 0x28
 8007818:	af04      	add	r7, sp, #16
 800781a:	60b9      	str	r1, [r7, #8]
 800781c:	607a      	str	r2, [r7, #4]
 800781e:	461a      	mov	r2, r3
 8007820:	4603      	mov	r3, r0
 8007822:	73fb      	strb	r3, [r7, #15]
 8007824:	4613      	mov	r3, r2
 8007826:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800782c:	2301      	movs	r3, #1
 800782e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <RadioTimeOnAir+0x28>
 8007836:	2b01      	cmp	r3, #1
 8007838:	d017      	beq.n	800786a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800783a:	e035      	b.n	80078a8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800783c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8007840:	8c3a      	ldrh	r2, [r7, #32]
 8007842:	7bb9      	ldrb	r1, [r7, #14]
 8007844:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	4603      	mov	r3, r0
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7ff ff32 	bl	80076bc <RadioGetGfskTimeOnAirNumerator>
 8007858:	4603      	mov	r3, r0
 800785a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800785e:	fb02 f303 	mul.w	r3, r2, r3
 8007862:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	613b      	str	r3, [r7, #16]
        break;
 8007868:	e01e      	b.n	80078a8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800786a:	8c39      	ldrh	r1, [r7, #32]
 800786c:	7bba      	ldrb	r2, [r7, #14]
 800786e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007872:	9302      	str	r3, [sp, #8]
 8007874:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007878:	9301      	str	r3, [sp, #4]
 800787a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	460b      	mov	r3, r1
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	68b8      	ldr	r0, [r7, #8]
 8007886:	f7ff ff43 	bl	8007710 <RadioGetLoRaTimeOnAirNumerator>
 800788a:	4603      	mov	r3, r0
 800788c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007890:	fb02 f303 	mul.w	r3, r2, r3
 8007894:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8007896:	4a0a      	ldr	r2, [pc, #40]	; (80078c0 <RadioTimeOnAir+0xac>)
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4413      	add	r3, r2
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	4618      	mov	r0, r3
 80078a0:	f7ff feb6 	bl	8007610 <RadioGetLoRaBandwidthInHz>
 80078a4:	6138      	str	r0, [r7, #16]
        break;
 80078a6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	4413      	add	r3, r2
 80078ae:	1e5a      	subs	r2, r3, #1
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	0800bd6c 	.word	0x0800bd6c

080078c4 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	460b      	mov	r3, r1
 80078ce:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80078d0:	2300      	movs	r3, #0
 80078d2:	2200      	movs	r2, #0
 80078d4:	f240 2101 	movw	r1, #513	; 0x201
 80078d8:	f240 2001 	movw	r0, #513	; 0x201
 80078dc:	f001 fd2c 	bl	8009338 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80078e0:	4b70      	ldr	r3, [pc, #448]	; (8007aa4 <RadioSend+0x1e0>)
 80078e2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80078e6:	2101      	movs	r1, #1
 80078e8:	4618      	mov	r0, r3
 80078ea:	f002 f9c9 	bl	8009c80 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80078ee:	4b6d      	ldr	r3, [pc, #436]	; (8007aa4 <RadioSend+0x1e0>)
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d112      	bne.n	800791c <RadioSend+0x58>
 80078f6:	4b6b      	ldr	r3, [pc, #428]	; (8007aa4 <RadioSend+0x1e0>)
 80078f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078fc:	2b06      	cmp	r3, #6
 80078fe:	d10d      	bne.n	800791c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007900:	f640 0089 	movw	r0, #2185	; 0x889
 8007904:	f002 f8dc 	bl	8009ac0 <SUBGRF_ReadRegister>
 8007908:	4603      	mov	r3, r0
 800790a:	f023 0304 	bic.w	r3, r3, #4
 800790e:	b2db      	uxtb	r3, r3
 8007910:	4619      	mov	r1, r3
 8007912:	f640 0089 	movw	r0, #2185	; 0x889
 8007916:	f002 f8bf 	bl	8009a98 <SUBGRF_WriteRegister>
 800791a:	e00c      	b.n	8007936 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800791c:	f640 0089 	movw	r0, #2185	; 0x889
 8007920:	f002 f8ce 	bl	8009ac0 <SUBGRF_ReadRegister>
 8007924:	4603      	mov	r3, r0
 8007926:	f043 0304 	orr.w	r3, r3, #4
 800792a:	b2db      	uxtb	r3, r3
 800792c:	4619      	mov	r1, r3
 800792e:	f640 0089 	movw	r0, #2185	; 0x889
 8007932:	f002 f8b1 	bl	8009a98 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8007936:	4b5b      	ldr	r3, [pc, #364]	; (8007aa4 <RadioSend+0x1e0>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	2b04      	cmp	r3, #4
 800793c:	f200 80a2 	bhi.w	8007a84 <RadioSend+0x1c0>
 8007940:	a201      	add	r2, pc, #4	; (adr r2, 8007948 <RadioSend+0x84>)
 8007942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007946:	bf00      	nop
 8007948:	08007977 	.word	0x08007977
 800794c:	0800795d 	.word	0x0800795d
 8007950:	08007977 	.word	0x08007977
 8007954:	080079cd 	.word	0x080079cd
 8007958:	080079ed 	.word	0x080079ed
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800795c:	4a51      	ldr	r2, [pc, #324]	; (8007aa4 <RadioSend+0x1e0>)
 800795e:	78fb      	ldrb	r3, [r7, #3]
 8007960:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007962:	4851      	ldr	r0, [pc, #324]	; (8007aa8 <RadioSend+0x1e4>)
 8007964:	f001 ff50 	bl	8009808 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	2200      	movs	r2, #0
 800796c:	4619      	mov	r1, r3
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f001 fa00 	bl	8008d74 <SUBGRF_SendPayload>
            break;
 8007974:	e087      	b.n	8007a86 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8007976:	f002 fb7c 	bl	800a072 <RFW_Is_Init>
 800797a:	4603      	mov	r3, r0
 800797c:	2b01      	cmp	r3, #1
 800797e:	d118      	bne.n	80079b2 <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8007980:	f107 020d 	add.w	r2, r7, #13
 8007984:	78fb      	ldrb	r3, [r7, #3]
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f002 fb8a 	bl	800a0a2 <RFW_TransmitInit>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10c      	bne.n	80079ae <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8007994:	7b7a      	ldrb	r2, [r7, #13]
 8007996:	4b43      	ldr	r3, [pc, #268]	; (8007aa4 <RadioSend+0x1e0>)
 8007998:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800799a:	4843      	ldr	r0, [pc, #268]	; (8007aa8 <RadioSend+0x1e4>)
 800799c:	f001 ff34 	bl	8009808 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80079a0:	7b7b      	ldrb	r3, [r7, #13]
 80079a2:	2200      	movs	r2, #0
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f001 f9e4 	bl	8008d74 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80079ac:	e06b      	b.n	8007a86 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e073      	b.n	8007a9a <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80079b2:	4a3c      	ldr	r2, [pc, #240]	; (8007aa4 <RadioSend+0x1e0>)
 80079b4:	78fb      	ldrb	r3, [r7, #3]
 80079b6:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80079b8:	483b      	ldr	r0, [pc, #236]	; (8007aa8 <RadioSend+0x1e4>)
 80079ba:	f001 ff25 	bl	8009808 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80079be:	78fb      	ldrb	r3, [r7, #3]
 80079c0:	2200      	movs	r2, #0
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f001 f9d5 	bl	8008d74 <SUBGRF_SendPayload>
            break;
 80079ca:	e05c      	b.n	8007a86 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80079cc:	4b35      	ldr	r3, [pc, #212]	; (8007aa4 <RadioSend+0x1e0>)
 80079ce:	2202      	movs	r2, #2
 80079d0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80079d2:	4a34      	ldr	r2, [pc, #208]	; (8007aa4 <RadioSend+0x1e0>)
 80079d4:	78fb      	ldrb	r3, [r7, #3]
 80079d6:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80079d8:	4833      	ldr	r0, [pc, #204]	; (8007aa8 <RadioSend+0x1e4>)
 80079da:	f001 ff15 	bl	8009808 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80079de:	78fb      	ldrb	r3, [r7, #3]
 80079e0:	2200      	movs	r2, #0
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 f9c5 	bl	8008d74 <SUBGRF_SendPayload>
            break;
 80079ea:	e04c      	b.n	8007a86 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80079ec:	78fb      	ldrb	r3, [r7, #3]
 80079ee:	461a      	mov	r2, r3
 80079f0:	6879      	ldr	r1, [r7, #4]
 80079f2:	482e      	ldr	r0, [pc, #184]	; (8007aac <RadioSend+0x1e8>)
 80079f4:	f000 fc98 	bl	8008328 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80079f8:	4b2a      	ldr	r3, [pc, #168]	; (8007aa4 <RadioSend+0x1e0>)
 80079fa:	2202      	movs	r2, #2
 80079fc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80079fe:	78fb      	ldrb	r3, [r7, #3]
 8007a00:	3301      	adds	r3, #1
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	4b27      	ldr	r3, [pc, #156]	; (8007aa4 <RadioSend+0x1e0>)
 8007a06:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007a08:	4827      	ldr	r0, [pc, #156]	; (8007aa8 <RadioSend+0x1e4>)
 8007a0a:	f001 fefd 	bl	8009808 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8007a0e:	2100      	movs	r1, #0
 8007a10:	20f1      	movs	r0, #241	; 0xf1
 8007a12:	f000 f964 	bl	8007cde <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8007a16:	2100      	movs	r1, #0
 8007a18:	20f0      	movs	r0, #240	; 0xf0
 8007a1a:	f000 f960 	bl	8007cde <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8007a1e:	4b21      	ldr	r3, [pc, #132]	; (8007aa4 <RadioSend+0x1e0>)
 8007a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a22:	2b64      	cmp	r3, #100	; 0x64
 8007a24:	d108      	bne.n	8007a38 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8007a26:	2170      	movs	r1, #112	; 0x70
 8007a28:	20f3      	movs	r0, #243	; 0xf3
 8007a2a:	f000 f958 	bl	8007cde <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8007a2e:	211d      	movs	r1, #29
 8007a30:	20f2      	movs	r0, #242	; 0xf2
 8007a32:	f000 f954 	bl	8007cde <RadioWrite>
 8007a36:	e007      	b.n	8007a48 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8007a38:	21e1      	movs	r1, #225	; 0xe1
 8007a3a:	20f3      	movs	r0, #243	; 0xf3
 8007a3c:	f000 f94f 	bl	8007cde <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8007a40:	2104      	movs	r1, #4
 8007a42:	20f2      	movs	r0, #242	; 0xf2
 8007a44:	f000 f94b 	bl	8007cde <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8007a48:	78fb      	ldrb	r3, [r7, #3]
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	00db      	lsls	r3, r3, #3
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	3302      	adds	r3, #2
 8007a52:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8007a54:	89fb      	ldrh	r3, [r7, #14]
 8007a56:	0a1b      	lsrs	r3, r3, #8
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	20f4      	movs	r0, #244	; 0xf4
 8007a60:	f000 f93d 	bl	8007cde <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8007a64:	89fb      	ldrh	r3, [r7, #14]
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	4619      	mov	r1, r3
 8007a6a:	20f5      	movs	r0, #245	; 0xf5
 8007a6c:	f000 f937 	bl	8007cde <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8007a70:	78fb      	ldrb	r3, [r7, #3]
 8007a72:	3301      	adds	r3, #1
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	480b      	ldr	r0, [pc, #44]	; (8007aac <RadioSend+0x1e8>)
 8007a7e:	f001 f979 	bl	8008d74 <SUBGRF_SendPayload>
            break;
 8007a82:	e000      	b.n	8007a86 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007a84:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8007a86:	4b07      	ldr	r3, [pc, #28]	; (8007aa4 <RadioSend+0x1e0>)
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4808      	ldr	r0, [pc, #32]	; (8007ab0 <RadioSend+0x1ec>)
 8007a8e:	f002 fdcf 	bl	800a630 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8007a92:	4807      	ldr	r0, [pc, #28]	; (8007ab0 <RadioSend+0x1ec>)
 8007a94:	f002 fcee 	bl	800a474 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	200006b4 	.word	0x200006b4
 8007aa8:	200006c2 	.word	0x200006c2
 8007aac:	200005b0 	.word	0x200005b0
 8007ab0:	20000710 	.word	0x20000710

08007ab4 <RadioSleep>:

static void RadioSleep( void )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8007aba:	2300      	movs	r3, #0
 8007abc:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8007abe:	793b      	ldrb	r3, [r7, #4]
 8007ac0:	f043 0304 	orr.w	r3, r3, #4
 8007ac4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8007ac6:	7938      	ldrb	r0, [r7, #4]
 8007ac8:	f001 fa30 	bl	8008f2c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8007acc:	2002      	movs	r0, #2
 8007ace:	f7f9 ff75 	bl	80019bc <HAL_Delay>
}
 8007ad2:	bf00      	nop
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <RadioStandby>:

static void RadioStandby( void )
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8007ade:	2000      	movs	r0, #0
 8007ae0:	f001 fa56 	bl	8008f90 <SUBGRF_SetStandby>
}
 8007ae4:	bf00      	nop
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8007af0:	f002 fabf 	bl	800a072 <RFW_Is_Init>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d102      	bne.n	8007b00 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8007afa:	f002 fae2 	bl	800a0c2 <RFW_ReceiveInit>
 8007afe:	e007      	b.n	8007b10 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007b00:	2300      	movs	r3, #0
 8007b02:	2200      	movs	r2, #0
 8007b04:	f240 2162 	movw	r1, #610	; 0x262
 8007b08:	f240 2062 	movw	r0, #610	; 0x262
 8007b0c:	f001 fc14 	bl	8009338 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d006      	beq.n	8007b24 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	4811      	ldr	r0, [pc, #68]	; (8007b60 <RadioRx+0x78>)
 8007b1a:	f002 fd89 	bl	800a630 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8007b1e:	4810      	ldr	r0, [pc, #64]	; (8007b60 <RadioRx+0x78>)
 8007b20:	f002 fca8 	bl	800a474 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007b24:	4b0f      	ldr	r3, [pc, #60]	; (8007b64 <RadioRx+0x7c>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007b2a:	4b0e      	ldr	r3, [pc, #56]	; (8007b64 <RadioRx+0x7c>)
 8007b2c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007b30:	2100      	movs	r1, #0
 8007b32:	4618      	mov	r0, r3
 8007b34:	f002 f8a4 	bl	8009c80 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007b38:	4b0a      	ldr	r3, [pc, #40]	; (8007b64 <RadioRx+0x7c>)
 8007b3a:	785b      	ldrb	r3, [r3, #1]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d004      	beq.n	8007b4a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007b40:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007b44:	f001 fa60 	bl	8009008 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8007b48:	e005      	b.n	8007b56 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8007b4a:	4b06      	ldr	r3, [pc, #24]	; (8007b64 <RadioRx+0x7c>)
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	019b      	lsls	r3, r3, #6
 8007b50:	4618      	mov	r0, r3
 8007b52:	f001 fa59 	bl	8009008 <SUBGRF_SetRx>
}
 8007b56:	bf00      	nop
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000728 	.word	0x20000728
 8007b64:	200006b4 	.word	0x200006b4

08007b68 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8007b70:	f002 fa7f 	bl	800a072 <RFW_Is_Init>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d102      	bne.n	8007b80 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8007b7a:	f002 faa2 	bl	800a0c2 <RFW_ReceiveInit>
 8007b7e:	e007      	b.n	8007b90 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007b80:	2300      	movs	r3, #0
 8007b82:	2200      	movs	r2, #0
 8007b84:	f240 2162 	movw	r1, #610	; 0x262
 8007b88:	f240 2062 	movw	r0, #610	; 0x262
 8007b8c:	f001 fbd4 	bl	8009338 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d006      	beq.n	8007ba4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007b96:	6879      	ldr	r1, [r7, #4]
 8007b98:	4811      	ldr	r0, [pc, #68]	; (8007be0 <RadioRxBoosted+0x78>)
 8007b9a:	f002 fd49 	bl	800a630 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8007b9e:	4810      	ldr	r0, [pc, #64]	; (8007be0 <RadioRxBoosted+0x78>)
 8007ba0:	f002 fc68 	bl	800a474 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007ba4:	4b0f      	ldr	r3, [pc, #60]	; (8007be4 <RadioRxBoosted+0x7c>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007baa:	4b0e      	ldr	r3, [pc, #56]	; (8007be4 <RadioRxBoosted+0x7c>)
 8007bac:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f002 f864 	bl	8009c80 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007bb8:	4b0a      	ldr	r3, [pc, #40]	; (8007be4 <RadioRxBoosted+0x7c>)
 8007bba:	785b      	ldrb	r3, [r3, #1]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d004      	beq.n	8007bca <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8007bc0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007bc4:	f001 fa40 	bl	8009048 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8007bc8:	e005      	b.n	8007bd6 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8007bca:	4b06      	ldr	r3, [pc, #24]	; (8007be4 <RadioRxBoosted+0x7c>)
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	019b      	lsls	r3, r3, #6
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f001 fa39 	bl	8009048 <SUBGRF_SetRxBoosted>
}
 8007bd6:	bf00      	nop
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	20000728 	.word	0x20000728
 8007be4:	200006b4 	.word	0x200006b4

08007be8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	005a      	lsls	r2, r3, #1
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	4a0c      	ldr	r2, [pc, #48]	; (8007c2c <RadioSetRxDutyCycle+0x44>)
 8007bfc:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007bfe:	2300      	movs	r3, #0
 8007c00:	2200      	movs	r2, #0
 8007c02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c06:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007c0a:	f001 fb95 	bl	8009338 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007c0e:	4b07      	ldr	r3, [pc, #28]	; (8007c2c <RadioSetRxDutyCycle+0x44>)
 8007c10:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007c14:	2100      	movs	r1, #0
 8007c16:	4618      	mov	r0, r3
 8007c18:	f002 f832 	bl	8009c80 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f001 fa36 	bl	8009090 <SUBGRF_SetRxDutyCycle>
}
 8007c24:	bf00      	nop
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	200006b4 	.word	0x200006b4

08007c30 <RadioStartCad>:

static void RadioStartCad( void )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007c34:	4b09      	ldr	r3, [pc, #36]	; (8007c5c <RadioStartCad+0x2c>)
 8007c36:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f002 f81f 	bl	8009c80 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8007c42:	2300      	movs	r3, #0
 8007c44:	2200      	movs	r2, #0
 8007c46:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8007c4a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8007c4e:	f001 fb73 	bl	8009338 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8007c52:	f001 fa49 	bl	80090e8 <SUBGRF_SetCad>
}
 8007c56:	bf00      	nop
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	200006b4 	.word	0x200006b4

08007c60 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70fb      	strb	r3, [r7, #3]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8007c70:	883b      	ldrh	r3, [r7, #0]
 8007c72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c76:	fb02 f303 	mul.w	r3, r2, r3
 8007c7a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f001 fbb7 	bl	80093f0 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8007c82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f002 f822 	bl	8009cd0 <SUBGRF_SetRfTxPower>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007c90:	210e      	movs	r1, #14
 8007c92:	f640 101f 	movw	r0, #2335	; 0x91f
 8007c96:	f001 feff 	bl	8009a98 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8007c9a:	7afb      	ldrb	r3, [r7, #11]
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f001 ffee 	bl	8009c80 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8007ca4:	f001 fa2e 	bl	8009104 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8007ca8:	68f9      	ldr	r1, [r7, #12]
 8007caa:	4805      	ldr	r0, [pc, #20]	; (8007cc0 <RadioSetTxContinuousWave+0x60>)
 8007cac:	f002 fcc0 	bl	800a630 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8007cb0:	4803      	ldr	r0, [pc, #12]	; (8007cc0 <RadioSetTxContinuousWave+0x60>)
 8007cb2:	f002 fbdf 	bl	800a474 <UTIL_TIMER_Start>
}
 8007cb6:	bf00      	nop
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000710 	.word	0x20000710

08007cc4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8007cce:	f001 fe50 	bl	8009972 <SUBGRF_GetRssiInst>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	b21b      	sxth	r3, r3
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b082      	sub	sp, #8
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	460a      	mov	r2, r1
 8007ce8:	80fb      	strh	r3, [r7, #6]
 8007cea:	4613      	mov	r3, r2
 8007cec:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8007cee:	797a      	ldrb	r2, [r7, #5]
 8007cf0:	88fb      	ldrh	r3, [r7, #6]
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f001 fecf 	bl	8009a98 <SUBGRF_WriteRegister>
}
 8007cfa:	bf00      	nop
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	4603      	mov	r3, r0
 8007d0a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8007d0c:	88fb      	ldrh	r3, [r7, #6]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f001 fed6 	bl	8009ac0 <SUBGRF_ReadRegister>
 8007d14:	4603      	mov	r3, r0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	4603      	mov	r3, r0
 8007d26:	6039      	str	r1, [r7, #0]
 8007d28:	80fb      	strh	r3, [r7, #6]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8007d2e:	797b      	ldrb	r3, [r7, #5]
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	88fb      	ldrh	r3, [r7, #6]
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f001 fed6 	bl	8009ae8 <SUBGRF_WriteRegisters>
}
 8007d3c:	bf00      	nop
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	6039      	str	r1, [r7, #0]
 8007d4e:	80fb      	strh	r3, [r7, #6]
 8007d50:	4613      	mov	r3, r2
 8007d52:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8007d54:	797b      	ldrb	r3, [r7, #5]
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	88fb      	ldrh	r3, [r7, #6]
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f001 fee5 	bl	8009b2c <SUBGRF_ReadRegisters>
}
 8007d62:	bf00      	nop
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	4603      	mov	r3, r0
 8007d74:	460a      	mov	r2, r1
 8007d76:	71fb      	strb	r3, [r7, #7]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8007d7c:	79fb      	ldrb	r3, [r7, #7]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d10a      	bne.n	8007d98 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8007d82:	4a0e      	ldr	r2, [pc, #56]	; (8007dbc <RadioSetMaxPayloadLength+0x50>)
 8007d84:	79bb      	ldrb	r3, [r7, #6]
 8007d86:	7013      	strb	r3, [r2, #0]
 8007d88:	4b0c      	ldr	r3, [pc, #48]	; (8007dbc <RadioSetMaxPayloadLength+0x50>)
 8007d8a:	781a      	ldrb	r2, [r3, #0]
 8007d8c:	4b0c      	ldr	r3, [pc, #48]	; (8007dc0 <RadioSetMaxPayloadLength+0x54>)
 8007d8e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007d90:	480c      	ldr	r0, [pc, #48]	; (8007dc4 <RadioSetMaxPayloadLength+0x58>)
 8007d92:	f001 fd39 	bl	8009808 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8007d96:	e00d      	b.n	8007db4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8007d98:	4b09      	ldr	r3, [pc, #36]	; (8007dc0 <RadioSetMaxPayloadLength+0x54>)
 8007d9a:	7d5b      	ldrb	r3, [r3, #21]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d109      	bne.n	8007db4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8007da0:	4a06      	ldr	r2, [pc, #24]	; (8007dbc <RadioSetMaxPayloadLength+0x50>)
 8007da2:	79bb      	ldrb	r3, [r7, #6]
 8007da4:	7013      	strb	r3, [r2, #0]
 8007da6:	4b05      	ldr	r3, [pc, #20]	; (8007dbc <RadioSetMaxPayloadLength+0x50>)
 8007da8:	781a      	ldrb	r2, [r3, #0]
 8007daa:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <RadioSetMaxPayloadLength+0x54>)
 8007dac:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007dae:	4805      	ldr	r0, [pc, #20]	; (8007dc4 <RadioSetMaxPayloadLength+0x58>)
 8007db0:	f001 fd2a 	bl	8009808 <SUBGRF_SetPacketParams>
}
 8007db4:	bf00      	nop
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	2000000d 	.word	0x2000000d
 8007dc0:	200006b4 	.word	0x200006b4
 8007dc4:	200006c2 	.word	0x200006c2

08007dc8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	4603      	mov	r3, r0
 8007dd0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8007dd2:	4a13      	ldr	r2, [pc, #76]	; (8007e20 <RadioSetPublicNetwork+0x58>)
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	7313      	strb	r3, [r2, #12]
 8007dd8:	4b11      	ldr	r3, [pc, #68]	; (8007e20 <RadioSetPublicNetwork+0x58>)
 8007dda:	7b1a      	ldrb	r2, [r3, #12]
 8007ddc:	4b10      	ldr	r3, [pc, #64]	; (8007e20 <RadioSetPublicNetwork+0x58>)
 8007dde:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8007de0:	2001      	movs	r0, #1
 8007de2:	f7ff f819 	bl	8006e18 <RadioSetModem>
    if( enable == true )
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00a      	beq.n	8007e02 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8007dec:	2134      	movs	r1, #52	; 0x34
 8007dee:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8007df2:	f001 fe51 	bl	8009a98 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8007df6:	2144      	movs	r1, #68	; 0x44
 8007df8:	f240 7041 	movw	r0, #1857	; 0x741
 8007dfc:	f001 fe4c 	bl	8009a98 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8007e00:	e009      	b.n	8007e16 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8007e02:	2114      	movs	r1, #20
 8007e04:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8007e08:	f001 fe46 	bl	8009a98 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8007e0c:	2124      	movs	r1, #36	; 0x24
 8007e0e:	f240 7041 	movw	r0, #1857	; 0x741
 8007e12:	f001 fe41 	bl	8009a98 <SUBGRF_WriteRegister>
}
 8007e16:	bf00      	nop
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	200006b4 	.word	0x200006b4

08007e24 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8007e28:	f001 ff86 	bl	8009d38 <SUBGRF_GetRadioWakeUpTime>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	3303      	adds	r3, #3
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8007e3c:	f000 f80e 	bl	8007e5c <RadioOnTxTimeoutProcess>
}
 8007e40:	bf00      	nop
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8007e50:	f000 f818 	bl	8007e84 <RadioOnRxTimeoutProcess>
}
 8007e54:	bf00      	nop
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007e60:	4b07      	ldr	r3, [pc, #28]	; (8007e80 <RadioOnTxTimeoutProcess+0x24>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d008      	beq.n	8007e7a <RadioOnTxTimeoutProcess+0x1e>
 8007e68:	4b05      	ldr	r3, [pc, #20]	; (8007e80 <RadioOnTxTimeoutProcess+0x24>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8007e72:	4b03      	ldr	r3, [pc, #12]	; (8007e80 <RadioOnTxTimeoutProcess+0x24>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	4798      	blx	r3
    }
}
 8007e7a:	bf00      	nop
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	200006b0 	.word	0x200006b0

08007e84 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007e88:	4b07      	ldr	r3, [pc, #28]	; (8007ea8 <RadioOnRxTimeoutProcess+0x24>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d008      	beq.n	8007ea2 <RadioOnRxTimeoutProcess+0x1e>
 8007e90:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <RadioOnRxTimeoutProcess+0x24>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8007e9a:	4b03      	ldr	r3, [pc, #12]	; (8007ea8 <RadioOnRxTimeoutProcess+0x24>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	4798      	blx	r3
    }
}
 8007ea2:	bf00      	nop
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	200006b0 	.word	0x200006b0

08007eac <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8007eb6:	4a05      	ldr	r2, [pc, #20]	; (8007ecc <RadioOnDioIrq+0x20>)
 8007eb8:	88fb      	ldrh	r3, [r7, #6]
 8007eba:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8007ebe:	f000 f807 	bl	8007ed0 <RadioIrqProcess>
}
 8007ec2:	bf00      	nop
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	200006b4 	.word	0x200006b4

08007ed0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8007ed0:	b5b0      	push	{r4, r5, r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8007ede:	4ba5      	ldr	r3, [pc, #660]	; (8008174 <RadioIrqProcess+0x2a4>)
 8007ee0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ee8:	f000 810d 	beq.w	8008106 <RadioIrqProcess+0x236>
 8007eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef0:	f300 81c0 	bgt.w	8008274 <RadioIrqProcess+0x3a4>
 8007ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ef8:	f000 80f1 	beq.w	80080de <RadioIrqProcess+0x20e>
 8007efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f00:	f300 81b8 	bgt.w	8008274 <RadioIrqProcess+0x3a4>
 8007f04:	2b80      	cmp	r3, #128	; 0x80
 8007f06:	f000 80d6 	beq.w	80080b6 <RadioIrqProcess+0x1e6>
 8007f0a:	2b80      	cmp	r3, #128	; 0x80
 8007f0c:	f300 81b2 	bgt.w	8008274 <RadioIrqProcess+0x3a4>
 8007f10:	2b20      	cmp	r3, #32
 8007f12:	dc49      	bgt.n	8007fa8 <RadioIrqProcess+0xd8>
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f340 81ad 	ble.w	8008274 <RadioIrqProcess+0x3a4>
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	2b1f      	cmp	r3, #31
 8007f1e:	f200 81a9 	bhi.w	8008274 <RadioIrqProcess+0x3a4>
 8007f22:	a201      	add	r2, pc, #4	; (adr r2, 8007f28 <RadioIrqProcess+0x58>)
 8007f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f28:	08007fb1 	.word	0x08007fb1
 8007f2c:	08007feb 	.word	0x08007feb
 8007f30:	08008275 	.word	0x08008275
 8007f34:	08008191 	.word	0x08008191
 8007f38:	08008275 	.word	0x08008275
 8007f3c:	08008275 	.word	0x08008275
 8007f40:	08008275 	.word	0x08008275
 8007f44:	080081ff 	.word	0x080081ff
 8007f48:	08008275 	.word	0x08008275
 8007f4c:	08008275 	.word	0x08008275
 8007f50:	08008275 	.word	0x08008275
 8007f54:	08008275 	.word	0x08008275
 8007f58:	08008275 	.word	0x08008275
 8007f5c:	08008275 	.word	0x08008275
 8007f60:	08008275 	.word	0x08008275
 8007f64:	08008275 	.word	0x08008275
 8007f68:	08008275 	.word	0x08008275
 8007f6c:	08008275 	.word	0x08008275
 8007f70:	08008275 	.word	0x08008275
 8007f74:	08008275 	.word	0x08008275
 8007f78:	08008275 	.word	0x08008275
 8007f7c:	08008275 	.word	0x08008275
 8007f80:	08008275 	.word	0x08008275
 8007f84:	08008275 	.word	0x08008275
 8007f88:	08008275 	.word	0x08008275
 8007f8c:	08008275 	.word	0x08008275
 8007f90:	08008275 	.word	0x08008275
 8007f94:	08008275 	.word	0x08008275
 8007f98:	08008275 	.word	0x08008275
 8007f9c:	08008275 	.word	0x08008275
 8007fa0:	08008275 	.word	0x08008275
 8007fa4:	0800820f 	.word	0x0800820f
 8007fa8:	2b40      	cmp	r3, #64	; 0x40
 8007faa:	f000 814b 	beq.w	8008244 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8007fae:	e161      	b.n	8008274 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8007fb0:	4871      	ldr	r0, [pc, #452]	; (8008178 <RadioIrqProcess+0x2a8>)
 8007fb2:	f002 facd 	bl	800a550 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	f000 ffea 	bl	8008f90 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8007fbc:	f002 f860 	bl	800a080 <RFW_Is_LongPacketModeEnabled>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d101      	bne.n	8007fca <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8007fc6:	f002 f884 	bl	800a0d2 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8007fca:	4b6c      	ldr	r3, [pc, #432]	; (800817c <RadioIrqProcess+0x2ac>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 8152 	beq.w	8008278 <RadioIrqProcess+0x3a8>
 8007fd4:	4b69      	ldr	r3, [pc, #420]	; (800817c <RadioIrqProcess+0x2ac>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f000 814c 	beq.w	8008278 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8007fe0:	4b66      	ldr	r3, [pc, #408]	; (800817c <RadioIrqProcess+0x2ac>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4798      	blx	r3
        break;
 8007fe8:	e146      	b.n	8008278 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 8007fea:	4865      	ldr	r0, [pc, #404]	; (8008180 <RadioIrqProcess+0x2b0>)
 8007fec:	f002 fab0 	bl	800a550 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8007ff0:	4b60      	ldr	r3, [pc, #384]	; (8008174 <RadioIrqProcess+0x2a4>)
 8007ff2:	785b      	ldrb	r3, [r3, #1]
 8007ff4:	f083 0301 	eor.w	r3, r3, #1
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d014      	beq.n	8008028 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8007ffe:	2000      	movs	r0, #0
 8008000:	f000 ffc6 	bl	8008f90 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8008004:	2100      	movs	r1, #0
 8008006:	f640 1002 	movw	r0, #2306	; 0x902
 800800a:	f001 fd45 	bl	8009a98 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800800e:	f640 1044 	movw	r0, #2372	; 0x944
 8008012:	f001 fd55 	bl	8009ac0 <SUBGRF_ReadRegister>
 8008016:	4603      	mov	r3, r0
 8008018:	f043 0302 	orr.w	r3, r3, #2
 800801c:	b2db      	uxtb	r3, r3
 800801e:	4619      	mov	r1, r3
 8008020:	f640 1044 	movw	r0, #2372	; 0x944
 8008024:	f001 fd38 	bl	8009a98 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8008028:	1dfb      	adds	r3, r7, #7
 800802a:	22ff      	movs	r2, #255	; 0xff
 800802c:	4619      	mov	r1, r3
 800802e:	4855      	ldr	r0, [pc, #340]	; (8008184 <RadioIrqProcess+0x2b4>)
 8008030:	f000 fe7e 	bl	8008d30 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8008034:	4854      	ldr	r0, [pc, #336]	; (8008188 <RadioIrqProcess+0x2b8>)
 8008036:	f001 fcdd 	bl	80099f4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800803a:	4b50      	ldr	r3, [pc, #320]	; (800817c <RadioIrqProcess+0x2ac>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 811c 	beq.w	800827c <RadioIrqProcess+0x3ac>
 8008044:	4b4d      	ldr	r3, [pc, #308]	; (800817c <RadioIrqProcess+0x2ac>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 8116 	beq.w	800827c <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8008050:	4b48      	ldr	r3, [pc, #288]	; (8008174 <RadioIrqProcess+0x2a4>)
 8008052:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008056:	2b01      	cmp	r3, #1
 8008058:	d10e      	bne.n	8008078 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800805a:	4b48      	ldr	r3, [pc, #288]	; (800817c <RadioIrqProcess+0x2ac>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	689c      	ldr	r4, [r3, #8]
 8008060:	79fb      	ldrb	r3, [r7, #7]
 8008062:	b299      	uxth	r1, r3
 8008064:	4b43      	ldr	r3, [pc, #268]	; (8008174 <RadioIrqProcess+0x2a4>)
 8008066:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800806a:	b21a      	sxth	r2, r3
 800806c:	4b41      	ldr	r3, [pc, #260]	; (8008174 <RadioIrqProcess+0x2a4>)
 800806e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8008072:	4844      	ldr	r0, [pc, #272]	; (8008184 <RadioIrqProcess+0x2b4>)
 8008074:	47a0      	blx	r4
                break;
 8008076:	e01d      	b.n	80080b4 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8008078:	4b3e      	ldr	r3, [pc, #248]	; (8008174 <RadioIrqProcess+0x2a4>)
 800807a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800807c:	463a      	mov	r2, r7
 800807e:	4611      	mov	r1, r2
 8008080:	4618      	mov	r0, r3
 8008082:	f001 ff4b 	bl	8009f1c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8008086:	4b3d      	ldr	r3, [pc, #244]	; (800817c <RadioIrqProcess+0x2ac>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	689c      	ldr	r4, [r3, #8]
 800808c:	79fb      	ldrb	r3, [r7, #7]
 800808e:	b299      	uxth	r1, r3
 8008090:	4b38      	ldr	r3, [pc, #224]	; (8008174 <RadioIrqProcess+0x2a4>)
 8008092:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8008096:	b218      	sxth	r0, r3
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800809e:	4a3b      	ldr	r2, [pc, #236]	; (800818c <RadioIrqProcess+0x2bc>)
 80080a0:	fb82 5203 	smull	r5, r2, r2, r3
 80080a4:	1192      	asrs	r2, r2, #6
 80080a6:	17db      	asrs	r3, r3, #31
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	b25b      	sxtb	r3, r3
 80080ac:	4602      	mov	r2, r0
 80080ae:	4835      	ldr	r0, [pc, #212]	; (8008184 <RadioIrqProcess+0x2b4>)
 80080b0:	47a0      	blx	r4
                break;
 80080b2:	bf00      	nop
        break;
 80080b4:	e0e2      	b.n	800827c <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 80080b6:	2000      	movs	r0, #0
 80080b8:	f000 ff6a 	bl	8008f90 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80080bc:	4b2f      	ldr	r3, [pc, #188]	; (800817c <RadioIrqProcess+0x2ac>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 80dd 	beq.w	8008280 <RadioIrqProcess+0x3b0>
 80080c6:	4b2d      	ldr	r3, [pc, #180]	; (800817c <RadioIrqProcess+0x2ac>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 80d7 	beq.w	8008280 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 80080d2:	4b2a      	ldr	r3, [pc, #168]	; (800817c <RadioIrqProcess+0x2ac>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	2000      	movs	r0, #0
 80080da:	4798      	blx	r3
        break;
 80080dc:	e0d0      	b.n	8008280 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 80080de:	2000      	movs	r0, #0
 80080e0:	f000 ff56 	bl	8008f90 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80080e4:	4b25      	ldr	r3, [pc, #148]	; (800817c <RadioIrqProcess+0x2ac>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 80cb 	beq.w	8008284 <RadioIrqProcess+0x3b4>
 80080ee:	4b23      	ldr	r3, [pc, #140]	; (800817c <RadioIrqProcess+0x2ac>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 80c5 	beq.w	8008284 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 80080fa:	4b20      	ldr	r3, [pc, #128]	; (800817c <RadioIrqProcess+0x2ac>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	2001      	movs	r0, #1
 8008102:	4798      	blx	r3
        break;
 8008104:	e0be      	b.n	8008284 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8008106:	f000 fdf9 	bl	8008cfc <SUBGRF_GetOperatingMode>
 800810a:	4603      	mov	r3, r0
 800810c:	2b04      	cmp	r3, #4
 800810e:	d115      	bne.n	800813c <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8008110:	4819      	ldr	r0, [pc, #100]	; (8008178 <RadioIrqProcess+0x2a8>)
 8008112:	f002 fa1d 	bl	800a550 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008116:	2000      	movs	r0, #0
 8008118:	f000 ff3a 	bl	8008f90 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800811c:	4b17      	ldr	r3, [pc, #92]	; (800817c <RadioIrqProcess+0x2ac>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	f000 80b1 	beq.w	8008288 <RadioIrqProcess+0x3b8>
 8008126:	4b15      	ldr	r3, [pc, #84]	; (800817c <RadioIrqProcess+0x2ac>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	f000 80ab 	beq.w	8008288 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 8008132:	4b12      	ldr	r3, [pc, #72]	; (800817c <RadioIrqProcess+0x2ac>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	4798      	blx	r3
        break;
 800813a:	e0a5      	b.n	8008288 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800813c:	f000 fdde 	bl	8008cfc <SUBGRF_GetOperatingMode>
 8008140:	4603      	mov	r3, r0
 8008142:	2b05      	cmp	r3, #5
 8008144:	f040 80a0 	bne.w	8008288 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 8008148:	480d      	ldr	r0, [pc, #52]	; (8008180 <RadioIrqProcess+0x2b0>)
 800814a:	f002 fa01 	bl	800a550 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800814e:	2000      	movs	r0, #0
 8008150:	f000 ff1e 	bl	8008f90 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008154:	4b09      	ldr	r3, [pc, #36]	; (800817c <RadioIrqProcess+0x2ac>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 8095 	beq.w	8008288 <RadioIrqProcess+0x3b8>
 800815e:	4b07      	ldr	r3, [pc, #28]	; (800817c <RadioIrqProcess+0x2ac>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 808f 	beq.w	8008288 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 800816a:	4b04      	ldr	r3, [pc, #16]	; (800817c <RadioIrqProcess+0x2ac>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	4798      	blx	r3
        break;
 8008172:	e089      	b.n	8008288 <RadioIrqProcess+0x3b8>
 8008174:	200006b4 	.word	0x200006b4
 8008178:	20000710 	.word	0x20000710
 800817c:	200006b0 	.word	0x200006b0
 8008180:	20000728 	.word	0x20000728
 8008184:	200005b0 	.word	0x200005b0
 8008188:	200006d8 	.word	0x200006d8
 800818c:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8008190:	4b44      	ldr	r3, [pc, #272]	; (80082a4 <RadioIrqProcess+0x3d4>)
 8008192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008194:	2b00      	cmp	r3, #0
 8008196:	d079      	beq.n	800828c <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8008198:	4a43      	ldr	r2, [pc, #268]	; (80082a8 <RadioIrqProcess+0x3d8>)
 800819a:	4b42      	ldr	r3, [pc, #264]	; (80082a4 <RadioIrqProcess+0x3d4>)
 800819c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800819e:	0c1b      	lsrs	r3, r3, #16
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	4619      	mov	r1, r3
 80081a4:	f640 1003 	movw	r0, #2307	; 0x903
 80081a8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80081aa:	4a3f      	ldr	r2, [pc, #252]	; (80082a8 <RadioIrqProcess+0x3d8>)
 80081ac:	4b3d      	ldr	r3, [pc, #244]	; (80082a4 <RadioIrqProcess+0x3d4>)
 80081ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b0:	0a1b      	lsrs	r3, r3, #8
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	4619      	mov	r1, r3
 80081b6:	f640 1004 	movw	r0, #2308	; 0x904
 80081ba:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80081bc:	4a3a      	ldr	r2, [pc, #232]	; (80082a8 <RadioIrqProcess+0x3d8>)
 80081be:	4b39      	ldr	r3, [pc, #228]	; (80082a4 <RadioIrqProcess+0x3d4>)
 80081c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	4619      	mov	r1, r3
 80081c6:	f640 1005 	movw	r0, #2309	; 0x905
 80081ca:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80081cc:	4c36      	ldr	r4, [pc, #216]	; (80082a8 <RadioIrqProcess+0x3d8>)
 80081ce:	4b37      	ldr	r3, [pc, #220]	; (80082ac <RadioIrqProcess+0x3dc>)
 80081d0:	f640 1002 	movw	r0, #2306	; 0x902
 80081d4:	4798      	blx	r3
 80081d6:	4603      	mov	r3, r0
 80081d8:	f043 0301 	orr.w	r3, r3, #1
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	4619      	mov	r1, r3
 80081e0:	f640 1002 	movw	r0, #2306	; 0x902
 80081e4:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80081e6:	4b2f      	ldr	r3, [pc, #188]	; (80082a4 <RadioIrqProcess+0x3d4>)
 80081e8:	2200      	movs	r2, #0
 80081ea:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80081ec:	2300      	movs	r3, #0
 80081ee:	2200      	movs	r2, #0
 80081f0:	f240 2162 	movw	r1, #610	; 0x262
 80081f4:	f240 2062 	movw	r0, #610	; 0x262
 80081f8:	f001 f89e 	bl	8009338 <SUBGRF_SetDioIrqParams>
        break;
 80081fc:	e046      	b.n	800828c <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 80081fe:	f001 ff38 	bl	800a072 <RFW_Is_Init>
 8008202:	4603      	mov	r3, r0
 8008204:	2b01      	cmp	r3, #1
 8008206:	d143      	bne.n	8008290 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8008208:	f001 ff69 	bl	800a0de <RFW_ReceivePayload>
        break;
 800820c:	e040      	b.n	8008290 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 800820e:	4828      	ldr	r0, [pc, #160]	; (80082b0 <RadioIrqProcess+0x3e0>)
 8008210:	f002 f99e 	bl	800a550 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008214:	4b23      	ldr	r3, [pc, #140]	; (80082a4 <RadioIrqProcess+0x3d4>)
 8008216:	785b      	ldrb	r3, [r3, #1]
 8008218:	f083 0301 	eor.w	r3, r3, #1
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d002      	beq.n	8008228 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 8008222:	2000      	movs	r0, #0
 8008224:	f000 feb4 	bl	8008f90 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008228:	4b22      	ldr	r3, [pc, #136]	; (80082b4 <RadioIrqProcess+0x3e4>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d031      	beq.n	8008294 <RadioIrqProcess+0x3c4>
 8008230:	4b20      	ldr	r3, [pc, #128]	; (80082b4 <RadioIrqProcess+0x3e4>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d02c      	beq.n	8008294 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 800823a:	4b1e      	ldr	r3, [pc, #120]	; (80082b4 <RadioIrqProcess+0x3e4>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	4798      	blx	r3
        break;
 8008242:	e027      	b.n	8008294 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 8008244:	4b17      	ldr	r3, [pc, #92]	; (80082a4 <RadioIrqProcess+0x3d4>)
 8008246:	785b      	ldrb	r3, [r3, #1]
 8008248:	f083 0301 	eor.w	r3, r3, #1
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 8008252:	2000      	movs	r0, #0
 8008254:	f000 fe9c 	bl	8008f90 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8008258:	4b16      	ldr	r3, [pc, #88]	; (80082b4 <RadioIrqProcess+0x3e4>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d01b      	beq.n	8008298 <RadioIrqProcess+0x3c8>
 8008260:	4b14      	ldr	r3, [pc, #80]	; (80082b4 <RadioIrqProcess+0x3e4>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d016      	beq.n	8008298 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 800826a:	4b12      	ldr	r3, [pc, #72]	; (80082b4 <RadioIrqProcess+0x3e4>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	4798      	blx	r3
        break;
 8008272:	e011      	b.n	8008298 <RadioIrqProcess+0x3c8>
        break;
 8008274:	bf00      	nop
 8008276:	e010      	b.n	800829a <RadioIrqProcess+0x3ca>
        break;
 8008278:	bf00      	nop
 800827a:	e00e      	b.n	800829a <RadioIrqProcess+0x3ca>
        break;
 800827c:	bf00      	nop
 800827e:	e00c      	b.n	800829a <RadioIrqProcess+0x3ca>
        break;
 8008280:	bf00      	nop
 8008282:	e00a      	b.n	800829a <RadioIrqProcess+0x3ca>
        break;
 8008284:	bf00      	nop
 8008286:	e008      	b.n	800829a <RadioIrqProcess+0x3ca>
        break;
 8008288:	bf00      	nop
 800828a:	e006      	b.n	800829a <RadioIrqProcess+0x3ca>
        break;
 800828c:	bf00      	nop
 800828e:	e004      	b.n	800829a <RadioIrqProcess+0x3ca>
        break;
 8008290:	bf00      	nop
 8008292:	e002      	b.n	800829a <RadioIrqProcess+0x3ca>
        break;
 8008294:	bf00      	nop
 8008296:	e000      	b.n	800829a <RadioIrqProcess+0x3ca>
        break;
 8008298:	bf00      	nop
    }
}
 800829a:	bf00      	nop
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bdb0      	pop	{r4, r5, r7, pc}
 80082a2:	bf00      	nop
 80082a4:	200006b4 	.word	0x200006b4
 80082a8:	08007cdf 	.word	0x08007cdf
 80082ac:	08007d03 	.word	0x08007d03
 80082b0:	20000728 	.word	0x20000728
 80082b4:	200006b0 	.word	0x200006b0

080082b8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80082bc:	4b09      	ldr	r3, [pc, #36]	; (80082e4 <RadioTxPrbs+0x2c>)
 80082be:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80082c2:	2101      	movs	r1, #1
 80082c4:	4618      	mov	r0, r3
 80082c6:	f001 fcdb 	bl	8009c80 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80082ca:	4b07      	ldr	r3, [pc, #28]	; (80082e8 <RadioTxPrbs+0x30>)
 80082cc:	212d      	movs	r1, #45	; 0x2d
 80082ce:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80082d2:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80082d4:	f000 ff1f 	bl	8009116 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80082d8:	4804      	ldr	r0, [pc, #16]	; (80082ec <RadioTxPrbs+0x34>)
 80082da:	f000 fe75 	bl	8008fc8 <SUBGRF_SetTx>
}
 80082de:	bf00      	nop
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	200006b4 	.word	0x200006b4
 80082e8:	08007cdf 	.word	0x08007cdf
 80082ec:	000fffff 	.word	0x000fffff

080082f0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80082fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082fe:	4618      	mov	r0, r3
 8008300:	f001 fce6 	bl	8009cd0 <SUBGRF_SetRfTxPower>
 8008304:	4603      	mov	r3, r0
 8008306:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008308:	210e      	movs	r1, #14
 800830a:	f640 101f 	movw	r0, #2335	; 0x91f
 800830e:	f001 fbc3 	bl	8009a98 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	2101      	movs	r1, #1
 8008316:	4618      	mov	r0, r3
 8008318:	f001 fcb2 	bl	8009c80 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800831c:	f000 fef2 	bl	8009104 <SUBGRF_SetTxContinuousWave>
}
 8008320:	bf00      	nop
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8008328:	b480      	push	{r7}
 800832a:	b089      	sub	sp, #36	; 0x24
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	4613      	mov	r3, r2
 8008334:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800833e:	2300      	movs	r3, #0
 8008340:	61bb      	str	r3, [r7, #24]
 8008342:	e011      	b.n	8008368 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	4413      	add	r3, r2
 800834a:	781a      	ldrb	r2, [r3, #0]
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	68b9      	ldr	r1, [r7, #8]
 8008350:	440b      	add	r3, r1
 8008352:	43d2      	mvns	r2, r2
 8008354:	b2d2      	uxtb	r2, r2
 8008356:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	4413      	add	r3, r2
 800835e:	2200      	movs	r2, #0
 8008360:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	3301      	adds	r3, #1
 8008366:	61bb      	str	r3, [r7, #24]
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	69ba      	ldr	r2, [r7, #24]
 800836c:	429a      	cmp	r2, r3
 800836e:	dbe9      	blt.n	8008344 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8008370:	2300      	movs	r3, #0
 8008372:	61bb      	str	r3, [r7, #24]
 8008374:	e049      	b.n	800840a <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	425a      	negs	r2, r3
 800837a:	f003 0307 	and.w	r3, r3, #7
 800837e:	f002 0207 	and.w	r2, r2, #7
 8008382:	bf58      	it	pl
 8008384:	4253      	negpl	r3, r2
 8008386:	b2db      	uxtb	r3, r3
 8008388:	f1c3 0307 	rsb	r3, r3, #7
 800838c:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	2b00      	cmp	r3, #0
 8008392:	da00      	bge.n	8008396 <payload_integration+0x6e>
 8008394:	3307      	adds	r3, #7
 8008396:	10db      	asrs	r3, r3, #3
 8008398:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	3301      	adds	r3, #1
 800839e:	425a      	negs	r2, r3
 80083a0:	f003 0307 	and.w	r3, r3, #7
 80083a4:	f002 0207 	and.w	r2, r2, #7
 80083a8:	bf58      	it	pl
 80083aa:	4253      	negpl	r3, r2
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	f1c3 0307 	rsb	r3, r3, #7
 80083b2:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	3301      	adds	r3, #1
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	da00      	bge.n	80083be <payload_integration+0x96>
 80083bc:	3307      	adds	r3, #7
 80083be:	10db      	asrs	r3, r3, #3
 80083c0:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80083c2:	7dbb      	ldrb	r3, [r7, #22]
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	4413      	add	r3, r2
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	461a      	mov	r2, r3
 80083cc:	7dfb      	ldrb	r3, [r7, #23]
 80083ce:	fa42 f303 	asr.w	r3, r2, r3
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80083da:	7ffa      	ldrb	r2, [r7, #31]
 80083dc:	7cfb      	ldrb	r3, [r7, #19]
 80083de:	4053      	eors	r3, r2
 80083e0:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80083e2:	7d3b      	ldrb	r3, [r7, #20]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	4413      	add	r3, r2
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	b25a      	sxtb	r2, r3
 80083ec:	7ff9      	ldrb	r1, [r7, #31]
 80083ee:	7d7b      	ldrb	r3, [r7, #21]
 80083f0:	fa01 f303 	lsl.w	r3, r1, r3
 80083f4:	b25b      	sxtb	r3, r3
 80083f6:	4313      	orrs	r3, r2
 80083f8:	b259      	sxtb	r1, r3
 80083fa:	7d3b      	ldrb	r3, [r7, #20]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	4413      	add	r3, r2
 8008400:	b2ca      	uxtb	r2, r1
 8008402:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	3301      	adds	r3, #1
 8008408:	61bb      	str	r3, [r7, #24]
 800840a:	79fb      	ldrb	r3, [r7, #7]
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	429a      	cmp	r2, r3
 8008412:	dbb0      	blt.n	8008376 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8008414:	7ffb      	ldrb	r3, [r7, #31]
 8008416:	01db      	lsls	r3, r3, #7
 8008418:	b25a      	sxtb	r2, r3
 800841a:	7ffb      	ldrb	r3, [r7, #31]
 800841c:	019b      	lsls	r3, r3, #6
 800841e:	b25b      	sxtb	r3, r3
 8008420:	4313      	orrs	r3, r2
 8008422:	b25b      	sxtb	r3, r3
 8008424:	7ffa      	ldrb	r2, [r7, #31]
 8008426:	2a00      	cmp	r2, #0
 8008428:	d101      	bne.n	800842e <payload_integration+0x106>
 800842a:	2220      	movs	r2, #32
 800842c:	e000      	b.n	8008430 <payload_integration+0x108>
 800842e:	2200      	movs	r2, #0
 8008430:	4313      	orrs	r3, r2
 8008432:	b259      	sxtb	r1, r3
 8008434:	79fb      	ldrb	r3, [r7, #7]
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	4413      	add	r3, r2
 800843a:	b2ca      	uxtb	r2, r1
 800843c:	701a      	strb	r2, [r3, #0]
}
 800843e:	bf00      	nop
 8008440:	3724      	adds	r7, #36	; 0x24
 8008442:	46bd      	mov	sp, r7
 8008444:	bc80      	pop	{r7}
 8008446:	4770      	bx	lr

08008448 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b08c      	sub	sp, #48	; 0x30
 800844c:	af00      	add	r7, sp, #0
 800844e:	60b9      	str	r1, [r7, #8]
 8008450:	607a      	str	r2, [r7, #4]
 8008452:	603b      	str	r3, [r7, #0]
 8008454:	4603      	mov	r3, r0
 8008456:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8008458:	2300      	movs	r3, #0
 800845a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 800845c:	2300      	movs	r3, #0
 800845e:	623b      	str	r3, [r7, #32]
 8008460:	2300      	movs	r3, #0
 8008462:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008464:	f001 fdff 	bl	800a066 <RFW_DeInit>

    if( rxContinuous != 0 )
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800846e:	2300      	movs	r3, #0
 8008470:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	bf14      	ite	ne
 8008478:	2301      	movne	r3, #1
 800847a:	2300      	moveq	r3, #0
 800847c:	b2da      	uxtb	r2, r3
 800847e:	4ba3      	ldr	r3, [pc, #652]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 8008480:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8008482:	7bfb      	ldrb	r3, [r7, #15]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d003      	beq.n	8008490 <RadioSetRxGenericConfig+0x48>
 8008488:	2b01      	cmp	r3, #1
 800848a:	f000 80dc 	beq.w	8008646 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800848e:	e194      	b.n	80087ba <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d003      	beq.n	80084a0 <RadioSetRxGenericConfig+0x58>
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d102      	bne.n	80084a6 <RadioSetRxGenericConfig+0x5e>
            return -1;
 80084a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084a4:	e18a      	b.n	80087bc <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	7f9b      	ldrb	r3, [r3, #30]
 80084aa:	2b08      	cmp	r3, #8
 80084ac:	d902      	bls.n	80084b4 <RadioSetRxGenericConfig+0x6c>
            return -1;
 80084ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084b2:	e183      	b.n	80087bc <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	6919      	ldr	r1, [r3, #16]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	7f9b      	ldrb	r3, [r3, #30]
 80084bc:	b29a      	uxth	r2, r3
 80084be:	f107 0320 	add.w	r3, r7, #32
 80084c2:	4618      	mov	r0, r3
 80084c4:	f001 ff66 	bl	800a394 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	bf14      	ite	ne
 80084d0:	2301      	movne	r3, #1
 80084d2:	2300      	moveq	r3, #0
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 fe26 	bl	8009128 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80084dc:	4b8b      	ldr	r3, [pc, #556]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	4a88      	ldr	r2, [pc, #544]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 80084ea:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	f893 2020 	ldrb.w	r2, [r3, #32]
 80084f2:	4b86      	ldr	r3, [pc, #536]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 80084f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f001 fce5 	bl	8009ecc <SUBGRF_GetFskBandwidthRegValue>
 8008502:	4603      	mov	r3, r0
 8008504:	461a      	mov	r2, r3
 8008506:	4b81      	ldr	r3, [pc, #516]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 8008508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800850c:	4b7f      	ldr	r3, [pc, #508]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 800850e:	2200      	movs	r2, #0
 8008510:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	b29b      	uxth	r3, r3
 8008518:	00db      	lsls	r3, r3, #3
 800851a:	b29a      	uxth	r2, r3
 800851c:	4b7b      	ldr	r3, [pc, #492]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 800851e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	7fda      	ldrb	r2, [r3, #31]
 8008524:	4b79      	ldr	r3, [pc, #484]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 8008526:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	7f9b      	ldrb	r3, [r3, #30]
 800852c:	00db      	lsls	r3, r3, #3
 800852e:	b2da      	uxtb	r2, r3
 8008530:	4b76      	ldr	r3, [pc, #472]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 8008532:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800853a:	4b74      	ldr	r3, [pc, #464]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 800853c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008544:	2b00      	cmp	r3, #0
 8008546:	d105      	bne.n	8008554 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	695b      	ldr	r3, [r3, #20]
 800854c:	b2da      	uxtb	r2, r3
 800854e:	4b6f      	ldr	r3, [pc, #444]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 8008550:	759a      	strb	r2, [r3, #22]
 8008552:	e00b      	b.n	800856c <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800855a:	2b02      	cmp	r3, #2
 800855c:	d103      	bne.n	8008566 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800855e:	4b6b      	ldr	r3, [pc, #428]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 8008560:	22ff      	movs	r2, #255	; 0xff
 8008562:	759a      	strb	r2, [r3, #22]
 8008564:	e002      	b.n	800856c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008566:	4b69      	ldr	r3, [pc, #420]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 8008568:	22ff      	movs	r2, #255	; 0xff
 800856a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008572:	2b02      	cmp	r3, #2
 8008574:	d004      	beq.n	8008580 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800857c:	2b02      	cmp	r3, #2
 800857e:	d12d      	bne.n	80085dc <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008586:	2bf1      	cmp	r3, #241	; 0xf1
 8008588:	d00c      	beq.n	80085a4 <RadioSetRxGenericConfig+0x15c>
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008590:	2bf2      	cmp	r3, #242	; 0xf2
 8008592:	d007      	beq.n	80085a4 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800859a:	2b01      	cmp	r3, #1
 800859c:	d002      	beq.n	80085a4 <RadioSetRxGenericConfig+0x15c>
                return -1;
 800859e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085a2:	e10b      	b.n	80087bc <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 80085a4:	2300      	movs	r3, #0
 80085a6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80085ac:	4b58      	ldr	r3, [pc, #352]	; (8008710 <RadioSetRxGenericConfig+0x2c8>)
 80085ae:	6819      	ldr	r1, [r3, #0]
 80085b0:	f107 0314 	add.w	r3, r7, #20
 80085b4:	4a57      	ldr	r2, [pc, #348]	; (8008714 <RadioSetRxGenericConfig+0x2cc>)
 80085b6:	4618      	mov	r0, r3
 80085b8:	f001 fd48 	bl	800a04c <RFW_Init>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d002      	beq.n	80085c8 <RadioSetRxGenericConfig+0x180>
                return -1;
 80085c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085c6:	e0f9      	b.n	80087bc <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80085c8:	4b50      	ldr	r3, [pc, #320]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80085ce:	4b4f      	ldr	r3, [pc, #316]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 80085d0:	2201      	movs	r2, #1
 80085d2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80085d4:	4b4d      	ldr	r3, [pc, #308]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	755a      	strb	r2, [r3, #21]
        {
 80085da:	e00e      	b.n	80085fa <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80085e2:	4b4a      	ldr	r3, [pc, #296]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 80085e4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80085ec:	4b47      	ldr	r3, [pc, #284]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 80085ee:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80085f6:	4b45      	ldr	r3, [pc, #276]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 80085f8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80085fa:	f7ff fa6e 	bl	8007ada <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80085fe:	2000      	movs	r0, #0
 8008600:	f7fe fc0a 	bl	8006e18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008604:	4844      	ldr	r0, [pc, #272]	; (8008718 <RadioSetRxGenericConfig+0x2d0>)
 8008606:	f001 f82d 	bl	8009664 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800860a:	4844      	ldr	r0, [pc, #272]	; (800871c <RadioSetRxGenericConfig+0x2d4>)
 800860c:	f001 f8fc 	bl	8009808 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008610:	f107 0320 	add.w	r3, r7, #32
 8008614:	4618      	mov	r0, r3
 8008616:	f000 fbc0 	bl	8008d9a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	8b9b      	ldrh	r3, [r3, #28]
 800861e:	4618      	mov	r0, r3
 8008620:	f000 fc0a 	bl	8008e38 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	8b1b      	ldrh	r3, [r3, #24]
 8008628:	4618      	mov	r0, r3
 800862a:	f000 fbe5 	bl	8008df8 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008634:	fb03 f202 	mul.w	r2, r3, r2
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008640:	4a32      	ldr	r2, [pc, #200]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 8008642:	6093      	str	r3, [r2, #8]
        break;
 8008644:	e0b9      	b.n	80087ba <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800864a:	2b00      	cmp	r3, #0
 800864c:	d102      	bne.n	8008654 <RadioSetRxGenericConfig+0x20c>
            return -1;
 800864e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008652:	e0b3      	b.n	80087bc <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800865a:	2b01      	cmp	r3, #1
 800865c:	d104      	bne.n	8008668 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008666:	e002      	b.n	800866e <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8008668:	23ff      	movs	r3, #255	; 0xff
 800866a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008672:	2b00      	cmp	r3, #0
 8008674:	bf14      	ite	ne
 8008676:	2301      	movne	r3, #1
 8008678:	2300      	moveq	r3, #0
 800867a:	b2db      	uxtb	r3, r3
 800867c:	4618      	mov	r0, r3
 800867e:	f000 fd53 	bl	8009128 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	b2db      	uxtb	r3, r3
 8008686:	4618      	mov	r0, r3
 8008688:	f000 fd5d 	bl	8009146 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800868c:	4b1f      	ldr	r3, [pc, #124]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800869a:	4b1c      	ldr	r3, [pc, #112]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 800869c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80086a6:	4b19      	ldr	r3, [pc, #100]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 80086a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80086b2:	4b16      	ldr	r3, [pc, #88]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 80086b4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d010      	beq.n	80086e4 <RadioSetRxGenericConfig+0x29c>
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	dc2c      	bgt.n	8008720 <RadioSetRxGenericConfig+0x2d8>
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d002      	beq.n	80086d0 <RadioSetRxGenericConfig+0x288>
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d005      	beq.n	80086da <RadioSetRxGenericConfig+0x292>
            break;
 80086ce:	e027      	b.n	8008720 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80086d0:	4b0e      	ldr	r3, [pc, #56]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80086d8:	e023      	b.n	8008722 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80086da:	4b0c      	ldr	r3, [pc, #48]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80086e2:	e01e      	b.n	8008722 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80086ea:	2b0b      	cmp	r3, #11
 80086ec:	d004      	beq.n	80086f8 <RadioSetRxGenericConfig+0x2b0>
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80086f4:	2b0c      	cmp	r3, #12
 80086f6:	d104      	bne.n	8008702 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80086f8:	4b04      	ldr	r3, [pc, #16]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008700:	e00f      	b.n	8008722 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008702:	4b02      	ldr	r3, [pc, #8]	; (800870c <RadioSetRxGenericConfig+0x2c4>)
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800870a:	e00a      	b.n	8008722 <RadioSetRxGenericConfig+0x2da>
 800870c:	200006b4 	.word	0x200006b4
 8008710:	200006b0 	.word	0x200006b0
 8008714:	20000728 	.word	0x20000728
 8008718:	200006ec 	.word	0x200006ec
 800871c:	200006c2 	.word	0x200006c2
            break;
 8008720:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008722:	4b28      	ldr	r3, [pc, #160]	; (80087c4 <RadioSetRxGenericConfig+0x37c>)
 8008724:	2201      	movs	r2, #1
 8008726:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800872c:	4b25      	ldr	r3, [pc, #148]	; (80087c4 <RadioSetRxGenericConfig+0x37c>)
 800872e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8008736:	4b23      	ldr	r3, [pc, #140]	; (80087c4 <RadioSetRxGenericConfig+0x37c>)
 8008738:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800873a:	4a22      	ldr	r2, [pc, #136]	; (80087c4 <RadioSetRxGenericConfig+0x37c>)
 800873c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008740:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008748:	4b1e      	ldr	r3, [pc, #120]	; (80087c4 <RadioSetRxGenericConfig+0x37c>)
 800874a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8008754:	4b1b      	ldr	r3, [pc, #108]	; (80087c4 <RadioSetRxGenericConfig+0x37c>)
 8008756:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800875a:	f7ff f9be 	bl	8007ada <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800875e:	2001      	movs	r0, #1
 8008760:	f7fe fb5a 	bl	8006e18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008764:	4818      	ldr	r0, [pc, #96]	; (80087c8 <RadioSetRxGenericConfig+0x380>)
 8008766:	f000 ff7d 	bl	8009664 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800876a:	4818      	ldr	r0, [pc, #96]	; (80087cc <RadioSetRxGenericConfig+0x384>)
 800876c:	f001 f84c 	bl	8009808 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008770:	4b14      	ldr	r3, [pc, #80]	; (80087c4 <RadioSetRxGenericConfig+0x37c>)
 8008772:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008776:	2b01      	cmp	r3, #1
 8008778:	d10d      	bne.n	8008796 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800877a:	f240 7036 	movw	r0, #1846	; 0x736
 800877e:	f001 f99f 	bl	8009ac0 <SUBGRF_ReadRegister>
 8008782:	4603      	mov	r3, r0
 8008784:	f023 0304 	bic.w	r3, r3, #4
 8008788:	b2db      	uxtb	r3, r3
 800878a:	4619      	mov	r1, r3
 800878c:	f240 7036 	movw	r0, #1846	; 0x736
 8008790:	f001 f982 	bl	8009a98 <SUBGRF_WriteRegister>
 8008794:	e00c      	b.n	80087b0 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008796:	f240 7036 	movw	r0, #1846	; 0x736
 800879a:	f001 f991 	bl	8009ac0 <SUBGRF_ReadRegister>
 800879e:	4603      	mov	r3, r0
 80087a0:	f043 0304 	orr.w	r3, r3, #4
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	4619      	mov	r1, r3
 80087a8:	f240 7036 	movw	r0, #1846	; 0x736
 80087ac:	f001 f974 	bl	8009a98 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80087b0:	4b04      	ldr	r3, [pc, #16]	; (80087c4 <RadioSetRxGenericConfig+0x37c>)
 80087b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087b6:	609a      	str	r2, [r3, #8]
        break;
 80087b8:	bf00      	nop
    }
    return status;
 80087ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3730      	adds	r7, #48	; 0x30
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	200006b4 	.word	0x200006b4
 80087c8:	200006ec 	.word	0x200006ec
 80087cc:	200006c2 	.word	0x200006c2

080087d0 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08e      	sub	sp, #56	; 0x38
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	607b      	str	r3, [r7, #4]
 80087da:	4603      	mov	r3, r0
 80087dc:	73fb      	strb	r3, [r7, #15]
 80087de:	4613      	mov	r3, r2
 80087e0:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 80087e2:	2300      	movs	r3, #0
 80087e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087e6:	2300      	movs	r3, #0
 80087e8:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80087ea:	f001 fc3c 	bl	800a066 <RFW_DeInit>
    switch( modem )
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	f200 8204 	bhi.w	8008bfe <RadioSetTxGenericConfig+0x42e>
 80087f6:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <RadioSetTxGenericConfig+0x2c>)
 80087f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fc:	08008981 	.word	0x08008981
 8008800:	08008ac9 	.word	0x08008ac9
 8008804:	08008bc1 	.word	0x08008bc1
 8008808:	0800880d 	.word	0x0800880d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	7c9b      	ldrb	r3, [r3, #18]
 8008810:	2b08      	cmp	r3, #8
 8008812:	d902      	bls.n	800881a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8008814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008818:	e206      	b.n	8008c28 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	6899      	ldr	r1, [r3, #8]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	7c9b      	ldrb	r3, [r3, #18]
 8008822:	b29a      	uxth	r2, r3
 8008824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008828:	4618      	mov	r0, r3
 800882a:	f001 fdb3 	bl	800a394 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d102      	bne.n	800883c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8008836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800883a:	e1f5      	b.n	8008c28 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f242 7210 	movw	r2, #10000	; 0x2710
 8008844:	4293      	cmp	r3, r2
 8008846:	d813      	bhi.n	8008870 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8008848:	2302      	movs	r3, #2
 800884a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800884e:	4b99      	ldr	r3, [pc, #612]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 8008850:	2203      	movs	r2, #3
 8008852:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8008854:	4b97      	ldr	r3, [pc, #604]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 8008856:	2203      	movs	r2, #3
 8008858:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a94      	ldr	r2, [pc, #592]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 8008862:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	7cda      	ldrb	r2, [r3, #19]
 8008868:	4b92      	ldr	r3, [pc, #584]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 800886a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800886e:	e017      	b.n	80088a0 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8008870:	2300      	movs	r3, #0
 8008872:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008876:	4b8f      	ldr	r3, [pc, #572]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 8008878:	2200      	movs	r2, #0
 800887a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800887c:	4b8d      	ldr	r3, [pc, #564]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 800887e:	2200      	movs	r2, #0
 8008880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a8a      	ldr	r2, [pc, #552]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 800888a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	7cda      	ldrb	r2, [r3, #19]
 8008890:	4b88      	ldr	r3, [pc, #544]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 8008892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	089b      	lsrs	r3, r3, #2
 800889c:	4a85      	ldr	r2, [pc, #532]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 800889e:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	00db      	lsls	r3, r3, #3
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	4b82      	ldr	r3, [pc, #520]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 80088ac:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80088ae:	4b81      	ldr	r3, [pc, #516]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 80088b0:	2204      	movs	r2, #4
 80088b2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	7c9b      	ldrb	r3, [r3, #18]
 80088b8:	00db      	lsls	r3, r3, #3
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	4b7d      	ldr	r3, [pc, #500]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 80088be:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80088c0:	4b7c      	ldr	r3, [pc, #496]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 80088c2:	2200      	movs	r2, #0
 80088c4:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	7d9b      	ldrb	r3, [r3, #22]
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d003      	beq.n	80088d6 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	7d1b      	ldrb	r3, [r3, #20]
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d12b      	bne.n	800892e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	7d5b      	ldrb	r3, [r3, #21]
 80088da:	2bf1      	cmp	r3, #241	; 0xf1
 80088dc:	d00a      	beq.n	80088f4 <RadioSetTxGenericConfig+0x124>
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	7d5b      	ldrb	r3, [r3, #21]
 80088e2:	2bf2      	cmp	r3, #242	; 0xf2
 80088e4:	d006      	beq.n	80088f4 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	7d5b      	ldrb	r3, [r3, #21]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d002      	beq.n	80088f4 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 80088ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088f2:	e199      	b.n	8008c28 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 80088f8:	2301      	movs	r3, #1
 80088fa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80088fe:	4b6e      	ldr	r3, [pc, #440]	; (8008ab8 <RadioSetTxGenericConfig+0x2e8>)
 8008900:	6819      	ldr	r1, [r3, #0]
 8008902:	f107 0320 	add.w	r3, r7, #32
 8008906:	4a6d      	ldr	r2, [pc, #436]	; (8008abc <RadioSetTxGenericConfig+0x2ec>)
 8008908:	4618      	mov	r0, r3
 800890a:	f001 fb9f 	bl	800a04c <RFW_Init>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d002      	beq.n	800891a <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8008914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008918:	e186      	b.n	8008c28 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800891a:	4b66      	ldr	r3, [pc, #408]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 800891c:	2200      	movs	r2, #0
 800891e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008920:	4b64      	ldr	r3, [pc, #400]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 8008922:	2201      	movs	r2, #1
 8008924:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008926:	4b63      	ldr	r3, [pc, #396]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 8008928:	2200      	movs	r2, #0
 800892a:	755a      	strb	r2, [r3, #21]
        {
 800892c:	e00b      	b.n	8008946 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	7d5a      	ldrb	r2, [r3, #21]
 8008932:	4b60      	ldr	r3, [pc, #384]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 8008934:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	7d9a      	ldrb	r2, [r3, #22]
 800893a:	4b5e      	ldr	r3, [pc, #376]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 800893c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	7d1a      	ldrb	r2, [r3, #20]
 8008942:	4b5c      	ldr	r3, [pc, #368]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 8008944:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008946:	f7ff f8c8 	bl	8007ada <RadioStandby>
        RadioSetModem( radio_modem );
 800894a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800894e:	4618      	mov	r0, r3
 8008950:	f7fe fa62 	bl	8006e18 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008954:	485a      	ldr	r0, [pc, #360]	; (8008ac0 <RadioSetTxGenericConfig+0x2f0>)
 8008956:	f000 fe85 	bl	8009664 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800895a:	485a      	ldr	r0, [pc, #360]	; (8008ac4 <RadioSetTxGenericConfig+0x2f4>)
 800895c:	f000 ff54 	bl	8009808 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008964:	4618      	mov	r0, r3
 8008966:	f000 fa18 	bl	8008d9a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	8a1b      	ldrh	r3, [r3, #16]
 800896e:	4618      	mov	r0, r3
 8008970:	f000 fa62 	bl	8008e38 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	899b      	ldrh	r3, [r3, #12]
 8008978:	4618      	mov	r0, r3
 800897a:	f000 fa3d 	bl	8008df8 <SUBGRF_SetCrcPolynomial>
        break;
 800897e:	e13f      	b.n	8008c00 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d102      	bne.n	800898e <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8008988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800898c:	e14c      	b.n	8008c28 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	7c9b      	ldrb	r3, [r3, #18]
 8008992:	2b08      	cmp	r3, #8
 8008994:	d902      	bls.n	800899c <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8008996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800899a:	e145      	b.n	8008c28 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	6899      	ldr	r1, [r3, #8]
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	7c9b      	ldrb	r3, [r3, #18]
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80089aa:	4618      	mov	r0, r3
 80089ac:	f001 fcf2 	bl	800a394 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80089b0:	4b40      	ldr	r3, [pc, #256]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a3d      	ldr	r2, [pc, #244]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 80089be:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	7cda      	ldrb	r2, [r3, #19]
 80089c4:	4b3b      	ldr	r3, [pc, #236]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 80089c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	4a39      	ldr	r2, [pc, #228]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 80089d0:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80089d2:	4b38      	ldr	r3, [pc, #224]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	00db      	lsls	r3, r3, #3
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	4b34      	ldr	r3, [pc, #208]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 80089e4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80089e6:	4b33      	ldr	r3, [pc, #204]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 80089e8:	2204      	movs	r2, #4
 80089ea:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	7c9b      	ldrb	r3, [r3, #18]
 80089f0:	00db      	lsls	r3, r3, #3
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	4b2f      	ldr	r3, [pc, #188]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 80089f6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80089f8:	4b2e      	ldr	r3, [pc, #184]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	7d9b      	ldrb	r3, [r3, #22]
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d003      	beq.n	8008a0e <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	7d1b      	ldrb	r3, [r3, #20]
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d12a      	bne.n	8008a64 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	7d5b      	ldrb	r3, [r3, #21]
 8008a12:	2bf1      	cmp	r3, #241	; 0xf1
 8008a14:	d00a      	beq.n	8008a2c <RadioSetTxGenericConfig+0x25c>
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	7d5b      	ldrb	r3, [r3, #21]
 8008a1a:	2bf2      	cmp	r3, #242	; 0xf2
 8008a1c:	d006      	beq.n	8008a2c <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	7d5b      	ldrb	r3, [r3, #21]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d002      	beq.n	8008a2c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8008a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a2a:	e0fd      	b.n	8008c28 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008a34:	4b20      	ldr	r3, [pc, #128]	; (8008ab8 <RadioSetTxGenericConfig+0x2e8>)
 8008a36:	6819      	ldr	r1, [r3, #0]
 8008a38:	f107 0314 	add.w	r3, r7, #20
 8008a3c:	4a1f      	ldr	r2, [pc, #124]	; (8008abc <RadioSetTxGenericConfig+0x2ec>)
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f001 fb04 	bl	800a04c <RFW_Init>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8008a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a4e:	e0eb      	b.n	8008c28 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008a50:	4b18      	ldr	r3, [pc, #96]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008a56:	4b17      	ldr	r3, [pc, #92]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 8008a58:	2201      	movs	r2, #1
 8008a5a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008a5c:	4b15      	ldr	r3, [pc, #84]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	755a      	strb	r2, [r3, #21]
        {
 8008a62:	e00b      	b.n	8008a7c <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	7d5a      	ldrb	r2, [r3, #21]
 8008a68:	4b12      	ldr	r3, [pc, #72]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 8008a6a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	7d9a      	ldrb	r2, [r3, #22]
 8008a70:	4b10      	ldr	r3, [pc, #64]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 8008a72:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	7d1a      	ldrb	r2, [r3, #20]
 8008a78:	4b0e      	ldr	r3, [pc, #56]	; (8008ab4 <RadioSetTxGenericConfig+0x2e4>)
 8008a7a:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008a7c:	f7ff f82d 	bl	8007ada <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008a80:	2000      	movs	r0, #0
 8008a82:	f7fe f9c9 	bl	8006e18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008a86:	480e      	ldr	r0, [pc, #56]	; (8008ac0 <RadioSetTxGenericConfig+0x2f0>)
 8008a88:	f000 fdec 	bl	8009664 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008a8c:	480d      	ldr	r0, [pc, #52]	; (8008ac4 <RadioSetTxGenericConfig+0x2f4>)
 8008a8e:	f000 febb 	bl	8009808 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008a92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 f97f 	bl	8008d9a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	8a1b      	ldrh	r3, [r3, #16]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 f9c9 	bl	8008e38 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	899b      	ldrh	r3, [r3, #12]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 f9a4 	bl	8008df8 <SUBGRF_SetCrcPolynomial>
        break;
 8008ab0:	e0a6      	b.n	8008c00 <RadioSetTxGenericConfig+0x430>
 8008ab2:	bf00      	nop
 8008ab4:	200006b4 	.word	0x200006b4
 8008ab8:	200006b0 	.word	0x200006b0
 8008abc:	20000710 	.word	0x20000710
 8008ac0:	200006ec 	.word	0x200006ec
 8008ac4:	200006c2 	.word	0x200006c2
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008ac8:	4b59      	ldr	r3, [pc, #356]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	781a      	ldrb	r2, [r3, #0]
 8008ad4:	4b56      	ldr	r3, [pc, #344]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	785a      	ldrb	r2, [r3, #1]
 8008ade:	4b54      	ldr	r3, [pc, #336]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	789a      	ldrb	r2, [r3, #2]
 8008ae8:	4b51      	ldr	r3, [pc, #324]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008aea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	78db      	ldrb	r3, [r3, #3]
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d010      	beq.n	8008b18 <RadioSetTxGenericConfig+0x348>
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	dc20      	bgt.n	8008b3c <RadioSetTxGenericConfig+0x36c>
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d002      	beq.n	8008b04 <RadioSetTxGenericConfig+0x334>
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d005      	beq.n	8008b0e <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8008b02:	e01b      	b.n	8008b3c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008b04:	4b4a      	ldr	r3, [pc, #296]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008b0c:	e017      	b.n	8008b3e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008b0e:	4b48      	ldr	r3, [pc, #288]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008b16:	e012      	b.n	8008b3e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	2b0b      	cmp	r3, #11
 8008b1e:	d003      	beq.n	8008b28 <RadioSetTxGenericConfig+0x358>
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	2b0c      	cmp	r3, #12
 8008b26:	d104      	bne.n	8008b32 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008b28:	4b41      	ldr	r3, [pc, #260]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008b30:	e005      	b.n	8008b3e <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008b32:	4b3f      	ldr	r3, [pc, #252]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008b3a:	e000      	b.n	8008b3e <RadioSetTxGenericConfig+0x36e>
            break;
 8008b3c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008b3e:	4b3c      	ldr	r3, [pc, #240]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008b40:	2201      	movs	r2, #1
 8008b42:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	889a      	ldrh	r2, [r3, #4]
 8008b48:	4b39      	ldr	r3, [pc, #228]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008b4a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	799a      	ldrb	r2, [r3, #6]
 8008b50:	4b37      	ldr	r3, [pc, #220]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008b52:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	79da      	ldrb	r2, [r3, #7]
 8008b58:	4b35      	ldr	r3, [pc, #212]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008b5a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	7a1a      	ldrb	r2, [r3, #8]
 8008b62:	4b33      	ldr	r3, [pc, #204]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008b64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8008b68:	f7fe ffb7 	bl	8007ada <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008b6c:	2001      	movs	r0, #1
 8008b6e:	f7fe f953 	bl	8006e18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008b72:	4830      	ldr	r0, [pc, #192]	; (8008c34 <RadioSetTxGenericConfig+0x464>)
 8008b74:	f000 fd76 	bl	8009664 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008b78:	482f      	ldr	r0, [pc, #188]	; (8008c38 <RadioSetTxGenericConfig+0x468>)
 8008b7a:	f000 fe45 	bl	8009808 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8008b7e:	4b2c      	ldr	r3, [pc, #176]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008b80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b84:	2b06      	cmp	r3, #6
 8008b86:	d10d      	bne.n	8008ba4 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008b88:	f640 0089 	movw	r0, #2185	; 0x889
 8008b8c:	f000 ff98 	bl	8009ac0 <SUBGRF_ReadRegister>
 8008b90:	4603      	mov	r3, r0
 8008b92:	f023 0304 	bic.w	r3, r3, #4
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	4619      	mov	r1, r3
 8008b9a:	f640 0089 	movw	r0, #2185	; 0x889
 8008b9e:	f000 ff7b 	bl	8009a98 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8008ba2:	e02d      	b.n	8008c00 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008ba4:	f640 0089 	movw	r0, #2185	; 0x889
 8008ba8:	f000 ff8a 	bl	8009ac0 <SUBGRF_ReadRegister>
 8008bac:	4603      	mov	r3, r0
 8008bae:	f043 0304 	orr.w	r3, r3, #4
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	f640 0089 	movw	r0, #2185	; 0x889
 8008bba:	f000 ff6d 	bl	8009a98 <SUBGRF_WriteRegister>
        break;
 8008bbe:	e01f      	b.n	8008c00 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d004      	beq.n	8008bd2 <RadioSetTxGenericConfig+0x402>
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bd0:	d902      	bls.n	8008bd8 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8008bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bd6:	e027      	b.n	8008c28 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8008bd8:	2003      	movs	r0, #3
 8008bda:	f7fe f91d 	bl	8006e18 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8008bde:	4b14      	ldr	r3, [pc, #80]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008be0:	2202      	movs	r2, #2
 8008be2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a11      	ldr	r2, [pc, #68]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008bec:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8008bee:	4b10      	ldr	r3, [pc, #64]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008bf0:	2216      	movs	r2, #22
 8008bf2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008bf6:	480f      	ldr	r0, [pc, #60]	; (8008c34 <RadioSetTxGenericConfig+0x464>)
 8008bf8:	f000 fd34 	bl	8009664 <SUBGRF_SetModulationParams>
        break;
 8008bfc:	e000      	b.n	8008c00 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8008bfe:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008c00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f001 f863 	bl	8009cd0 <SUBGRF_SetRfTxPower>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	4b08      	ldr	r3, [pc, #32]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008c10:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8008c14:	4b06      	ldr	r3, [pc, #24]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008c16:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f001 fa37 	bl	800a08e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008c20:	4a03      	ldr	r2, [pc, #12]	; (8008c30 <RadioSetTxGenericConfig+0x460>)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6053      	str	r3, [r2, #4]
    return 0;
 8008c26:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3738      	adds	r7, #56	; 0x38
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	200006b4 	.word	0x200006b4
 8008c34:	200006ec 	.word	0x200006ec
 8008c38:	200006c2 	.word	0x200006c2

08008c3c <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8008c44:	2301      	movs	r3, #1
 8008c46:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bc80      	pop	{r7}
 8008c52:	4770      	bx	lr

08008c54 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8008c5e:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8008c60:	4618      	mov	r0, r3
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bc80      	pop	{r7}
 8008c68:	4770      	bx	lr
	...

08008c6c <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8008c7a:	4a1d      	ldr	r2, [pc, #116]	; (8008cf0 <SUBGRF_Init+0x84>)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8008c80:	f7f8 f876 	bl	8000d70 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008c84:	2002      	movs	r0, #2
 8008c86:	f001 f8ff 	bl	8009e88 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8008c8a:	4b1a      	ldr	r3, [pc, #104]	; (8008cf4 <SUBGRF_Init+0x88>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8008c90:	2000      	movs	r0, #0
 8008c92:	f000 f97d 	bl	8008f90 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8008c96:	f001 fb52 	bl	800a33e <RBI_IsTCXO>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d10e      	bne.n	8008cbe <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8008ca0:	2140      	movs	r1, #64	; 0x40
 8008ca2:	2001      	movs	r0, #1
 8008ca4:	f000 fb82 	bl	80093ac <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8008ca8:	2100      	movs	r1, #0
 8008caa:	f640 1011 	movw	r0, #2321	; 0x911
 8008cae:	f000 fef3 	bl	8009a98 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8008cb2:	237f      	movs	r3, #127	; 0x7f
 8008cb4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8008cb6:	7b38      	ldrb	r0, [r7, #12]
 8008cb8:	f000 fa8b 	bl	80091d2 <SUBGRF_Calibrate>
 8008cbc:	e009      	b.n	8008cd2 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008cbe:	2120      	movs	r1, #32
 8008cc0:	f640 1011 	movw	r0, #2321	; 0x911
 8008cc4:	f000 fee8 	bl	8009a98 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008cc8:	2120      	movs	r1, #32
 8008cca:	f640 1012 	movw	r0, #2322	; 0x912
 8008cce:	f000 fee3 	bl	8009a98 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008cd2:	210e      	movs	r1, #14
 8008cd4:	f640 101f 	movw	r0, #2335	; 0x91f
 8008cd8:	f000 fede 	bl	8009a98 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8008cdc:	f001 fa86 	bl	800a1ec <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8008ce0:	4b05      	ldr	r3, [pc, #20]	; (8008cf8 <SUBGRF_Init+0x8c>)
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	701a      	strb	r2, [r3, #0]
}
 8008ce6:	bf00      	nop
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	2000074c 	.word	0x2000074c
 8008cf4:	20000748 	.word	0x20000748
 8008cf8:	20000740 	.word	0x20000740

08008cfc <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	af00      	add	r7, sp, #0
    return OperatingMode;
 8008d00:	4b02      	ldr	r3, [pc, #8]	; (8008d0c <SUBGRF_GetOperatingMode+0x10>)
 8008d02:	781b      	ldrb	r3, [r3, #0]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bc80      	pop	{r7}
 8008d0a:	4770      	bx	lr
 8008d0c:	20000740 	.word	0x20000740

08008d10 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8008d1c:	78fb      	ldrb	r3, [r7, #3]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	6879      	ldr	r1, [r7, #4]
 8008d22:	2000      	movs	r0, #0
 8008d24:	f000 ff24 	bl	8009b70 <SUBGRF_WriteBuffer>
}
 8008d28:	bf00      	nop
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8008d42:	f107 0317 	add.w	r3, r7, #23
 8008d46:	4619      	mov	r1, r3
 8008d48:	68b8      	ldr	r0, [r7, #8]
 8008d4a:	f000 fe27 	bl	800999c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	79fa      	ldrb	r2, [r7, #7]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d201      	bcs.n	8008d5c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e007      	b.n	8008d6c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8008d5c:	7df8      	ldrb	r0, [r7, #23]
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	461a      	mov	r2, r3
 8008d64:	68f9      	ldr	r1, [r7, #12]
 8008d66:	f000 ff25 	bl	8009bb4 <SUBGRF_ReadBuffer>

    return 0;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3718      	adds	r7, #24
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8008d82:	7afb      	ldrb	r3, [r7, #11]
 8008d84:	4619      	mov	r1, r3
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f7ff ffc2 	bl	8008d10 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f91b 	bl	8008fc8 <SUBGRF_SetTx>
}
 8008d92:	bf00      	nop
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b082      	sub	sp, #8
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8008da2:	2208      	movs	r2, #8
 8008da4:	6879      	ldr	r1, [r7, #4]
 8008da6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8008daa:	f000 fe9d 	bl	8009ae8 <SUBGRF_WriteRegisters>
    return 0;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8008dc2:	88fb      	ldrh	r3, [r7, #6]
 8008dc4:	0a1b      	lsrs	r3, r3, #8
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8008dcc:	88fb      	ldrh	r3, [r7, #6]
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8008dd2:	f000 fb6f 	bl	80094b4 <SUBGRF_GetPacketType>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d108      	bne.n	8008dee <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8008ddc:	f107 030c 	add.w	r3, r7, #12
 8008de0:	2202      	movs	r2, #2
 8008de2:	4619      	mov	r1, r3
 8008de4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8008de8:	f000 fe7e 	bl	8009ae8 <SUBGRF_WriteRegisters>
            break;
 8008dec:	e000      	b.n	8008df0 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8008dee:	bf00      	nop
    }
}
 8008df0:	bf00      	nop
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8008e02:	88fb      	ldrh	r3, [r7, #6]
 8008e04:	0a1b      	lsrs	r3, r3, #8
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8008e0c:	88fb      	ldrh	r3, [r7, #6]
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8008e12:	f000 fb4f 	bl	80094b4 <SUBGRF_GetPacketType>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d108      	bne.n	8008e2e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8008e1c:	f107 030c 	add.w	r3, r7, #12
 8008e20:	2202      	movs	r2, #2
 8008e22:	4619      	mov	r1, r3
 8008e24:	f240 60be 	movw	r0, #1726	; 0x6be
 8008e28:	f000 fe5e 	bl	8009ae8 <SUBGRF_WriteRegisters>
            break;
 8008e2c:	e000      	b.n	8008e30 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8008e2e:	bf00      	nop
    }
}
 8008e30:	bf00      	nop
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4603      	mov	r3, r0
 8008e40:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8008e42:	2300      	movs	r3, #0
 8008e44:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8008e46:	f000 fb35 	bl	80094b4 <SUBGRF_GetPacketType>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d121      	bne.n	8008e94 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8008e50:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008e54:	f000 fe34 	bl	8009ac0 <SUBGRF_ReadRegister>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	f023 0301 	bic.w	r3, r3, #1
 8008e5e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8008e60:	88fb      	ldrh	r3, [r7, #6]
 8008e62:	0a1b      	lsrs	r3, r3, #8
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	b25b      	sxtb	r3, r3
 8008e68:	f003 0301 	and.w	r3, r3, #1
 8008e6c:	b25a      	sxtb	r2, r3
 8008e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	b25b      	sxtb	r3, r3
 8008e76:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008e80:	f000 fe0a 	bl	8009a98 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8008e84:	88fb      	ldrh	r3, [r7, #6]
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	4619      	mov	r1, r3
 8008e8a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8008e8e:	f000 fe03 	bl	8009a98 <SUBGRF_WriteRegister>
            break;
 8008e92:	e000      	b.n	8008e96 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8008e94:	bf00      	nop
    }
}
 8008e96:	bf00      	nop
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b082      	sub	sp, #8
 8008ea2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8008eb0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008eb4:	f000 fe04 	bl	8009ac0 <SUBGRF_ReadRegister>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8008ebc:	79fb      	ldrb	r3, [r7, #7]
 8008ebe:	f023 0301 	bic.w	r3, r3, #1
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008eca:	f000 fde5 	bl	8009a98 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8008ece:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008ed2:	f000 fdf5 	bl	8009ac0 <SUBGRF_ReadRegister>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8008eda:	79bb      	ldrb	r3, [r7, #6]
 8008edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008ee8:	f000 fdd6 	bl	8009a98 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008eec:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008ef0:	f000 f88a 	bl	8009008 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8008ef4:	463b      	mov	r3, r7
 8008ef6:	2204      	movs	r2, #4
 8008ef8:	4619      	mov	r1, r3
 8008efa:	f640 0019 	movw	r0, #2073	; 0x819
 8008efe:	f000 fe15 	bl	8009b2c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8008f02:	2000      	movs	r0, #0
 8008f04:	f000 f844 	bl	8008f90 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008f10:	f000 fdc2 	bl	8009a98 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8008f14:	79bb      	ldrb	r3, [r7, #6]
 8008f16:	4619      	mov	r1, r3
 8008f18:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008f1c:	f000 fdbc 	bl	8009a98 <SUBGRF_WriteRegister>

    return number;
 8008f20:	683b      	ldr	r3, [r7, #0]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
	...

08008f2c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8008f34:	2000      	movs	r0, #0
 8008f36:	f001 f999 	bl	800a26c <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008f3a:	2002      	movs	r0, #2
 8008f3c:	f000 ffa4 	bl	8009e88 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008f40:	793b      	ldrb	r3, [r7, #4]
 8008f42:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008f4c:	793b      	ldrb	r3, [r7, #4]
 8008f4e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008f56:	b25b      	sxtb	r3, r3
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8008f5c:	793b      	ldrb	r3, [r7, #4]
 8008f5e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008f66:	4313      	orrs	r3, r2
 8008f68:	b25b      	sxtb	r3, r3
 8008f6a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008f6c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8008f6e:	f107 030f 	add.w	r3, r7, #15
 8008f72:	2201      	movs	r2, #1
 8008f74:	4619      	mov	r1, r3
 8008f76:	2084      	movs	r0, #132	; 0x84
 8008f78:	f000 fe3e 	bl	8009bf8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8008f7c:	4b03      	ldr	r3, [pc, #12]	; (8008f8c <SUBGRF_SetSleep+0x60>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	701a      	strb	r2, [r3, #0]
}
 8008f82:	bf00      	nop
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	20000740 	.word	0x20000740

08008f90 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	4603      	mov	r3, r0
 8008f98:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8008f9a:	1dfb      	adds	r3, r7, #7
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	2080      	movs	r0, #128	; 0x80
 8008fa2:	f000 fe29 	bl	8009bf8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8008fa6:	79fb      	ldrb	r3, [r7, #7]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d103      	bne.n	8008fb4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8008fac:	4b05      	ldr	r3, [pc, #20]	; (8008fc4 <SUBGRF_SetStandby+0x34>)
 8008fae:	2201      	movs	r2, #1
 8008fb0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8008fb2:	e002      	b.n	8008fba <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8008fb4:	4b03      	ldr	r3, [pc, #12]	; (8008fc4 <SUBGRF_SetStandby+0x34>)
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	701a      	strb	r2, [r3, #0]
}
 8008fba:	bf00      	nop
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20000740 	.word	0x20000740

08008fc8 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8008fd0:	4b0c      	ldr	r3, [pc, #48]	; (8009004 <SUBGRF_SetTx+0x3c>)
 8008fd2:	2204      	movs	r2, #4
 8008fd4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	0c1b      	lsrs	r3, r3, #16
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	0a1b      	lsrs	r3, r3, #8
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8008fec:	f107 030c 	add.w	r3, r7, #12
 8008ff0:	2203      	movs	r2, #3
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	2083      	movs	r0, #131	; 0x83
 8008ff6:	f000 fdff 	bl	8009bf8 <SUBGRF_WriteCommand>
}
 8008ffa:	bf00      	nop
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	20000740 	.word	0x20000740

08009008 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009010:	4b0c      	ldr	r3, [pc, #48]	; (8009044 <SUBGRF_SetRx+0x3c>)
 8009012:	2205      	movs	r2, #5
 8009014:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	0c1b      	lsrs	r3, r3, #16
 800901a:	b2db      	uxtb	r3, r3
 800901c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	0a1b      	lsrs	r3, r3, #8
 8009022:	b2db      	uxtb	r3, r3
 8009024:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	b2db      	uxtb	r3, r3
 800902a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800902c:	f107 030c 	add.w	r3, r7, #12
 8009030:	2203      	movs	r2, #3
 8009032:	4619      	mov	r1, r3
 8009034:	2082      	movs	r0, #130	; 0x82
 8009036:	f000 fddf 	bl	8009bf8 <SUBGRF_WriteCommand>
}
 800903a:	bf00      	nop
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20000740 	.word	0x20000740

08009048 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009050:	4b0e      	ldr	r3, [pc, #56]	; (800908c <SUBGRF_SetRxBoosted+0x44>)
 8009052:	2205      	movs	r2, #5
 8009054:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8009056:	2197      	movs	r1, #151	; 0x97
 8009058:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800905c:	f000 fd1c 	bl	8009a98 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	0c1b      	lsrs	r3, r3, #16
 8009064:	b2db      	uxtb	r3, r3
 8009066:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	0a1b      	lsrs	r3, r3, #8
 800906c:	b2db      	uxtb	r3, r3
 800906e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	b2db      	uxtb	r3, r3
 8009074:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009076:	f107 030c 	add.w	r3, r7, #12
 800907a:	2203      	movs	r2, #3
 800907c:	4619      	mov	r1, r3
 800907e:	2082      	movs	r0, #130	; 0x82
 8009080:	f000 fdba 	bl	8009bf8 <SUBGRF_WriteCommand>
}
 8009084:	bf00      	nop
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	20000740 	.word	0x20000740

08009090 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	0c1b      	lsrs	r3, r3, #16
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	0a1b      	lsrs	r3, r3, #8
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	0c1b      	lsrs	r3, r3, #16
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	0a1b      	lsrs	r3, r3, #8
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80090c6:	f107 0308 	add.w	r3, r7, #8
 80090ca:	2206      	movs	r2, #6
 80090cc:	4619      	mov	r1, r3
 80090ce:	2094      	movs	r0, #148	; 0x94
 80090d0:	f000 fd92 	bl	8009bf8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80090d4:	4b03      	ldr	r3, [pc, #12]	; (80090e4 <SUBGRF_SetRxDutyCycle+0x54>)
 80090d6:	2206      	movs	r2, #6
 80090d8:	701a      	strb	r2, [r3, #0]
}
 80090da:	bf00      	nop
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20000740 	.word	0x20000740

080090e8 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80090ec:	2200      	movs	r2, #0
 80090ee:	2100      	movs	r1, #0
 80090f0:	20c5      	movs	r0, #197	; 0xc5
 80090f2:	f000 fd81 	bl	8009bf8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80090f6:	4b02      	ldr	r3, [pc, #8]	; (8009100 <SUBGRF_SetCad+0x18>)
 80090f8:	2207      	movs	r2, #7
 80090fa:	701a      	strb	r2, [r3, #0]
}
 80090fc:	bf00      	nop
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	20000740 	.word	0x20000740

08009104 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8009108:	2200      	movs	r2, #0
 800910a:	2100      	movs	r1, #0
 800910c:	20d1      	movs	r0, #209	; 0xd1
 800910e:	f000 fd73 	bl	8009bf8 <SUBGRF_WriteCommand>
}
 8009112:	bf00      	nop
 8009114:	bd80      	pop	{r7, pc}

08009116 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8009116:	b580      	push	{r7, lr}
 8009118:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800911a:	2200      	movs	r2, #0
 800911c:	2100      	movs	r1, #0
 800911e:	20d2      	movs	r0, #210	; 0xd2
 8009120:	f000 fd6a 	bl	8009bf8 <SUBGRF_WriteCommand>
}
 8009124:	bf00      	nop
 8009126:	bd80      	pop	{r7, pc}

08009128 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8009132:	1dfb      	adds	r3, r7, #7
 8009134:	2201      	movs	r2, #1
 8009136:	4619      	mov	r1, r3
 8009138:	209f      	movs	r0, #159	; 0x9f
 800913a:	f000 fd5d 	bl	8009bf8 <SUBGRF_WriteCommand>
}
 800913e:	bf00      	nop
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b084      	sub	sp, #16
 800914a:	af00      	add	r7, sp, #0
 800914c:	4603      	mov	r3, r0
 800914e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8009150:	1dfb      	adds	r3, r7, #7
 8009152:	2201      	movs	r2, #1
 8009154:	4619      	mov	r1, r3
 8009156:	20a0      	movs	r0, #160	; 0xa0
 8009158:	f000 fd4e 	bl	8009bf8 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800915c:	79fb      	ldrb	r3, [r7, #7]
 800915e:	2b3f      	cmp	r3, #63	; 0x3f
 8009160:	d91c      	bls.n	800919c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8009162:	79fb      	ldrb	r3, [r7, #7]
 8009164:	085b      	lsrs	r3, r3, #1
 8009166:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8009168:	2300      	movs	r3, #0
 800916a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800916c:	2300      	movs	r3, #0
 800916e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8009170:	e005      	b.n	800917e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8009172:	7bfb      	ldrb	r3, [r7, #15]
 8009174:	089b      	lsrs	r3, r3, #2
 8009176:	73fb      	strb	r3, [r7, #15]
            exp++;
 8009178:	7bbb      	ldrb	r3, [r7, #14]
 800917a:	3301      	adds	r3, #1
 800917c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800917e:	7bfb      	ldrb	r3, [r7, #15]
 8009180:	2b1f      	cmp	r3, #31
 8009182:	d8f6      	bhi.n	8009172 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	b2da      	uxtb	r2, r3
 800918a:	7bbb      	ldrb	r3, [r7, #14]
 800918c:	4413      	add	r3, r2
 800918e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8009190:	7b7b      	ldrb	r3, [r7, #13]
 8009192:	4619      	mov	r1, r3
 8009194:	f240 7006 	movw	r0, #1798	; 0x706
 8009198:	f000 fc7e 	bl	8009a98 <SUBGRF_WriteRegister>
    }
}
 800919c:	bf00      	nop
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80091aa:	f001 f8d3 	bl	800a354 <RBI_IsDCDC>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d102      	bne.n	80091ba <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80091b4:	2301      	movs	r3, #1
 80091b6:	71fb      	strb	r3, [r7, #7]
 80091b8:	e001      	b.n	80091be <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80091ba:	2300      	movs	r3, #0
 80091bc:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80091be:	1dfb      	adds	r3, r7, #7
 80091c0:	2201      	movs	r2, #1
 80091c2:	4619      	mov	r1, r3
 80091c4:	2096      	movs	r0, #150	; 0x96
 80091c6:	f000 fd17 	bl	8009bf8 <SUBGRF_WriteCommand>
}
 80091ca:	bf00      	nop
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b084      	sub	sp, #16
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80091da:	793b      	ldrb	r3, [r7, #4]
 80091dc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	019b      	lsls	r3, r3, #6
 80091e4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80091e6:	793b      	ldrb	r3, [r7, #4]
 80091e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80091f0:	b25b      	sxtb	r3, r3
 80091f2:	4313      	orrs	r3, r2
 80091f4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80091f6:	793b      	ldrb	r3, [r7, #4]
 80091f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009200:	b25b      	sxtb	r3, r3
 8009202:	4313      	orrs	r3, r2
 8009204:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009206:	793b      	ldrb	r3, [r7, #4]
 8009208:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800920c:	b2db      	uxtb	r3, r3
 800920e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009210:	b25b      	sxtb	r3, r3
 8009212:	4313      	orrs	r3, r2
 8009214:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009216:	793b      	ldrb	r3, [r7, #4]
 8009218:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800921c:	b2db      	uxtb	r3, r3
 800921e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009220:	b25b      	sxtb	r3, r3
 8009222:	4313      	orrs	r3, r2
 8009224:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009226:	793b      	ldrb	r3, [r7, #4]
 8009228:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800922c:	b2db      	uxtb	r3, r3
 800922e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009230:	b25b      	sxtb	r3, r3
 8009232:	4313      	orrs	r3, r2
 8009234:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8009236:	793b      	ldrb	r3, [r7, #4]
 8009238:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800923c:	b2db      	uxtb	r3, r3
 800923e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009240:	4313      	orrs	r3, r2
 8009242:	b25b      	sxtb	r3, r3
 8009244:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009246:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8009248:	f107 030f 	add.w	r3, r7, #15
 800924c:	2201      	movs	r2, #1
 800924e:	4619      	mov	r1, r3
 8009250:	2089      	movs	r0, #137	; 0x89
 8009252:	f000 fcd1 	bl	8009bf8 <SUBGRF_WriteCommand>
}
 8009256:	bf00      	nop
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
	...

08009260 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a1d      	ldr	r2, [pc, #116]	; (80092e0 <SUBGRF_CalibrateImage+0x80>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d904      	bls.n	800927a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8009270:	23e1      	movs	r3, #225	; 0xe1
 8009272:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8009274:	23e9      	movs	r3, #233	; 0xe9
 8009276:	737b      	strb	r3, [r7, #13]
 8009278:	e027      	b.n	80092ca <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a19      	ldr	r2, [pc, #100]	; (80092e4 <SUBGRF_CalibrateImage+0x84>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d904      	bls.n	800928c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8009282:	23d7      	movs	r3, #215	; 0xd7
 8009284:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8009286:	23db      	movs	r3, #219	; 0xdb
 8009288:	737b      	strb	r3, [r7, #13]
 800928a:	e01e      	b.n	80092ca <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a16      	ldr	r2, [pc, #88]	; (80092e8 <SUBGRF_CalibrateImage+0x88>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d904      	bls.n	800929e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8009294:	23c1      	movs	r3, #193	; 0xc1
 8009296:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8009298:	23c5      	movs	r3, #197	; 0xc5
 800929a:	737b      	strb	r3, [r7, #13]
 800929c:	e015      	b.n	80092ca <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a12      	ldr	r2, [pc, #72]	; (80092ec <SUBGRF_CalibrateImage+0x8c>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d904      	bls.n	80092b0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80092a6:	2375      	movs	r3, #117	; 0x75
 80092a8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80092aa:	2381      	movs	r3, #129	; 0x81
 80092ac:	737b      	strb	r3, [r7, #13]
 80092ae:	e00c      	b.n	80092ca <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a0f      	ldr	r2, [pc, #60]	; (80092f0 <SUBGRF_CalibrateImage+0x90>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d904      	bls.n	80092c2 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80092b8:	236b      	movs	r3, #107	; 0x6b
 80092ba:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80092bc:	236f      	movs	r3, #111	; 0x6f
 80092be:	737b      	strb	r3, [r7, #13]
 80092c0:	e003      	b.n	80092ca <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80092c2:	2329      	movs	r3, #41	; 0x29
 80092c4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80092c6:	232b      	movs	r3, #43	; 0x2b
 80092c8:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80092ca:	f107 030c 	add.w	r3, r7, #12
 80092ce:	2202      	movs	r2, #2
 80092d0:	4619      	mov	r1, r3
 80092d2:	2098      	movs	r0, #152	; 0x98
 80092d4:	f000 fc90 	bl	8009bf8 <SUBGRF_WriteCommand>
}
 80092d8:	bf00      	nop
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	35a4e900 	.word	0x35a4e900
 80092e4:	32a9f880 	.word	0x32a9f880
 80092e8:	2de54480 	.word	0x2de54480
 80092ec:	1b6b0b00 	.word	0x1b6b0b00
 80092f0:	1954fc40 	.word	0x1954fc40

080092f4 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80092f4:	b590      	push	{r4, r7, lr}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	4604      	mov	r4, r0
 80092fc:	4608      	mov	r0, r1
 80092fe:	4611      	mov	r1, r2
 8009300:	461a      	mov	r2, r3
 8009302:	4623      	mov	r3, r4
 8009304:	71fb      	strb	r3, [r7, #7]
 8009306:	4603      	mov	r3, r0
 8009308:	71bb      	strb	r3, [r7, #6]
 800930a:	460b      	mov	r3, r1
 800930c:	717b      	strb	r3, [r7, #5]
 800930e:	4613      	mov	r3, r2
 8009310:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8009312:	79fb      	ldrb	r3, [r7, #7]
 8009314:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8009316:	79bb      	ldrb	r3, [r7, #6]
 8009318:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800931a:	797b      	ldrb	r3, [r7, #5]
 800931c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800931e:	793b      	ldrb	r3, [r7, #4]
 8009320:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8009322:	f107 030c 	add.w	r3, r7, #12
 8009326:	2204      	movs	r2, #4
 8009328:	4619      	mov	r1, r3
 800932a:	2095      	movs	r0, #149	; 0x95
 800932c:	f000 fc64 	bl	8009bf8 <SUBGRF_WriteCommand>
}
 8009330:	bf00      	nop
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	bd90      	pop	{r4, r7, pc}

08009338 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8009338:	b590      	push	{r4, r7, lr}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	4604      	mov	r4, r0
 8009340:	4608      	mov	r0, r1
 8009342:	4611      	mov	r1, r2
 8009344:	461a      	mov	r2, r3
 8009346:	4623      	mov	r3, r4
 8009348:	80fb      	strh	r3, [r7, #6]
 800934a:	4603      	mov	r3, r0
 800934c:	80bb      	strh	r3, [r7, #4]
 800934e:	460b      	mov	r3, r1
 8009350:	807b      	strh	r3, [r7, #2]
 8009352:	4613      	mov	r3, r2
 8009354:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8009356:	88fb      	ldrh	r3, [r7, #6]
 8009358:	0a1b      	lsrs	r3, r3, #8
 800935a:	b29b      	uxth	r3, r3
 800935c:	b2db      	uxtb	r3, r3
 800935e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8009360:	88fb      	ldrh	r3, [r7, #6]
 8009362:	b2db      	uxtb	r3, r3
 8009364:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8009366:	88bb      	ldrh	r3, [r7, #4]
 8009368:	0a1b      	lsrs	r3, r3, #8
 800936a:	b29b      	uxth	r3, r3
 800936c:	b2db      	uxtb	r3, r3
 800936e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8009370:	88bb      	ldrh	r3, [r7, #4]
 8009372:	b2db      	uxtb	r3, r3
 8009374:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8009376:	887b      	ldrh	r3, [r7, #2]
 8009378:	0a1b      	lsrs	r3, r3, #8
 800937a:	b29b      	uxth	r3, r3
 800937c:	b2db      	uxtb	r3, r3
 800937e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8009380:	887b      	ldrh	r3, [r7, #2]
 8009382:	b2db      	uxtb	r3, r3
 8009384:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8009386:	883b      	ldrh	r3, [r7, #0]
 8009388:	0a1b      	lsrs	r3, r3, #8
 800938a:	b29b      	uxth	r3, r3
 800938c:	b2db      	uxtb	r3, r3
 800938e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8009390:	883b      	ldrh	r3, [r7, #0]
 8009392:	b2db      	uxtb	r3, r3
 8009394:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8009396:	f107 0308 	add.w	r3, r7, #8
 800939a:	2208      	movs	r2, #8
 800939c:	4619      	mov	r1, r3
 800939e:	2008      	movs	r0, #8
 80093a0:	f000 fc2a 	bl	8009bf8 <SUBGRF_WriteCommand>
}
 80093a4:	bf00      	nop
 80093a6:	3714      	adds	r7, #20
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd90      	pop	{r4, r7, pc}

080093ac <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	4603      	mov	r3, r0
 80093b4:	6039      	str	r1, [r7, #0]
 80093b6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80093b8:	79fb      	ldrb	r3, [r7, #7]
 80093ba:	f003 0307 	and.w	r3, r3, #7
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	0c1b      	lsrs	r3, r3, #16
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	0a1b      	lsrs	r3, r3, #8
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80093d8:	f107 030c 	add.w	r3, r7, #12
 80093dc:	2204      	movs	r2, #4
 80093de:	4619      	mov	r1, r3
 80093e0:	2097      	movs	r0, #151	; 0x97
 80093e2:	f000 fc09 	bl	8009bf8 <SUBGRF_WriteCommand>
}
 80093e6:	bf00      	nop
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
	...

080093f0 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80093f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80093f4:	b084      	sub	sp, #16
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80093fe:	4b1d      	ldr	r3, [pc, #116]	; (8009474 <SUBGRF_SetRfFrequency+0x84>)
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	f083 0301 	eor.w	r3, r3, #1
 8009406:	b2db      	uxtb	r3, r3
 8009408:	2b00      	cmp	r3, #0
 800940a:	d005      	beq.n	8009418 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7ff ff27 	bl	8009260 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8009412:	4b18      	ldr	r3, [pc, #96]	; (8009474 <SUBGRF_SetRfFrequency+0x84>)
 8009414:	2201      	movs	r2, #1
 8009416:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	461c      	mov	r4, r3
 800941e:	4615      	mov	r5, r2
 8009420:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009424:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009428:	4a13      	ldr	r2, [pc, #76]	; (8009478 <SUBGRF_SetRfFrequency+0x88>)
 800942a:	f04f 0300 	mov.w	r3, #0
 800942e:	4640      	mov	r0, r8
 8009430:	4649      	mov	r1, r9
 8009432:	f7f6 ff05 	bl	8000240 <__aeabi_uldivmod>
 8009436:	4602      	mov	r2, r0
 8009438:	460b      	mov	r3, r1
 800943a:	4613      	mov	r3, r2
 800943c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	0e1b      	lsrs	r3, r3, #24
 8009442:	b2db      	uxtb	r3, r3
 8009444:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	0c1b      	lsrs	r3, r3, #16
 800944a:	b2db      	uxtb	r3, r3
 800944c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	0a1b      	lsrs	r3, r3, #8
 8009452:	b2db      	uxtb	r3, r3
 8009454:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	b2db      	uxtb	r3, r3
 800945a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800945c:	f107 0308 	add.w	r3, r7, #8
 8009460:	2204      	movs	r2, #4
 8009462:	4619      	mov	r1, r3
 8009464:	2086      	movs	r0, #134	; 0x86
 8009466:	f000 fbc7 	bl	8009bf8 <SUBGRF_WriteCommand>
}
 800946a:	bf00      	nop
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009474:	20000748 	.word	0x20000748
 8009478:	01e84800 	.word	0x01e84800

0800947c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	4603      	mov	r3, r0
 8009484:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8009486:	79fa      	ldrb	r2, [r7, #7]
 8009488:	4b09      	ldr	r3, [pc, #36]	; (80094b0 <SUBGRF_SetPacketType+0x34>)
 800948a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800948c:	79fb      	ldrb	r3, [r7, #7]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d104      	bne.n	800949c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8009492:	2100      	movs	r1, #0
 8009494:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8009498:	f000 fafe 	bl	8009a98 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800949c:	1dfb      	adds	r3, r7, #7
 800949e:	2201      	movs	r2, #1
 80094a0:	4619      	mov	r1, r3
 80094a2:	208a      	movs	r0, #138	; 0x8a
 80094a4:	f000 fba8 	bl	8009bf8 <SUBGRF_WriteCommand>
}
 80094a8:	bf00      	nop
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	20000741 	.word	0x20000741

080094b4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80094b4:	b480      	push	{r7}
 80094b6:	af00      	add	r7, sp, #0
    return PacketType;
 80094b8:	4b02      	ldr	r3, [pc, #8]	; (80094c4 <SUBGRF_GetPacketType+0x10>)
 80094ba:	781b      	ldrb	r3, [r3, #0]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	46bd      	mov	sp, r7
 80094c0:	bc80      	pop	{r7}
 80094c2:	4770      	bx	lr
 80094c4:	20000741 	.word	0x20000741

080094c8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	4603      	mov	r3, r0
 80094d0:	71fb      	strb	r3, [r7, #7]
 80094d2:	460b      	mov	r3, r1
 80094d4:	71bb      	strb	r3, [r7, #6]
 80094d6:	4613      	mov	r3, r2
 80094d8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80094da:	79fb      	ldrb	r3, [r7, #7]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d149      	bne.n	8009574 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80094e0:	2000      	movs	r0, #0
 80094e2:	f000 ff42 	bl	800a36a <RBI_GetRFOMaxPowerConfig>
 80094e6:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80094e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	da01      	bge.n	80094f6 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2b0e      	cmp	r3, #14
 80094fa:	d10e      	bne.n	800951a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80094fc:	2301      	movs	r3, #1
 80094fe:	2201      	movs	r2, #1
 8009500:	2100      	movs	r1, #0
 8009502:	2004      	movs	r0, #4
 8009504:	f7ff fef6 	bl	80092f4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009508:	79ba      	ldrb	r2, [r7, #6]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	b2db      	uxtb	r3, r3
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	b2db      	uxtb	r3, r3
 8009512:	330e      	adds	r3, #14
 8009514:	b2db      	uxtb	r3, r3
 8009516:	71bb      	strb	r3, [r7, #6]
 8009518:	e01f      	b.n	800955a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2b0a      	cmp	r3, #10
 800951e:	d10e      	bne.n	800953e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8009520:	2301      	movs	r3, #1
 8009522:	2201      	movs	r2, #1
 8009524:	2100      	movs	r1, #0
 8009526:	2001      	movs	r0, #1
 8009528:	f7ff fee4 	bl	80092f4 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800952c:	79ba      	ldrb	r2, [r7, #6]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	b2db      	uxtb	r3, r3
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	b2db      	uxtb	r3, r3
 8009536:	330d      	adds	r3, #13
 8009538:	b2db      	uxtb	r3, r3
 800953a:	71bb      	strb	r3, [r7, #6]
 800953c:	e00d      	b.n	800955a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800953e:	2301      	movs	r3, #1
 8009540:	2201      	movs	r2, #1
 8009542:	2100      	movs	r1, #0
 8009544:	2007      	movs	r0, #7
 8009546:	f7ff fed5 	bl	80092f4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800954a:	79ba      	ldrb	r2, [r7, #6]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	b2db      	uxtb	r3, r3
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	b2db      	uxtb	r3, r3
 8009554:	330e      	adds	r3, #14
 8009556:	b2db      	uxtb	r3, r3
 8009558:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800955a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800955e:	f113 0f11 	cmn.w	r3, #17
 8009562:	da01      	bge.n	8009568 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8009564:	23ef      	movs	r3, #239	; 0xef
 8009566:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8009568:	2118      	movs	r1, #24
 800956a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800956e:	f000 fa93 	bl	8009a98 <SUBGRF_WriteRegister>
 8009572:	e067      	b.n	8009644 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8009574:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8009578:	f000 faa2 	bl	8009ac0 <SUBGRF_ReadRegister>
 800957c:	4603      	mov	r3, r0
 800957e:	f043 031e 	orr.w	r3, r3, #30
 8009582:	b2db      	uxtb	r3, r3
 8009584:	4619      	mov	r1, r3
 8009586:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800958a:	f000 fa85 	bl	8009a98 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800958e:	2001      	movs	r0, #1
 8009590:	f000 feeb 	bl	800a36a <RBI_GetRFOMaxPowerConfig>
 8009594:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8009596:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	429a      	cmp	r2, r3
 800959e:	da01      	bge.n	80095a4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2b14      	cmp	r3, #20
 80095a8:	d10e      	bne.n	80095c8 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80095aa:	2301      	movs	r3, #1
 80095ac:	2200      	movs	r2, #0
 80095ae:	2105      	movs	r1, #5
 80095b0:	2003      	movs	r0, #3
 80095b2:	f7ff fe9f 	bl	80092f4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80095b6:	79ba      	ldrb	r2, [r7, #6]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	3316      	adds	r3, #22
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	71bb      	strb	r3, [r7, #6]
 80095c6:	e031      	b.n	800962c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2b11      	cmp	r3, #17
 80095cc:	d10e      	bne.n	80095ec <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80095ce:	2301      	movs	r3, #1
 80095d0:	2200      	movs	r2, #0
 80095d2:	2103      	movs	r1, #3
 80095d4:	2002      	movs	r0, #2
 80095d6:	f7ff fe8d 	bl	80092f4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80095da:	79ba      	ldrb	r2, [r7, #6]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	3316      	adds	r3, #22
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	71bb      	strb	r3, [r7, #6]
 80095ea:	e01f      	b.n	800962c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2b0e      	cmp	r3, #14
 80095f0:	d10e      	bne.n	8009610 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80095f2:	2301      	movs	r3, #1
 80095f4:	2200      	movs	r2, #0
 80095f6:	2102      	movs	r1, #2
 80095f8:	2002      	movs	r0, #2
 80095fa:	f7ff fe7b 	bl	80092f4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80095fe:	79ba      	ldrb	r2, [r7, #6]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	b2db      	uxtb	r3, r3
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	b2db      	uxtb	r3, r3
 8009608:	330e      	adds	r3, #14
 800960a:	b2db      	uxtb	r3, r3
 800960c:	71bb      	strb	r3, [r7, #6]
 800960e:	e00d      	b.n	800962c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8009610:	2301      	movs	r3, #1
 8009612:	2200      	movs	r2, #0
 8009614:	2107      	movs	r1, #7
 8009616:	2004      	movs	r0, #4
 8009618:	f7ff fe6c 	bl	80092f4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800961c:	79ba      	ldrb	r2, [r7, #6]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	b2db      	uxtb	r3, r3
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	b2db      	uxtb	r3, r3
 8009626:	3316      	adds	r3, #22
 8009628:	b2db      	uxtb	r3, r3
 800962a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800962c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009630:	f113 0f09 	cmn.w	r3, #9
 8009634:	da01      	bge.n	800963a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8009636:	23f7      	movs	r3, #247	; 0xf7
 8009638:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800963a:	2138      	movs	r1, #56	; 0x38
 800963c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009640:	f000 fa2a 	bl	8009a98 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8009644:	79bb      	ldrb	r3, [r7, #6]
 8009646:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009648:	797b      	ldrb	r3, [r7, #5]
 800964a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800964c:	f107 0308 	add.w	r3, r7, #8
 8009650:	2202      	movs	r2, #2
 8009652:	4619      	mov	r1, r3
 8009654:	208e      	movs	r0, #142	; 0x8e
 8009656:	f000 facf 	bl	8009bf8 <SUBGRF_WriteCommand>
}
 800965a:	bf00      	nop
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
	...

08009664 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8009664:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009668:	b086      	sub	sp, #24
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009672:	4a61      	ldr	r2, [pc, #388]	; (80097f8 <SUBGRF_SetModulationParams+0x194>)
 8009674:	f107 0308 	add.w	r3, r7, #8
 8009678:	e892 0003 	ldmia.w	r2, {r0, r1}
 800967c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	781a      	ldrb	r2, [r3, #0]
 8009684:	4b5d      	ldr	r3, [pc, #372]	; (80097fc <SUBGRF_SetModulationParams+0x198>)
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	429a      	cmp	r2, r3
 800968a:	d004      	beq.n	8009696 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	4618      	mov	r0, r3
 8009692:	f7ff fef3 	bl	800947c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	2b03      	cmp	r3, #3
 800969c:	f200 80a5 	bhi.w	80097ea <SUBGRF_SetModulationParams+0x186>
 80096a0:	a201      	add	r2, pc, #4	; (adr r2, 80096a8 <SUBGRF_SetModulationParams+0x44>)
 80096a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a6:	bf00      	nop
 80096a8:	080096b9 	.word	0x080096b9
 80096ac:	08009779 	.word	0x08009779
 80096b0:	0800973b 	.word	0x0800973b
 80096b4:	080097a7 	.word	0x080097a7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80096b8:	2308      	movs	r3, #8
 80096ba:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	4a4f      	ldr	r2, [pc, #316]	; (8009800 <SUBGRF_SetModulationParams+0x19c>)
 80096c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80096c6:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	0c1b      	lsrs	r3, r3, #16
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	0a1b      	lsrs	r3, r3, #8
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	7b1b      	ldrb	r3, [r3, #12]
 80096e2:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	7b5b      	ldrb	r3, [r3, #13]
 80096e8:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	2200      	movs	r2, #0
 80096f0:	461c      	mov	r4, r3
 80096f2:	4615      	mov	r5, r2
 80096f4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80096f8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80096fc:	4a41      	ldr	r2, [pc, #260]	; (8009804 <SUBGRF_SetModulationParams+0x1a0>)
 80096fe:	f04f 0300 	mov.w	r3, #0
 8009702:	4640      	mov	r0, r8
 8009704:	4649      	mov	r1, r9
 8009706:	f7f6 fd9b 	bl	8000240 <__aeabi_uldivmod>
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	4613      	mov	r3, r2
 8009710:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	0c1b      	lsrs	r3, r3, #16
 8009716:	b2db      	uxtb	r3, r3
 8009718:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	0a1b      	lsrs	r3, r3, #8
 800971e:	b2db      	uxtb	r3, r3
 8009720:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	b2db      	uxtb	r3, r3
 8009726:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009728:	7cfb      	ldrb	r3, [r7, #19]
 800972a:	b29a      	uxth	r2, r3
 800972c:	f107 0308 	add.w	r3, r7, #8
 8009730:	4619      	mov	r1, r3
 8009732:	208b      	movs	r0, #139	; 0x8b
 8009734:	f000 fa60 	bl	8009bf8 <SUBGRF_WriteCommand>
        break;
 8009738:	e058      	b.n	80097ec <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800973a:	2304      	movs	r3, #4
 800973c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	4a2f      	ldr	r2, [pc, #188]	; (8009800 <SUBGRF_SetModulationParams+0x19c>)
 8009744:	fbb2 f3f3 	udiv	r3, r2, r3
 8009748:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	0c1b      	lsrs	r3, r3, #16
 800974e:	b2db      	uxtb	r3, r3
 8009750:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	0a1b      	lsrs	r3, r3, #8
 8009756:	b2db      	uxtb	r3, r3
 8009758:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	b2db      	uxtb	r3, r3
 800975e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	7d1b      	ldrb	r3, [r3, #20]
 8009764:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009766:	7cfb      	ldrb	r3, [r7, #19]
 8009768:	b29a      	uxth	r2, r3
 800976a:	f107 0308 	add.w	r3, r7, #8
 800976e:	4619      	mov	r1, r3
 8009770:	208b      	movs	r0, #139	; 0x8b
 8009772:	f000 fa41 	bl	8009bf8 <SUBGRF_WriteCommand>
        break;
 8009776:	e039      	b.n	80097ec <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8009778:	2304      	movs	r3, #4
 800977a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	7e1b      	ldrb	r3, [r3, #24]
 8009780:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	7e5b      	ldrb	r3, [r3, #25]
 8009786:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	7e9b      	ldrb	r3, [r3, #26]
 800978c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	7edb      	ldrb	r3, [r3, #27]
 8009792:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009794:	7cfb      	ldrb	r3, [r7, #19]
 8009796:	b29a      	uxth	r2, r3
 8009798:	f107 0308 	add.w	r3, r7, #8
 800979c:	4619      	mov	r1, r3
 800979e:	208b      	movs	r0, #139	; 0x8b
 80097a0:	f000 fa2a 	bl	8009bf8 <SUBGRF_WriteCommand>

        break;
 80097a4:	e022      	b.n	80097ec <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 80097a6:	2305      	movs	r3, #5
 80097a8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	4a14      	ldr	r2, [pc, #80]	; (8009800 <SUBGRF_SetModulationParams+0x19c>)
 80097b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	0c1b      	lsrs	r3, r3, #16
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	0a1b      	lsrs	r3, r3, #8
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	7b1b      	ldrb	r3, [r3, #12]
 80097d0:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	7b5b      	ldrb	r3, [r3, #13]
 80097d6:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80097d8:	7cfb      	ldrb	r3, [r7, #19]
 80097da:	b29a      	uxth	r2, r3
 80097dc:	f107 0308 	add.w	r3, r7, #8
 80097e0:	4619      	mov	r1, r3
 80097e2:	208b      	movs	r0, #139	; 0x8b
 80097e4:	f000 fa08 	bl	8009bf8 <SUBGRF_WriteCommand>
        break;
 80097e8:	e000      	b.n	80097ec <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 80097ea:	bf00      	nop
    }
}
 80097ec:	bf00      	nop
 80097ee:	3718      	adds	r7, #24
 80097f0:	46bd      	mov	sp, r7
 80097f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80097f6:	bf00      	nop
 80097f8:	0800bbd8 	.word	0x0800bbd8
 80097fc:	20000741 	.word	0x20000741
 8009800:	3d090000 	.word	0x3d090000
 8009804:	01e84800 	.word	0x01e84800

08009808 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009814:	4a48      	ldr	r2, [pc, #288]	; (8009938 <SUBGRF_SetPacketParams+0x130>)
 8009816:	f107 030c 	add.w	r3, r7, #12
 800981a:	ca07      	ldmia	r2, {r0, r1, r2}
 800981c:	c303      	stmia	r3!, {r0, r1}
 800981e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	781a      	ldrb	r2, [r3, #0]
 8009824:	4b45      	ldr	r3, [pc, #276]	; (800993c <SUBGRF_SetPacketParams+0x134>)
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	429a      	cmp	r2, r3
 800982a:	d004      	beq.n	8009836 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	4618      	mov	r0, r3
 8009832:	f7ff fe23 	bl	800947c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	2b03      	cmp	r3, #3
 800983c:	d878      	bhi.n	8009930 <SUBGRF_SetPacketParams+0x128>
 800983e:	a201      	add	r2, pc, #4	; (adr r2, 8009844 <SUBGRF_SetPacketParams+0x3c>)
 8009840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009844:	08009855 	.word	0x08009855
 8009848:	080098e5 	.word	0x080098e5
 800984c:	080098d9 	.word	0x080098d9
 8009850:	08009855 	.word	0x08009855
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	7a5b      	ldrb	r3, [r3, #9]
 8009858:	2bf1      	cmp	r3, #241	; 0xf1
 800985a:	d10a      	bne.n	8009872 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800985c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009860:	f7ff faaa 	bl	8008db8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8009864:	f248 0005 	movw	r0, #32773	; 0x8005
 8009868:	f7ff fac6 	bl	8008df8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800986c:	2302      	movs	r3, #2
 800986e:	75bb      	strb	r3, [r7, #22]
 8009870:	e011      	b.n	8009896 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	7a5b      	ldrb	r3, [r3, #9]
 8009876:	2bf2      	cmp	r3, #242	; 0xf2
 8009878:	d10a      	bne.n	8009890 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800987a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800987e:	f7ff fa9b 	bl	8008db8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8009882:	f241 0021 	movw	r0, #4129	; 0x1021
 8009886:	f7ff fab7 	bl	8008df8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800988a:	2306      	movs	r3, #6
 800988c:	75bb      	strb	r3, [r7, #22]
 800988e:	e002      	b.n	8009896 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	7a5b      	ldrb	r3, [r3, #9]
 8009894:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8009896:	2309      	movs	r3, #9
 8009898:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	885b      	ldrh	r3, [r3, #2]
 800989e:	0a1b      	lsrs	r3, r3, #8
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	885b      	ldrh	r3, [r3, #2]
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	791b      	ldrb	r3, [r3, #4]
 80098b2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	795b      	ldrb	r3, [r3, #5]
 80098b8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	799b      	ldrb	r3, [r3, #6]
 80098be:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	79db      	ldrb	r3, [r3, #7]
 80098c4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	7a1b      	ldrb	r3, [r3, #8]
 80098ca:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80098cc:	7dbb      	ldrb	r3, [r7, #22]
 80098ce:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	7a9b      	ldrb	r3, [r3, #10]
 80098d4:	753b      	strb	r3, [r7, #20]
        break;
 80098d6:	e022      	b.n	800991e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80098d8:	2301      	movs	r3, #1
 80098da:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	7b1b      	ldrb	r3, [r3, #12]
 80098e0:	733b      	strb	r3, [r7, #12]
        break;
 80098e2:	e01c      	b.n	800991e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80098e4:	2306      	movs	r3, #6
 80098e6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	89db      	ldrh	r3, [r3, #14]
 80098ec:	0a1b      	lsrs	r3, r3, #8
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	89db      	ldrh	r3, [r3, #14]
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	7c1a      	ldrb	r2, [r3, #16]
 8009900:	4b0f      	ldr	r3, [pc, #60]	; (8009940 <SUBGRF_SetPacketParams+0x138>)
 8009902:	4611      	mov	r1, r2
 8009904:	7019      	strb	r1, [r3, #0]
 8009906:	4613      	mov	r3, r2
 8009908:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	7c5b      	ldrb	r3, [r3, #17]
 800990e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	7c9b      	ldrb	r3, [r3, #18]
 8009914:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	7cdb      	ldrb	r3, [r3, #19]
 800991a:	747b      	strb	r3, [r7, #17]
        break;
 800991c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800991e:	7dfb      	ldrb	r3, [r7, #23]
 8009920:	b29a      	uxth	r2, r3
 8009922:	f107 030c 	add.w	r3, r7, #12
 8009926:	4619      	mov	r1, r3
 8009928:	208c      	movs	r0, #140	; 0x8c
 800992a:	f000 f965 	bl	8009bf8 <SUBGRF_WriteCommand>
 800992e:	e000      	b.n	8009932 <SUBGRF_SetPacketParams+0x12a>
        return;
 8009930:	bf00      	nop
}
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	0800bbe0 	.word	0x0800bbe0
 800993c:	20000741 	.word	0x20000741
 8009940:	20000742 	.word	0x20000742

08009944 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	460a      	mov	r2, r1
 800994e:	71fb      	strb	r3, [r7, #7]
 8009950:	4613      	mov	r3, r2
 8009952:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8009954:	79fb      	ldrb	r3, [r7, #7]
 8009956:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8009958:	79bb      	ldrb	r3, [r7, #6]
 800995a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800995c:	f107 030c 	add.w	r3, r7, #12
 8009960:	2202      	movs	r2, #2
 8009962:	4619      	mov	r1, r3
 8009964:	208f      	movs	r0, #143	; 0x8f
 8009966:	f000 f947 	bl	8009bf8 <SUBGRF_WriteCommand>
}
 800996a:	bf00      	nop
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b082      	sub	sp, #8
 8009976:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8009978:	2300      	movs	r3, #0
 800997a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800997c:	1d3b      	adds	r3, r7, #4
 800997e:	2201      	movs	r2, #1
 8009980:	4619      	mov	r1, r3
 8009982:	2015      	movs	r0, #21
 8009984:	f000 f95a 	bl	8009c3c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8009988:	793b      	ldrb	r3, [r7, #4]
 800998a:	425b      	negs	r3, r3
 800998c:	105b      	asrs	r3, r3, #1
 800998e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8009990:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80099a6:	f107 030c 	add.w	r3, r7, #12
 80099aa:	2202      	movs	r2, #2
 80099ac:	4619      	mov	r1, r3
 80099ae:	2013      	movs	r0, #19
 80099b0:	f000 f944 	bl	8009c3c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80099b4:	f7ff fd7e 	bl	80094b4 <SUBGRF_GetPacketType>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d10d      	bne.n	80099da <SUBGRF_GetRxBufferStatus+0x3e>
 80099be:	4b0c      	ldr	r3, [pc, #48]	; (80099f0 <SUBGRF_GetRxBufferStatus+0x54>)
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d108      	bne.n	80099da <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80099c8:	f240 7002 	movw	r0, #1794	; 0x702
 80099cc:	f000 f878 	bl	8009ac0 <SUBGRF_ReadRegister>
 80099d0:	4603      	mov	r3, r0
 80099d2:	461a      	mov	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	701a      	strb	r2, [r3, #0]
 80099d8:	e002      	b.n	80099e0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80099da:	7b3a      	ldrb	r2, [r7, #12]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80099e0:	7b7a      	ldrb	r2, [r7, #13]
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	701a      	strb	r2, [r3, #0]
}
 80099e6:	bf00      	nop
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	20000742 	.word	0x20000742

080099f4 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80099fc:	f107 030c 	add.w	r3, r7, #12
 8009a00:	2203      	movs	r2, #3
 8009a02:	4619      	mov	r1, r3
 8009a04:	2014      	movs	r0, #20
 8009a06:	f000 f919 	bl	8009c3c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8009a0a:	f7ff fd53 	bl	80094b4 <SUBGRF_GetPacketType>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	461a      	mov	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d002      	beq.n	8009a24 <SUBGRF_GetPacketStatus+0x30>
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d013      	beq.n	8009a4a <SUBGRF_GetPacketStatus+0x56>
 8009a22:	e02a      	b.n	8009a7a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8009a24:	7b3a      	ldrb	r2, [r7, #12]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8009a2a:	7b7b      	ldrb	r3, [r7, #13]
 8009a2c:	425b      	negs	r3, r3
 8009a2e:	105b      	asrs	r3, r3, #1
 8009a30:	b25a      	sxtb	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
 8009a38:	425b      	negs	r3, r3
 8009a3a:	105b      	asrs	r3, r3, #1
 8009a3c:	b25a      	sxtb	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	609a      	str	r2, [r3, #8]
            break;
 8009a48:	e020      	b.n	8009a8c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8009a4a:	7b3b      	ldrb	r3, [r7, #12]
 8009a4c:	425b      	negs	r3, r3
 8009a4e:	105b      	asrs	r3, r3, #1
 8009a50:	b25a      	sxtb	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8009a56:	7b7b      	ldrb	r3, [r7, #13]
 8009a58:	b25b      	sxtb	r3, r3
 8009a5a:	3302      	adds	r3, #2
 8009a5c:	109b      	asrs	r3, r3, #2
 8009a5e:	b25a      	sxtb	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8009a64:	7bbb      	ldrb	r3, [r7, #14]
 8009a66:	425b      	negs	r3, r3
 8009a68:	105b      	asrs	r3, r3, #1
 8009a6a:	b25a      	sxtb	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8009a70:	4b08      	ldr	r3, [pc, #32]	; (8009a94 <SUBGRF_GetPacketStatus+0xa0>)
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	611a      	str	r2, [r3, #16]
            break;
 8009a78:	e008      	b.n	8009a8c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8009a7a:	2214      	movs	r2, #20
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fca7 	bl	800a3d2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	220f      	movs	r2, #15
 8009a88:	701a      	strb	r2, [r3, #0]
            break;
 8009a8a:	bf00      	nop
    }
}
 8009a8c:	bf00      	nop
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	20000744 	.word	0x20000744

08009a98 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	460a      	mov	r2, r1
 8009aa2:	80fb      	strh	r3, [r7, #6]
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8009aa8:	1d7a      	adds	r2, r7, #5
 8009aaa:	88f9      	ldrh	r1, [r7, #6]
 8009aac:	2301      	movs	r3, #1
 8009aae:	4803      	ldr	r0, [pc, #12]	; (8009abc <SUBGRF_WriteRegister+0x24>)
 8009ab0:	f7fa f846 	bl	8003b40 <HAL_SUBGHZ_WriteRegisters>
}
 8009ab4:	bf00      	nop
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	20000394 	.word	0x20000394

08009ac0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8009aca:	f107 020f 	add.w	r2, r7, #15
 8009ace:	88f9      	ldrh	r1, [r7, #6]
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	4804      	ldr	r0, [pc, #16]	; (8009ae4 <SUBGRF_ReadRegister+0x24>)
 8009ad4:	f7fa f893 	bl	8003bfe <HAL_SUBGHZ_ReadRegisters>
    return data;
 8009ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20000394 	.word	0x20000394

08009ae8 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	4603      	mov	r3, r0
 8009af0:	6039      	str	r1, [r7, #0]
 8009af2:	80fb      	strh	r3, [r7, #6]
 8009af4:	4613      	mov	r3, r2
 8009af6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009af8:	f3ef 8310 	mrs	r3, PRIMASK
 8009afc:	60fb      	str	r3, [r7, #12]
  return(result);
 8009afe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009b00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b02:	b672      	cpsid	i
}
 8009b04:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8009b06:	88bb      	ldrh	r3, [r7, #4]
 8009b08:	88f9      	ldrh	r1, [r7, #6]
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	4806      	ldr	r0, [pc, #24]	; (8009b28 <SUBGRF_WriteRegisters+0x40>)
 8009b0e:	f7fa f817 	bl	8003b40 <HAL_SUBGHZ_WriteRegisters>
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	f383 8810 	msr	PRIMASK, r3
}
 8009b1c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009b1e:	bf00      	nop
 8009b20:	3718      	adds	r7, #24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	20000394 	.word	0x20000394

08009b2c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b086      	sub	sp, #24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	4603      	mov	r3, r0
 8009b34:	6039      	str	r1, [r7, #0]
 8009b36:	80fb      	strh	r3, [r7, #6]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8009b40:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b42:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009b44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b46:	b672      	cpsid	i
}
 8009b48:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8009b4a:	88bb      	ldrh	r3, [r7, #4]
 8009b4c:	88f9      	ldrh	r1, [r7, #6]
 8009b4e:	683a      	ldr	r2, [r7, #0]
 8009b50:	4806      	ldr	r0, [pc, #24]	; (8009b6c <SUBGRF_ReadRegisters+0x40>)
 8009b52:	f7fa f854 	bl	8003bfe <HAL_SUBGHZ_ReadRegisters>
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	f383 8810 	msr	PRIMASK, r3
}
 8009b60:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009b62:	bf00      	nop
 8009b64:	3718      	adds	r7, #24
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20000394 	.word	0x20000394

08009b70 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	6039      	str	r1, [r7, #0]
 8009b7a:	71fb      	strb	r3, [r7, #7]
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b80:	f3ef 8310 	mrs	r3, PRIMASK
 8009b84:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b86:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009b88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b8a:	b672      	cpsid	i
}
 8009b8c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8009b8e:	79bb      	ldrb	r3, [r7, #6]
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	79f9      	ldrb	r1, [r7, #7]
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	4806      	ldr	r0, [pc, #24]	; (8009bb0 <SUBGRF_WriteBuffer+0x40>)
 8009b98:	f7fa f945 	bl	8003e26 <HAL_SUBGHZ_WriteBuffer>
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	f383 8810 	msr	PRIMASK, r3
}
 8009ba6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009ba8:	bf00      	nop
 8009baa:	3718      	adds	r7, #24
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	20000394 	.word	0x20000394

08009bb4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	4603      	mov	r3, r0
 8009bbc:	6039      	str	r1, [r7, #0]
 8009bbe:	71fb      	strb	r3, [r7, #7]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8009bc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009bca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009bcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bce:	b672      	cpsid	i
}
 8009bd0:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8009bd2:	79bb      	ldrb	r3, [r7, #6]
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	79f9      	ldrb	r1, [r7, #7]
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	4806      	ldr	r0, [pc, #24]	; (8009bf4 <SUBGRF_ReadBuffer+0x40>)
 8009bdc:	f7fa f976 	bl	8003ecc <HAL_SUBGHZ_ReadBuffer>
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	f383 8810 	msr	PRIMASK, r3
}
 8009bea:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009bec:	bf00      	nop
 8009bee:	3718      	adds	r7, #24
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	20000394 	.word	0x20000394

08009bf8 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b086      	sub	sp, #24
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	4603      	mov	r3, r0
 8009c00:	6039      	str	r1, [r7, #0]
 8009c02:	71fb      	strb	r3, [r7, #7]
 8009c04:	4613      	mov	r3, r2
 8009c06:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c08:	f3ef 8310 	mrs	r3, PRIMASK
 8009c0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009c10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c12:	b672      	cpsid	i
}
 8009c14:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8009c16:	88bb      	ldrh	r3, [r7, #4]
 8009c18:	79f9      	ldrb	r1, [r7, #7]
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	4806      	ldr	r0, [pc, #24]	; (8009c38 <SUBGRF_WriteCommand+0x40>)
 8009c1e:	f7fa f84f 	bl	8003cc0 <HAL_SUBGHZ_ExecSetCmd>
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	f383 8810 	msr	PRIMASK, r3
}
 8009c2c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009c2e:	bf00      	nop
 8009c30:	3718      	adds	r7, #24
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	20000394 	.word	0x20000394

08009c3c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	4603      	mov	r3, r0
 8009c44:	6039      	str	r1, [r7, #0]
 8009c46:	71fb      	strb	r3, [r7, #7]
 8009c48:	4613      	mov	r3, r2
 8009c4a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8009c50:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c52:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009c54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c56:	b672      	cpsid	i
}
 8009c58:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8009c5a:	88bb      	ldrh	r3, [r7, #4]
 8009c5c:	79f9      	ldrb	r1, [r7, #7]
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	4806      	ldr	r0, [pc, #24]	; (8009c7c <SUBGRF_ReadCommand+0x40>)
 8009c62:	f7fa f88c 	bl	8003d7e <HAL_SUBGHZ_ExecGetCmd>
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	f383 8810 	msr	PRIMASK, r3
}
 8009c70:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009c72:	bf00      	nop
 8009c74:	3718      	adds	r7, #24
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20000394 	.word	0x20000394

08009c80 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	4603      	mov	r3, r0
 8009c88:	460a      	mov	r2, r1
 8009c8a:	71fb      	strb	r3, [r7, #7]
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8009c90:	2301      	movs	r3, #1
 8009c92:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8009c94:	79bb      	ldrb	r3, [r7, #6]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d10d      	bne.n	8009cb6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8009c9a:	79fb      	ldrb	r3, [r7, #7]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d104      	bne.n	8009caa <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8009ca4:	2004      	movs	r0, #4
 8009ca6:	f000 f8ef 	bl	8009e88 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8009caa:	79fb      	ldrb	r3, [r7, #7]
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d107      	bne.n	8009cc0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	73fb      	strb	r3, [r7, #15]
 8009cb4:	e004      	b.n	8009cc0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8009cb6:	79bb      	ldrb	r3, [r7, #6]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d101      	bne.n	8009cc0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f000 fad2 	bl	800a26c <RBI_ConfigRFSwitch>
}
 8009cc8:	bf00      	nop
 8009cca:	3710      	adds	r7, #16
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8009cde:	f000 fb23 	bl	800a328 <RBI_GetTxConfig>
 8009ce2:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d016      	beq.n	8009d18 <SUBGRF_SetRfTxPower+0x48>
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	dc16      	bgt.n	8009d1e <SUBGRF_SetRfTxPower+0x4e>
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d003      	beq.n	8009cfe <SUBGRF_SetRfTxPower+0x2e>
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d00a      	beq.n	8009d12 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8009cfc:	e00f      	b.n	8009d1e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8009cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d02:	2b0f      	cmp	r3, #15
 8009d04:	dd02      	ble.n	8009d0c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8009d06:	2302      	movs	r3, #2
 8009d08:	73fb      	strb	r3, [r7, #15]
            break;
 8009d0a:	e009      	b.n	8009d20 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	73fb      	strb	r3, [r7, #15]
            break;
 8009d10:	e006      	b.n	8009d20 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8009d12:	2301      	movs	r3, #1
 8009d14:	73fb      	strb	r3, [r7, #15]
            break;
 8009d16:	e003      	b.n	8009d20 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8009d18:	2302      	movs	r3, #2
 8009d1a:	73fb      	strb	r3, [r7, #15]
            break;
 8009d1c:	e000      	b.n	8009d20 <SUBGRF_SetRfTxPower+0x50>
            break;
 8009d1e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8009d20:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
 8009d26:	2202      	movs	r2, #2
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7ff fbcd 	bl	80094c8 <SUBGRF_SetTxParams>

    return paSelect;
 8009d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8009d38:	b480      	push	{r7}
 8009d3a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8009d3c:	2301      	movs	r3, #1
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bc80      	pop	{r7}
 8009d44:	4770      	bx	lr
	...

08009d48 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8009d50:	4b03      	ldr	r3, [pc, #12]	; (8009d60 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2001      	movs	r0, #1
 8009d56:	4798      	blx	r3
}
 8009d58:	bf00      	nop
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	2000074c 	.word	0x2000074c

08009d64 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8009d6c:	4b03      	ldr	r3, [pc, #12]	; (8009d7c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2002      	movs	r0, #2
 8009d72:	4798      	blx	r3
}
 8009d74:	bf00      	nop
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	2000074c 	.word	0x2000074c

08009d80 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8009d88:	4b03      	ldr	r3, [pc, #12]	; (8009d98 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2040      	movs	r0, #64	; 0x40
 8009d8e:	4798      	blx	r3
}
 8009d90:	bf00      	nop
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	2000074c 	.word	0x2000074c

08009d9c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8009da8:	78fb      	ldrb	r3, [r7, #3]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d002      	beq.n	8009db4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d005      	beq.n	8009dbe <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8009db2:	e00a      	b.n	8009dca <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8009db4:	4b07      	ldr	r3, [pc, #28]	; (8009dd4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2080      	movs	r0, #128	; 0x80
 8009dba:	4798      	blx	r3
            break;
 8009dbc:	e005      	b.n	8009dca <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8009dbe:	4b05      	ldr	r3, [pc, #20]	; (8009dd4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009dc6:	4798      	blx	r3
            break;
 8009dc8:	bf00      	nop
    }
}
 8009dca:	bf00      	nop
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	2000074c 	.word	0x2000074c

08009dd8 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8009de0:	4b04      	ldr	r3, [pc, #16]	; (8009df4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009de8:	4798      	blx	r3
}
 8009dea:	bf00      	nop
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	2000074c 	.word	0x2000074c

08009df8 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8009e00:	4b03      	ldr	r3, [pc, #12]	; (8009e10 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2020      	movs	r0, #32
 8009e06:	4798      	blx	r3
}
 8009e08:	bf00      	nop
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	2000074c 	.word	0x2000074c

08009e14 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8009e1c:	4b03      	ldr	r3, [pc, #12]	; (8009e2c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2004      	movs	r0, #4
 8009e22:	4798      	blx	r3
}
 8009e24:	bf00      	nop
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	2000074c 	.word	0x2000074c

08009e30 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8009e38:	4b03      	ldr	r3, [pc, #12]	; (8009e48 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2008      	movs	r0, #8
 8009e3e:	4798      	blx	r3
}
 8009e40:	bf00      	nop
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	2000074c 	.word	0x2000074c

08009e4c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8009e54:	4b03      	ldr	r3, [pc, #12]	; (8009e64 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2010      	movs	r0, #16
 8009e5a:	4798      	blx	r3
}
 8009e5c:	bf00      	nop
 8009e5e:	3708      	adds	r7, #8
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	2000074c 	.word	0x2000074c

08009e68 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8009e70:	4b04      	ldr	r3, [pc, #16]	; (8009e84 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009e78:	4798      	blx	r3
}
 8009e7a:	bf00      	nop
 8009e7c:	3708      	adds	r7, #8
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	2000074c 	.word	0x2000074c

08009e88 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	4603      	mov	r3, r0
 8009e90:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8009e92:	f000 fa5f 	bl	800a354 <RBI_IsDCDC>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d112      	bne.n	8009ec2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8009e9c:	f640 1023 	movw	r0, #2339	; 0x923
 8009ea0:	f7ff fe0e 	bl	8009ac0 <SUBGRF_ReadRegister>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
 8009eaa:	f023 0306 	bic.w	r3, r3, #6
 8009eae:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8009eb0:	7bfa      	ldrb	r2, [r7, #15]
 8009eb2:	79fb      	ldrb	r3, [r7, #7]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	4619      	mov	r1, r3
 8009eba:	f640 1023 	movw	r0, #2339	; 0x923
 8009ebe:	f7ff fdeb 	bl	8009a98 <SUBGRF_WriteRegister>
  }
}
 8009ec2:	bf00      	nop
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
	...

08009ecc <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d101      	bne.n	8009ede <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8009eda:	231f      	movs	r3, #31
 8009edc:	e016      	b.n	8009f0c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8009ede:	2300      	movs	r3, #0
 8009ee0:	73fb      	strb	r3, [r7, #15]
 8009ee2:	e00f      	b.n	8009f04 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8009ee4:	7bfb      	ldrb	r3, [r7, #15]
 8009ee6:	4a0c      	ldr	r2, [pc, #48]	; (8009f18 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8009ee8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d205      	bcs.n	8009efe <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8009ef2:	7bfb      	ldrb	r3, [r7, #15]
 8009ef4:	4a08      	ldr	r2, [pc, #32]	; (8009f18 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8009ef6:	00db      	lsls	r3, r3, #3
 8009ef8:	4413      	add	r3, r2
 8009efa:	791b      	ldrb	r3, [r3, #4]
 8009efc:	e006      	b.n	8009f0c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
 8009f00:	3301      	adds	r3, #1
 8009f02:	73fb      	strb	r3, [r7, #15]
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
 8009f06:	2b15      	cmp	r3, #21
 8009f08:	d9ec      	bls.n	8009ee4 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8009f0a:	e7fe      	b.n	8009f0a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bc80      	pop	{r7}
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	0800bd70 	.word	0x0800bd70

08009f1c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b08a      	sub	sp, #40	; 0x28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8009f26:	4b35      	ldr	r3, [pc, #212]	; (8009ffc <SUBGRF_GetCFO+0xe0>)
 8009f28:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8009f2a:	f640 0007 	movw	r0, #2055	; 0x807
 8009f2e:	f7ff fdc7 	bl	8009ac0 <SUBGRF_ReadRegister>
 8009f32:	4603      	mov	r3, r0
 8009f34:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8009f36:	7ffb      	ldrb	r3, [r7, #31]
 8009f38:	08db      	lsrs	r3, r3, #3
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	f003 0303 	and.w	r3, r3, #3
 8009f40:	3328      	adds	r3, #40	; 0x28
 8009f42:	443b      	add	r3, r7
 8009f44:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8009f48:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8009f4a:	7ffb      	ldrb	r3, [r7, #31]
 8009f4c:	f003 0307 	and.w	r3, r3, #7
 8009f50:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8009f52:	7fba      	ldrb	r2, [r7, #30]
 8009f54:	7f7b      	ldrb	r3, [r7, #29]
 8009f56:	3301      	adds	r3, #1
 8009f58:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	4b28      	ldr	r3, [pc, #160]	; (800a000 <SUBGRF_GetCFO+0xe4>)
 8009f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f64:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8009f66:	69ba      	ldr	r2, [r7, #24]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f6e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8009f70:	2301      	movs	r3, #1
 8009f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8009f76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	fb02 f303 	mul.w	r3, r2, r3
 8009f80:	2b07      	cmp	r3, #7
 8009f82:	d802      	bhi.n	8009f8a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8009f84:	2302      	movs	r3, #2
 8009f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8009f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	fb02 f303 	mul.w	r3, r2, r3
 8009f94:	2b03      	cmp	r3, #3
 8009f96:	d802      	bhi.n	8009f9e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8009f98:	2304      	movs	r3, #4
 8009f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8009f9e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	fb02 f303 	mul.w	r3, r2, r3
 8009fa8:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8009faa:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8009fae:	f7ff fd87 	bl	8009ac0 <SUBGRF_ReadRegister>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	021b      	lsls	r3, r3, #8
 8009fb6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009fba:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8009fbc:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8009fc0:	f7ff fd7e 	bl	8009ac0 <SUBGRF_ReadRegister>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	6a3b      	ldr	r3, [r7, #32]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8009fce:	6a3b      	ldr	r3, [r7, #32]
 8009fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d005      	beq.n	8009fe4 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8009fd8:	6a3b      	ldr	r3, [r7, #32]
 8009fda:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8009fde:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8009fe2:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	095b      	lsrs	r3, r3, #5
 8009fe8:	6a3a      	ldr	r2, [r7, #32]
 8009fea:	fb02 f303 	mul.w	r3, r2, r3
 8009fee:	11da      	asrs	r2, r3, #7
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	601a      	str	r2, [r3, #0]
}
 8009ff4:	bf00      	nop
 8009ff6:	3728      	adds	r7, #40	; 0x28
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	0c0a0804 	.word	0x0c0a0804
 800a000:	01e84800 	.word	0x01e84800

0800a004 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800a004:	b480      	push	{r7}
 800a006:	b087      	sub	sp, #28
 800a008:	af00      	add	r7, sp, #0
 800a00a:	4603      	mov	r3, r0
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
 800a010:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800a012:	2300      	movs	r3, #0
 800a014:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800a016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a01a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a01c:	697b      	ldr	r3, [r7, #20]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	371c      	adds	r7, #28
 800a022:	46bd      	mov	sp, r7
 800a024:	bc80      	pop	{r7}
 800a026:	4770      	bx	lr

0800a028 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800a028:	b480      	push	{r7}
 800a02a:	b087      	sub	sp, #28
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	4603      	mov	r3, r0
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
 800a034:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800a03a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a03e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a040:	697b      	ldr	r3, [r7, #20]
}
 800a042:	4618      	mov	r0, r3
 800a044:	371c      	adds	r7, #28
 800a046:	46bd      	mov	sp, r7
 800a048:	bc80      	pop	{r7}
 800a04a:	4770      	bx	lr

0800a04c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800a058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	bc80      	pop	{r7}
 800a064:	4770      	bx	lr

0800a066 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800a066:	b480      	push	{r7}
 800a068:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800a06a:	bf00      	nop
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bc80      	pop	{r7}
 800a070:	4770      	bx	lr

0800a072 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800a072:	b480      	push	{r7}
 800a074:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800a076:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a078:	4618      	mov	r0, r3
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bc80      	pop	{r7}
 800a07e:	4770      	bx	lr

0800a080 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800a080:	b480      	push	{r7}
 800a082:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800a084:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a086:	4618      	mov	r0, r3
 800a088:	46bd      	mov	sp, r7
 800a08a:	bc80      	pop	{r7}
 800a08c:	4770      	bx	lr

0800a08e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800a08e:	b480      	push	{r7}
 800a090:	b083      	sub	sp, #12
 800a092:	af00      	add	r7, sp, #0
 800a094:	4603      	mov	r3, r0
 800a096:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800a098:	bf00      	nop
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bc80      	pop	{r7}
 800a0a0:	4770      	bx	lr

0800a0a2 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800a0a2:	b480      	push	{r7}
 800a0a4:	b087      	sub	sp, #28
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	60f8      	str	r0, [r7, #12]
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	607a      	str	r2, [r7, #4]
 800a0ae:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800a0b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0b4:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800a0b6:	697b      	ldr	r3, [r7, #20]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	371c      	adds	r7, #28
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bc80      	pop	{r7}
 800a0c0:	4770      	bx	lr

0800a0c2 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800a0c2:	b480      	push	{r7}
 800a0c4:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800a0c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bc80      	pop	{r7}
 800a0d0:	4770      	bx	lr

0800a0d2 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800a0d2:	b480      	push	{r7}
 800a0d4:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800a0d6:	bf00      	nop
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bc80      	pop	{r7}
 800a0dc:	4770      	bx	lr

0800a0de <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800a0de:	b480      	push	{r7}
 800a0e0:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800a0e2:	bf00      	nop
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bc80      	pop	{r7}
 800a0e8:	4770      	bx	lr

0800a0ea <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b083      	sub	sp, #12
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bc80      	pop	{r7}
 800a0fc:	4770      	bx	lr

0800a0fe <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800a102:	f7f7 fc41 	bl	8001988 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800a106:	f000 f809 	bl	800a11c <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800a10a:	bf00      	nop
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800a10e:	b480      	push	{r7}
 800a110:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800a112:	bf00      	nop
 800a114:	46bd      	mov	sp, r7
 800a116:	bc80      	pop	{r7}
 800a118:	4770      	bx	lr
	...

0800a11c <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800a120:	4b0a      	ldr	r3, [pc, #40]	; (800a14c <SubghzApp_Init+0x30>)
 800a122:	4a0b      	ldr	r2, [pc, #44]	; (800a150 <SubghzApp_Init+0x34>)
 800a124:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800a126:	4b09      	ldr	r3, [pc, #36]	; (800a14c <SubghzApp_Init+0x30>)
 800a128:	4a0a      	ldr	r2, [pc, #40]	; (800a154 <SubghzApp_Init+0x38>)
 800a12a:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800a12c:	4b07      	ldr	r3, [pc, #28]	; (800a14c <SubghzApp_Init+0x30>)
 800a12e:	4a0a      	ldr	r2, [pc, #40]	; (800a158 <SubghzApp_Init+0x3c>)
 800a130:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800a132:	4b06      	ldr	r3, [pc, #24]	; (800a14c <SubghzApp_Init+0x30>)
 800a134:	4a09      	ldr	r2, [pc, #36]	; (800a15c <SubghzApp_Init+0x40>)
 800a136:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800a138:	4b04      	ldr	r3, [pc, #16]	; (800a14c <SubghzApp_Init+0x30>)
 800a13a:	4a09      	ldr	r2, [pc, #36]	; (800a160 <SubghzApp_Init+0x44>)
 800a13c:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800a13e:	4b09      	ldr	r3, [pc, #36]	; (800a164 <SubghzApp_Init+0x48>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4802      	ldr	r0, [pc, #8]	; (800a14c <SubghzApp_Init+0x30>)
 800a144:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800a146:	bf00      	nop
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	20000750 	.word	0x20000750
 800a150:	0800a169 	.word	0x0800a169
 800a154:	0800a175 	.word	0x0800a175
 800a158:	0800a199 	.word	0x0800a199
 800a15c:	0800a1a5 	.word	0x0800a1a5
 800a160:	0800a1b1 	.word	0x0800a1b1
 800a164:	0800bce0 	.word	0x0800bce0

0800a168 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800a168:	b480      	push	{r7}
 800a16a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800a16c:	bf00      	nop
 800a16e:	46bd      	mov	sp, r7
 800a170:	bc80      	pop	{r7}
 800a172:	4770      	bx	lr

0800a174 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	4608      	mov	r0, r1
 800a17e:	4611      	mov	r1, r2
 800a180:	461a      	mov	r2, r3
 800a182:	4603      	mov	r3, r0
 800a184:	817b      	strh	r3, [r7, #10]
 800a186:	460b      	mov	r3, r1
 800a188:	813b      	strh	r3, [r7, #8]
 800a18a:	4613      	mov	r3, r2
 800a18c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800a18e:	bf00      	nop
 800a190:	3714      	adds	r7, #20
 800a192:	46bd      	mov	sp, r7
 800a194:	bc80      	pop	{r7}
 800a196:	4770      	bx	lr

0800a198 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800a198:	b480      	push	{r7}
 800a19a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800a19c:	bf00      	nop
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bc80      	pop	{r7}
 800a1a2:	4770      	bx	lr

0800a1a4 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800a1a8:	bf00      	nop
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bc80      	pop	{r7}
 800a1ae:	4770      	bx	lr

0800a1b0 <OnRxError>:

static void OnRxError(void)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800a1b4:	bf00      	nop
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bc80      	pop	{r7}
 800a1ba:	4770      	bx	lr

0800a1bc <LL_AHB2_GRP1_EnableClock>:
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b085      	sub	sp, #20
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a1c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a1d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4013      	ands	r3, r2
 800a1de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
}
 800a1e2:	bf00      	nop
 800a1e4:	3714      	adds	r7, #20
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bc80      	pop	{r7}
 800a1ea:	4770      	bx	lr

0800a1ec <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 800a1f6:	463b      	mov	r3, r7
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	601a      	str	r2, [r3, #0]
 800a1fc:	605a      	str	r2, [r3, #4]
 800a1fe:	609a      	str	r2, [r3, #8]
 800a200:	60da      	str	r2, [r3, #12]
 800a202:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800a204:	2004      	movs	r0, #4
 800a206:	f7ff ffd9 	bl	800a1bc <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 800a20a:	2310      	movs	r3, #16
 800a20c:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800a20e:	2301      	movs	r3, #1
 800a210:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800a212:	2300      	movs	r3, #0
 800a214:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a216:	2303      	movs	r3, #3
 800a218:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800a21a:	463b      	mov	r3, r7
 800a21c:	4619      	mov	r1, r3
 800a21e:	4812      	ldr	r0, [pc, #72]	; (800a268 <RBI_Init+0x7c>)
 800a220:	f7f7 feea 	bl	8001ff8 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800a224:	2320      	movs	r3, #32
 800a226:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800a228:	463b      	mov	r3, r7
 800a22a:	4619      	mov	r1, r3
 800a22c:	480e      	ldr	r0, [pc, #56]	; (800a268 <RBI_Init+0x7c>)
 800a22e:	f7f7 fee3 	bl	8001ff8 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800a232:	2308      	movs	r3, #8
 800a234:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800a236:	463b      	mov	r3, r7
 800a238:	4619      	mov	r1, r3
 800a23a:	480b      	ldr	r0, [pc, #44]	; (800a268 <RBI_Init+0x7c>)
 800a23c:	f7f7 fedc 	bl	8001ff8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800a240:	2200      	movs	r2, #0
 800a242:	2120      	movs	r1, #32
 800a244:	4808      	ldr	r0, [pc, #32]	; (800a268 <RBI_Init+0x7c>)
 800a246:	f7f8 f837 	bl	80022b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800a24a:	2200      	movs	r2, #0
 800a24c:	2110      	movs	r1, #16
 800a24e:	4806      	ldr	r0, [pc, #24]	; (800a268 <RBI_Init+0x7c>)
 800a250:	f7f8 f832 	bl	80022b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800a254:	2200      	movs	r2, #0
 800a256:	2108      	movs	r1, #8
 800a258:	4803      	ldr	r0, [pc, #12]	; (800a268 <RBI_Init+0x7c>)
 800a25a:	f7f8 f82d 	bl	80022b8 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800a25e:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800a260:	4618      	mov	r0, r3
 800a262:	3718      	adds	r7, #24
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	48000800 	.word	0x48000800

0800a26c <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	4603      	mov	r3, r0
 800a274:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800a276:	2300      	movs	r3, #0
 800a278:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
	switch (Config) {
 800a27a:	79fb      	ldrb	r3, [r7, #7]
 800a27c:	2b03      	cmp	r3, #3
 800a27e:	d84b      	bhi.n	800a318 <RBI_ConfigRFSwitch+0xac>
 800a280:	a201      	add	r2, pc, #4	; (adr r2, 800a288 <RBI_ConfigRFSwitch+0x1c>)
 800a282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a286:	bf00      	nop
 800a288:	0800a299 	.word	0x0800a299
 800a28c:	0800a2b9 	.word	0x0800a2b9
 800a290:	0800a2d9 	.word	0x0800a2d9
 800a294:	0800a2f9 	.word	0x0800a2f9
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
 800a298:	2200      	movs	r2, #0
 800a29a:	2108      	movs	r1, #8
 800a29c:	4821      	ldr	r0, [pc, #132]	; (800a324 <RBI_ConfigRFSwitch+0xb8>)
 800a29e:	f7f8 f80b 	bl	80022b8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	2110      	movs	r1, #16
 800a2a6:	481f      	ldr	r0, [pc, #124]	; (800a324 <RBI_ConfigRFSwitch+0xb8>)
 800a2a8:	f7f8 f806 	bl	80022b8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	2120      	movs	r1, #32
 800a2b0:	481c      	ldr	r0, [pc, #112]	; (800a324 <RBI_ConfigRFSwitch+0xb8>)
 800a2b2:	f7f8 f801 	bl	80022b8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800a2b6:	e030      	b.n	800a31a <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	2108      	movs	r1, #8
 800a2bc:	4819      	ldr	r0, [pc, #100]	; (800a324 <RBI_ConfigRFSwitch+0xb8>)
 800a2be:	f7f7 fffb 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	2110      	movs	r1, #16
 800a2c6:	4817      	ldr	r0, [pc, #92]	; (800a324 <RBI_ConfigRFSwitch+0xb8>)
 800a2c8:	f7f7 fff6 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	2120      	movs	r1, #32
 800a2d0:	4814      	ldr	r0, [pc, #80]	; (800a324 <RBI_ConfigRFSwitch+0xb8>)
 800a2d2:	f7f7 fff1 	bl	80022b8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800a2d6:	e020      	b.n	800a31a <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800a2d8:	2201      	movs	r2, #1
 800a2da:	2108      	movs	r1, #8
 800a2dc:	4811      	ldr	r0, [pc, #68]	; (800a324 <RBI_ConfigRFSwitch+0xb8>)
 800a2de:	f7f7 ffeb 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	2110      	movs	r1, #16
 800a2e6:	480f      	ldr	r0, [pc, #60]	; (800a324 <RBI_ConfigRFSwitch+0xb8>)
 800a2e8:	f7f7 ffe6 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	2120      	movs	r1, #32
 800a2f0:	480c      	ldr	r0, [pc, #48]	; (800a324 <RBI_ConfigRFSwitch+0xb8>)
 800a2f2:	f7f7 ffe1 	bl	80022b8 <HAL_GPIO_WritePin>
		break;
 800a2f6:	e010      	b.n	800a31a <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	2108      	movs	r1, #8
 800a2fc:	4809      	ldr	r0, [pc, #36]	; (800a324 <RBI_ConfigRFSwitch+0xb8>)
 800a2fe:	f7f7 ffdb 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800a302:	2200      	movs	r2, #0
 800a304:	2110      	movs	r1, #16
 800a306:	4807      	ldr	r0, [pc, #28]	; (800a324 <RBI_ConfigRFSwitch+0xb8>)
 800a308:	f7f7 ffd6 	bl	80022b8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800a30c:	2201      	movs	r2, #1
 800a30e:	2120      	movs	r1, #32
 800a310:	4804      	ldr	r0, [pc, #16]	; (800a324 <RBI_ConfigRFSwitch+0xb8>)
 800a312:	f7f7 ffd1 	bl	80022b8 <HAL_GPIO_WritePin>
		break;
 800a316:	e000      	b.n	800a31a <RBI_ConfigRFSwitch+0xae>
	}
	default:
		break;
 800a318:	bf00      	nop
	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800a31a:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	48000800 	.word	0x48000800

0800a328 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800a32e:	2300      	movs	r3, #0
 800a330:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 800a332:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a334:	4618      	mov	r0, r3
 800a336:	370c      	adds	r7, #12
 800a338:	46bd      	mov	sp, r7
 800a33a:	bc80      	pop	{r7}
 800a33c:	4770      	bx	lr

0800a33e <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a33e:	b480      	push	{r7}
 800a340:	b083      	sub	sp, #12
 800a342:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800a344:	2301      	movs	r3, #1
 800a346:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 800a348:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	bc80      	pop	{r7}
 800a352:	4770      	bx	lr

0800a354 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800a35a:	2301      	movs	r3, #1
 800a35c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 800a35e:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a360:	4618      	mov	r0, r3
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	bc80      	pop	{r7}
 800a368:	4770      	bx	lr

0800a36a <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b085      	sub	sp, #20
 800a36e:	af00      	add	r7, sp, #0
 800a370:	4603      	mov	r3, r0
 800a372:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800a374:	2300      	movs	r3, #0
 800a376:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 800a378:	79fb      	ldrb	r3, [r7, #7]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d102      	bne.n	800a384 <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 800a37e:	230f      	movs	r3, #15
 800a380:	60fb      	str	r3, [r7, #12]
 800a382:	e001      	b.n	800a388 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 800a384:	2316      	movs	r3, #22
 800a386:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800a388:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3714      	adds	r7, #20
 800a38e:	46bd      	mov	sp, r7
 800a390:	bc80      	pop	{r7}
 800a392:	4770      	bx	lr

0800a394 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800a394:	b480      	push	{r7}
 800a396:	b087      	sub	sp, #28
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	4613      	mov	r3, r2
 800a3a0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	613b      	str	r3, [r7, #16]

  while( size-- )
 800a3aa:	e007      	b.n	800a3bc <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800a3ac:	693a      	ldr	r2, [r7, #16]
 800a3ae:	1c53      	adds	r3, r2, #1
 800a3b0:	613b      	str	r3, [r7, #16]
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	1c59      	adds	r1, r3, #1
 800a3b6:	6179      	str	r1, [r7, #20]
 800a3b8:	7812      	ldrb	r2, [r2, #0]
 800a3ba:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800a3bc:	88fb      	ldrh	r3, [r7, #6]
 800a3be:	1e5a      	subs	r2, r3, #1
 800a3c0:	80fa      	strh	r2, [r7, #6]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1f2      	bne.n	800a3ac <UTIL_MEM_cpy_8+0x18>
    }
}
 800a3c6:	bf00      	nop
 800a3c8:	bf00      	nop
 800a3ca:	371c      	adds	r7, #28
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bc80      	pop	{r7}
 800a3d0:	4770      	bx	lr

0800a3d2 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b085      	sub	sp, #20
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	460b      	mov	r3, r1
 800a3dc:	70fb      	strb	r3, [r7, #3]
 800a3de:	4613      	mov	r3, r2
 800a3e0:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800a3e6:	e004      	b.n	800a3f2 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	1c5a      	adds	r2, r3, #1
 800a3ec:	60fa      	str	r2, [r7, #12]
 800a3ee:	78fa      	ldrb	r2, [r7, #3]
 800a3f0:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800a3f2:	883b      	ldrh	r3, [r7, #0]
 800a3f4:	1e5a      	subs	r2, r3, #1
 800a3f6:	803a      	strh	r2, [r7, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1f5      	bne.n	800a3e8 <UTIL_MEM_set_8+0x16>
  }
}
 800a3fc:	bf00      	nop
 800a3fe:	bf00      	nop
 800a400:	3714      	adds	r7, #20
 800a402:	46bd      	mov	sp, r7
 800a404:	bc80      	pop	{r7}
 800a406:	4770      	bx	lr

0800a408 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	603b      	str	r3, [r7, #0]
 800a414:	4613      	mov	r3, r2
 800a416:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d023      	beq.n	800a466 <UTIL_TIMER_Create+0x5e>
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d020      	beq.n	800a466 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2200      	movs	r2, #0
 800a428:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800a42a:	4b11      	ldr	r3, [pc, #68]	; (800a470 <UTIL_TIMER_Create+0x68>)
 800a42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42e:	68b8      	ldr	r0, [r7, #8]
 800a430:	4798      	blx	r3
 800a432:	4602      	mov	r2, r0
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2200      	movs	r2, #0
 800a43c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	683a      	ldr	r2, [r7, #0]
 800a44e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	69ba      	ldr	r2, [r7, #24]
 800a454:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	79fa      	ldrb	r2, [r7, #7]
 800a45a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800a462:	2300      	movs	r3, #0
 800a464:	e000      	b.n	800a468 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800a466:	2301      	movs	r3, #1
  }
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3710      	adds	r7, #16
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	0800bc8c 	.word	0x0800bc8c

0800a474 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b08a      	sub	sp, #40	; 0x28
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a47c:	2300      	movs	r3, #0
 800a47e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d056      	beq.n	800a536 <UTIL_TIMER_Start+0xc2>
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 f929 	bl	800a6e0 <TimerExists>
 800a48e:	4603      	mov	r3, r0
 800a490:	f083 0301 	eor.w	r3, r3, #1
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b00      	cmp	r3, #0
 800a498:	d04d      	beq.n	800a536 <UTIL_TIMER_Start+0xc2>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	7a5b      	ldrb	r3, [r3, #9]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d149      	bne.n	800a536 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4a2:	f3ef 8310 	mrs	r3, PRIMASK
 800a4a6:	613b      	str	r3, [r7, #16]
  return(result);
 800a4a8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800a4aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4ac:	b672      	cpsid	i
}
 800a4ae:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800a4b6:	4b24      	ldr	r3, [pc, #144]	; (800a548 <UTIL_TIMER_Start+0xd4>)
 800a4b8:	6a1b      	ldr	r3, [r3, #32]
 800a4ba:	4798      	blx	r3
 800a4bc:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800a4be:	6a3a      	ldr	r2, [r7, #32]
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d201      	bcs.n	800a4ca <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a3a      	ldr	r2, [r7, #32]
 800a4ce:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800a4e2:	4b1a      	ldr	r3, [pc, #104]	; (800a54c <UTIL_TIMER_Start+0xd8>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d106      	bne.n	800a4f8 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800a4ea:	4b17      	ldr	r3, [pc, #92]	; (800a548 <UTIL_TIMER_Start+0xd4>)
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 f96b 	bl	800a7cc <TimerInsertNewHeadTimer>
 800a4f6:	e017      	b.n	800a528 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800a4f8:	4b13      	ldr	r3, [pc, #76]	; (800a548 <UTIL_TIMER_Start+0xd4>)
 800a4fa:	699b      	ldr	r3, [r3, #24]
 800a4fc:	4798      	blx	r3
 800a4fe:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	441a      	add	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	4b0e      	ldr	r3, [pc, #56]	; (800a54c <UTIL_TIMER_Start+0xd8>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	429a      	cmp	r2, r3
 800a518:	d203      	bcs.n	800a522 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f956 	bl	800a7cc <TimerInsertNewHeadTimer>
 800a520:	e002      	b.n	800a528 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f922 	bl	800a76c <TimerInsertTimer>
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f383 8810 	msr	PRIMASK, r3
}
 800a532:	bf00      	nop
  {
 800a534:	e002      	b.n	800a53c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800a536:	2301      	movs	r3, #1
 800a538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800a53c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a540:	4618      	mov	r0, r3
 800a542:	3728      	adds	r7, #40	; 0x28
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	0800bc8c 	.word	0x0800bc8c
 800a54c:	2000076c 	.word	0x2000076c

0800a550 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b088      	sub	sp, #32
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a558:	2300      	movs	r3, #0
 800a55a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d05b      	beq.n	800a61a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a562:	f3ef 8310 	mrs	r3, PRIMASK
 800a566:	60fb      	str	r3, [r7, #12]
  return(result);
 800a568:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800a56a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a56c:	b672      	cpsid	i
}
 800a56e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800a570:	4b2d      	ldr	r3, [pc, #180]	; (800a628 <UTIL_TIMER_Stop+0xd8>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800a576:	4b2c      	ldr	r3, [pc, #176]	; (800a628 <UTIL_TIMER_Stop+0xd8>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800a582:	4b29      	ldr	r3, [pc, #164]	; (800a628 <UTIL_TIMER_Stop+0xd8>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d041      	beq.n	800a60e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800a590:	4b25      	ldr	r3, [pc, #148]	; (800a628 <UTIL_TIMER_Stop+0xd8>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	429a      	cmp	r2, r3
 800a598:	d134      	bne.n	800a604 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800a59a:	4b23      	ldr	r3, [pc, #140]	; (800a628 <UTIL_TIMER_Stop+0xd8>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800a5a2:	4b21      	ldr	r3, [pc, #132]	; (800a628 <UTIL_TIMER_Stop+0xd8>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	695b      	ldr	r3, [r3, #20]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00a      	beq.n	800a5c2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800a5ac:	4b1e      	ldr	r3, [pc, #120]	; (800a628 <UTIL_TIMER_Stop+0xd8>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	695b      	ldr	r3, [r3, #20]
 800a5b2:	4a1d      	ldr	r2, [pc, #116]	; (800a628 <UTIL_TIMER_Stop+0xd8>)
 800a5b4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800a5b6:	4b1c      	ldr	r3, [pc, #112]	; (800a628 <UTIL_TIMER_Stop+0xd8>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f000 f8ac 	bl	800a718 <TimerSetTimeout>
 800a5c0:	e023      	b.n	800a60a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800a5c2:	4b1a      	ldr	r3, [pc, #104]	; (800a62c <UTIL_TIMER_Stop+0xdc>)
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	4798      	blx	r3
            TimerListHead = NULL;
 800a5c8:	4b17      	ldr	r3, [pc, #92]	; (800a628 <UTIL_TIMER_Stop+0xd8>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	601a      	str	r2, [r3, #0]
 800a5ce:	e01c      	b.n	800a60a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800a5d0:	697a      	ldr	r2, [r7, #20]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d110      	bne.n	800a5fa <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	695b      	ldr	r3, [r3, #20]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d006      	beq.n	800a5ee <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	695b      	ldr	r3, [r3, #20]
 800a5e4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	697a      	ldr	r2, [r7, #20]
 800a5ea:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800a5ec:	e00d      	b.n	800a60a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	697a      	ldr	r2, [r7, #20]
 800a5f6:	615a      	str	r2, [r3, #20]
            break;
 800a5f8:	e007      	b.n	800a60a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1e2      	bne.n	800a5d0 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	77fb      	strb	r3, [r7, #31]
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	f383 8810 	msr	PRIMASK, r3
}
 800a618:	e001      	b.n	800a61e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800a61a:	2301      	movs	r3, #1
 800a61c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800a61e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3720      	adds	r7, #32
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	2000076c 	.word	0x2000076c
 800a62c:	0800bc8c 	.word	0x0800bc8c

0800a630 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a63a:	2300      	movs	r3, #0
 800a63c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d102      	bne.n	800a64a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800a644:	2301      	movs	r3, #1
 800a646:	73fb      	strb	r3, [r7, #15]
 800a648:	e014      	b.n	800a674 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800a64a:	4b0d      	ldr	r3, [pc, #52]	; (800a680 <UTIL_TIMER_SetPeriod+0x50>)
 800a64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64e:	6838      	ldr	r0, [r7, #0]
 800a650:	4798      	blx	r3
 800a652:	4602      	mov	r2, r0
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f841 	bl	800a6e0 <TimerExists>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d007      	beq.n	800a674 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f7ff ff73 	bl	800a550 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f7ff ff02 	bl	800a474 <UTIL_TIMER_Start>
 800a670:	4603      	mov	r3, r0
 800a672:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800a674:	7bfb      	ldrb	r3, [r7, #15]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	0800bc8c 	.word	0x0800bc8c

0800a684 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800a68a:	4b06      	ldr	r3, [pc, #24]	; (800a6a4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800a68c:	69db      	ldr	r3, [r3, #28]
 800a68e:	4798      	blx	r3
 800a690:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800a692:	4b04      	ldr	r3, [pc, #16]	; (800a6a4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800a694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	4798      	blx	r3
 800a69a:	4603      	mov	r3, r0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3708      	adds	r7, #8
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	0800bc8c 	.word	0x0800bc8c

0800a6a8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800a6b0:	4b0a      	ldr	r3, [pc, #40]	; (800a6dc <UTIL_TIMER_GetElapsedTime+0x34>)
 800a6b2:	69db      	ldr	r3, [r3, #28]
 800a6b4:	4798      	blx	r3
 800a6b6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800a6b8:	4b08      	ldr	r3, [pc, #32]	; (800a6dc <UTIL_TIMER_GetElapsedTime+0x34>)
 800a6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	4798      	blx	r3
 800a6c0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800a6c2:	4b06      	ldr	r3, [pc, #24]	; (800a6dc <UTIL_TIMER_GetElapsedTime+0x34>)
 800a6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c6:	68f9      	ldr	r1, [r7, #12]
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	1a8a      	subs	r2, r1, r2
 800a6cc:	4610      	mov	r0, r2
 800a6ce:	4798      	blx	r3
 800a6d0:	4603      	mov	r3, r0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	0800bc8c 	.word	0x0800bc8c

0800a6e0 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b085      	sub	sp, #20
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a6e8:	4b0a      	ldr	r3, [pc, #40]	; (800a714 <TimerExists+0x34>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800a6ee:	e008      	b.n	800a702 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d101      	bne.n	800a6fc <TimerExists+0x1c>
    {
      return true;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e006      	b.n	800a70a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	695b      	ldr	r3, [r3, #20]
 800a700:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1f3      	bne.n	800a6f0 <TimerExists+0x10>
  }
  return false;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3714      	adds	r7, #20
 800a70e:	46bd      	mov	sp, r7
 800a710:	bc80      	pop	{r7}
 800a712:	4770      	bx	lr
 800a714:	2000076c 	.word	0x2000076c

0800a718 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800a718:	b590      	push	{r4, r7, lr}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800a720:	4b11      	ldr	r3, [pc, #68]	; (800a768 <TimerSetTimeout+0x50>)
 800a722:	6a1b      	ldr	r3, [r3, #32]
 800a724:	4798      	blx	r3
 800a726:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681c      	ldr	r4, [r3, #0]
 800a732:	4b0d      	ldr	r3, [pc, #52]	; (800a768 <TimerSetTimeout+0x50>)
 800a734:	699b      	ldr	r3, [r3, #24]
 800a736:	4798      	blx	r3
 800a738:	4602      	mov	r2, r0
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	4413      	add	r3, r2
 800a73e:	429c      	cmp	r4, r3
 800a740:	d207      	bcs.n	800a752 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800a742:	4b09      	ldr	r3, [pc, #36]	; (800a768 <TimerSetTimeout+0x50>)
 800a744:	699b      	ldr	r3, [r3, #24]
 800a746:	4798      	blx	r3
 800a748:	4602      	mov	r2, r0
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	441a      	add	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800a752:	4b05      	ldr	r3, [pc, #20]	; (800a768 <TimerSetTimeout+0x50>)
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	6812      	ldr	r2, [r2, #0]
 800a75a:	4610      	mov	r0, r2
 800a75c:	4798      	blx	r3
}
 800a75e:	bf00      	nop
 800a760:	3714      	adds	r7, #20
 800a762:	46bd      	mov	sp, r7
 800a764:	bd90      	pop	{r4, r7, pc}
 800a766:	bf00      	nop
 800a768:	0800bc8c 	.word	0x0800bc8c

0800a76c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a774:	4b14      	ldr	r3, [pc, #80]	; (800a7c8 <TimerInsertTimer+0x5c>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800a77a:	4b13      	ldr	r3, [pc, #76]	; (800a7c8 <TimerInsertTimer+0x5c>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	695b      	ldr	r3, [r3, #20]
 800a780:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800a782:	e012      	b.n	800a7aa <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d905      	bls.n	800a79c <TimerInsertTimer+0x30>
    {
        cur = next;
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	695b      	ldr	r3, [r3, #20]
 800a798:	60bb      	str	r3, [r7, #8]
 800a79a:	e006      	b.n	800a7aa <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	68ba      	ldr	r2, [r7, #8]
 800a7a6:	615a      	str	r2, [r3, #20]
        return;
 800a7a8:	e009      	b.n	800a7be <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1e8      	bne.n	800a784 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	615a      	str	r2, [r3, #20]
}
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bc80      	pop	{r7}
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	2000076c 	.word	0x2000076c

0800a7cc <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a7d4:	4b0b      	ldr	r3, [pc, #44]	; (800a804 <TimerInsertNewHeadTimer+0x38>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d002      	beq.n	800a7e6 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800a7ec:	4a05      	ldr	r2, [pc, #20]	; (800a804 <TimerInsertNewHeadTimer+0x38>)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800a7f2:	4b04      	ldr	r3, [pc, #16]	; (800a804 <TimerInsertNewHeadTimer+0x38>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7ff ff8e 	bl	800a718 <TimerSetTimeout>
}
 800a7fc:	bf00      	nop
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}
 800a804:	2000076c 	.word	0x2000076c

0800a808 <siprintf>:
 800a808:	b40e      	push	{r1, r2, r3}
 800a80a:	b500      	push	{lr}
 800a80c:	b09c      	sub	sp, #112	; 0x70
 800a80e:	ab1d      	add	r3, sp, #116	; 0x74
 800a810:	9002      	str	r0, [sp, #8]
 800a812:	9006      	str	r0, [sp, #24]
 800a814:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a818:	4809      	ldr	r0, [pc, #36]	; (800a840 <siprintf+0x38>)
 800a81a:	9107      	str	r1, [sp, #28]
 800a81c:	9104      	str	r1, [sp, #16]
 800a81e:	4909      	ldr	r1, [pc, #36]	; (800a844 <siprintf+0x3c>)
 800a820:	f853 2b04 	ldr.w	r2, [r3], #4
 800a824:	9105      	str	r1, [sp, #20]
 800a826:	6800      	ldr	r0, [r0, #0]
 800a828:	9301      	str	r3, [sp, #4]
 800a82a:	a902      	add	r1, sp, #8
 800a82c:	f000 f8e2 	bl	800a9f4 <_svfiprintf_r>
 800a830:	9b02      	ldr	r3, [sp, #8]
 800a832:	2200      	movs	r2, #0
 800a834:	701a      	strb	r2, [r3, #0]
 800a836:	b01c      	add	sp, #112	; 0x70
 800a838:	f85d eb04 	ldr.w	lr, [sp], #4
 800a83c:	b003      	add	sp, #12
 800a83e:	4770      	bx	lr
 800a840:	2000005c 	.word	0x2000005c
 800a844:	ffff0208 	.word	0xffff0208

0800a848 <_vsniprintf_r>:
 800a848:	b530      	push	{r4, r5, lr}
 800a84a:	4614      	mov	r4, r2
 800a84c:	2c00      	cmp	r4, #0
 800a84e:	b09b      	sub	sp, #108	; 0x6c
 800a850:	4605      	mov	r5, r0
 800a852:	461a      	mov	r2, r3
 800a854:	da05      	bge.n	800a862 <_vsniprintf_r+0x1a>
 800a856:	238b      	movs	r3, #139	; 0x8b
 800a858:	6003      	str	r3, [r0, #0]
 800a85a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a85e:	b01b      	add	sp, #108	; 0x6c
 800a860:	bd30      	pop	{r4, r5, pc}
 800a862:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a866:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a86a:	bf14      	ite	ne
 800a86c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a870:	4623      	moveq	r3, r4
 800a872:	9302      	str	r3, [sp, #8]
 800a874:	9305      	str	r3, [sp, #20]
 800a876:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a87a:	9100      	str	r1, [sp, #0]
 800a87c:	9104      	str	r1, [sp, #16]
 800a87e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a882:	4669      	mov	r1, sp
 800a884:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a886:	f000 f8b5 	bl	800a9f4 <_svfiprintf_r>
 800a88a:	1c43      	adds	r3, r0, #1
 800a88c:	bfbc      	itt	lt
 800a88e:	238b      	movlt	r3, #139	; 0x8b
 800a890:	602b      	strlt	r3, [r5, #0]
 800a892:	2c00      	cmp	r4, #0
 800a894:	d0e3      	beq.n	800a85e <_vsniprintf_r+0x16>
 800a896:	9b00      	ldr	r3, [sp, #0]
 800a898:	2200      	movs	r2, #0
 800a89a:	701a      	strb	r2, [r3, #0]
 800a89c:	e7df      	b.n	800a85e <_vsniprintf_r+0x16>
	...

0800a8a0 <vsniprintf>:
 800a8a0:	b507      	push	{r0, r1, r2, lr}
 800a8a2:	9300      	str	r3, [sp, #0]
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	460a      	mov	r2, r1
 800a8a8:	4601      	mov	r1, r0
 800a8aa:	4803      	ldr	r0, [pc, #12]	; (800a8b8 <vsniprintf+0x18>)
 800a8ac:	6800      	ldr	r0, [r0, #0]
 800a8ae:	f7ff ffcb 	bl	800a848 <_vsniprintf_r>
 800a8b2:	b003      	add	sp, #12
 800a8b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a8b8:	2000005c 	.word	0x2000005c

0800a8bc <memset>:
 800a8bc:	4402      	add	r2, r0
 800a8be:	4603      	mov	r3, r0
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d100      	bne.n	800a8c6 <memset+0xa>
 800a8c4:	4770      	bx	lr
 800a8c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a8ca:	e7f9      	b.n	800a8c0 <memset+0x4>

0800a8cc <__errno>:
 800a8cc:	4b01      	ldr	r3, [pc, #4]	; (800a8d4 <__errno+0x8>)
 800a8ce:	6818      	ldr	r0, [r3, #0]
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop
 800a8d4:	2000005c 	.word	0x2000005c

0800a8d8 <__libc_init_array>:
 800a8d8:	b570      	push	{r4, r5, r6, lr}
 800a8da:	4d0d      	ldr	r5, [pc, #52]	; (800a910 <__libc_init_array+0x38>)
 800a8dc:	4c0d      	ldr	r4, [pc, #52]	; (800a914 <__libc_init_array+0x3c>)
 800a8de:	1b64      	subs	r4, r4, r5
 800a8e0:	10a4      	asrs	r4, r4, #2
 800a8e2:	2600      	movs	r6, #0
 800a8e4:	42a6      	cmp	r6, r4
 800a8e6:	d109      	bne.n	800a8fc <__libc_init_array+0x24>
 800a8e8:	4d0b      	ldr	r5, [pc, #44]	; (800a918 <__libc_init_array+0x40>)
 800a8ea:	4c0c      	ldr	r4, [pc, #48]	; (800a91c <__libc_init_array+0x44>)
 800a8ec:	f000 fc68 	bl	800b1c0 <_init>
 800a8f0:	1b64      	subs	r4, r4, r5
 800a8f2:	10a4      	asrs	r4, r4, #2
 800a8f4:	2600      	movs	r6, #0
 800a8f6:	42a6      	cmp	r6, r4
 800a8f8:	d105      	bne.n	800a906 <__libc_init_array+0x2e>
 800a8fa:	bd70      	pop	{r4, r5, r6, pc}
 800a8fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a900:	4798      	blx	r3
 800a902:	3601      	adds	r6, #1
 800a904:	e7ee      	b.n	800a8e4 <__libc_init_array+0xc>
 800a906:	f855 3b04 	ldr.w	r3, [r5], #4
 800a90a:	4798      	blx	r3
 800a90c:	3601      	adds	r6, #1
 800a90e:	e7f2      	b.n	800a8f6 <__libc_init_array+0x1e>
 800a910:	0800be5c 	.word	0x0800be5c
 800a914:	0800be5c 	.word	0x0800be5c
 800a918:	0800be5c 	.word	0x0800be5c
 800a91c:	0800be60 	.word	0x0800be60

0800a920 <__retarget_lock_acquire_recursive>:
 800a920:	4770      	bx	lr

0800a922 <__retarget_lock_release_recursive>:
 800a922:	4770      	bx	lr

0800a924 <memcpy>:
 800a924:	440a      	add	r2, r1
 800a926:	4291      	cmp	r1, r2
 800a928:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a92c:	d100      	bne.n	800a930 <memcpy+0xc>
 800a92e:	4770      	bx	lr
 800a930:	b510      	push	{r4, lr}
 800a932:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a93a:	4291      	cmp	r1, r2
 800a93c:	d1f9      	bne.n	800a932 <memcpy+0xe>
 800a93e:	bd10      	pop	{r4, pc}

0800a940 <__ssputs_r>:
 800a940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a944:	688e      	ldr	r6, [r1, #8]
 800a946:	461f      	mov	r7, r3
 800a948:	42be      	cmp	r6, r7
 800a94a:	680b      	ldr	r3, [r1, #0]
 800a94c:	4682      	mov	sl, r0
 800a94e:	460c      	mov	r4, r1
 800a950:	4690      	mov	r8, r2
 800a952:	d82c      	bhi.n	800a9ae <__ssputs_r+0x6e>
 800a954:	898a      	ldrh	r2, [r1, #12]
 800a956:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a95a:	d026      	beq.n	800a9aa <__ssputs_r+0x6a>
 800a95c:	6965      	ldr	r5, [r4, #20]
 800a95e:	6909      	ldr	r1, [r1, #16]
 800a960:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a964:	eba3 0901 	sub.w	r9, r3, r1
 800a968:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a96c:	1c7b      	adds	r3, r7, #1
 800a96e:	444b      	add	r3, r9
 800a970:	106d      	asrs	r5, r5, #1
 800a972:	429d      	cmp	r5, r3
 800a974:	bf38      	it	cc
 800a976:	461d      	movcc	r5, r3
 800a978:	0553      	lsls	r3, r2, #21
 800a97a:	d527      	bpl.n	800a9cc <__ssputs_r+0x8c>
 800a97c:	4629      	mov	r1, r5
 800a97e:	f000 f957 	bl	800ac30 <_malloc_r>
 800a982:	4606      	mov	r6, r0
 800a984:	b360      	cbz	r0, 800a9e0 <__ssputs_r+0xa0>
 800a986:	6921      	ldr	r1, [r4, #16]
 800a988:	464a      	mov	r2, r9
 800a98a:	f7ff ffcb 	bl	800a924 <memcpy>
 800a98e:	89a3      	ldrh	r3, [r4, #12]
 800a990:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a998:	81a3      	strh	r3, [r4, #12]
 800a99a:	6126      	str	r6, [r4, #16]
 800a99c:	6165      	str	r5, [r4, #20]
 800a99e:	444e      	add	r6, r9
 800a9a0:	eba5 0509 	sub.w	r5, r5, r9
 800a9a4:	6026      	str	r6, [r4, #0]
 800a9a6:	60a5      	str	r5, [r4, #8]
 800a9a8:	463e      	mov	r6, r7
 800a9aa:	42be      	cmp	r6, r7
 800a9ac:	d900      	bls.n	800a9b0 <__ssputs_r+0x70>
 800a9ae:	463e      	mov	r6, r7
 800a9b0:	6820      	ldr	r0, [r4, #0]
 800a9b2:	4632      	mov	r2, r6
 800a9b4:	4641      	mov	r1, r8
 800a9b6:	f000 fb86 	bl	800b0c6 <memmove>
 800a9ba:	68a3      	ldr	r3, [r4, #8]
 800a9bc:	1b9b      	subs	r3, r3, r6
 800a9be:	60a3      	str	r3, [r4, #8]
 800a9c0:	6823      	ldr	r3, [r4, #0]
 800a9c2:	4433      	add	r3, r6
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9cc:	462a      	mov	r2, r5
 800a9ce:	f000 fb4b 	bl	800b068 <_realloc_r>
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d1e0      	bne.n	800a99a <__ssputs_r+0x5a>
 800a9d8:	6921      	ldr	r1, [r4, #16]
 800a9da:	4650      	mov	r0, sl
 800a9dc:	f000 fb9e 	bl	800b11c <_free_r>
 800a9e0:	230c      	movs	r3, #12
 800a9e2:	f8ca 3000 	str.w	r3, [sl]
 800a9e6:	89a3      	ldrh	r3, [r4, #12]
 800a9e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9ec:	81a3      	strh	r3, [r4, #12]
 800a9ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9f2:	e7e9      	b.n	800a9c8 <__ssputs_r+0x88>

0800a9f4 <_svfiprintf_r>:
 800a9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f8:	4698      	mov	r8, r3
 800a9fa:	898b      	ldrh	r3, [r1, #12]
 800a9fc:	061b      	lsls	r3, r3, #24
 800a9fe:	b09d      	sub	sp, #116	; 0x74
 800aa00:	4607      	mov	r7, r0
 800aa02:	460d      	mov	r5, r1
 800aa04:	4614      	mov	r4, r2
 800aa06:	d50e      	bpl.n	800aa26 <_svfiprintf_r+0x32>
 800aa08:	690b      	ldr	r3, [r1, #16]
 800aa0a:	b963      	cbnz	r3, 800aa26 <_svfiprintf_r+0x32>
 800aa0c:	2140      	movs	r1, #64	; 0x40
 800aa0e:	f000 f90f 	bl	800ac30 <_malloc_r>
 800aa12:	6028      	str	r0, [r5, #0]
 800aa14:	6128      	str	r0, [r5, #16]
 800aa16:	b920      	cbnz	r0, 800aa22 <_svfiprintf_r+0x2e>
 800aa18:	230c      	movs	r3, #12
 800aa1a:	603b      	str	r3, [r7, #0]
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa20:	e0d0      	b.n	800abc4 <_svfiprintf_r+0x1d0>
 800aa22:	2340      	movs	r3, #64	; 0x40
 800aa24:	616b      	str	r3, [r5, #20]
 800aa26:	2300      	movs	r3, #0
 800aa28:	9309      	str	r3, [sp, #36]	; 0x24
 800aa2a:	2320      	movs	r3, #32
 800aa2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa30:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa34:	2330      	movs	r3, #48	; 0x30
 800aa36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800abdc <_svfiprintf_r+0x1e8>
 800aa3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa3e:	f04f 0901 	mov.w	r9, #1
 800aa42:	4623      	mov	r3, r4
 800aa44:	469a      	mov	sl, r3
 800aa46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa4a:	b10a      	cbz	r2, 800aa50 <_svfiprintf_r+0x5c>
 800aa4c:	2a25      	cmp	r2, #37	; 0x25
 800aa4e:	d1f9      	bne.n	800aa44 <_svfiprintf_r+0x50>
 800aa50:	ebba 0b04 	subs.w	fp, sl, r4
 800aa54:	d00b      	beq.n	800aa6e <_svfiprintf_r+0x7a>
 800aa56:	465b      	mov	r3, fp
 800aa58:	4622      	mov	r2, r4
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	4638      	mov	r0, r7
 800aa5e:	f7ff ff6f 	bl	800a940 <__ssputs_r>
 800aa62:	3001      	adds	r0, #1
 800aa64:	f000 80a9 	beq.w	800abba <_svfiprintf_r+0x1c6>
 800aa68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa6a:	445a      	add	r2, fp
 800aa6c:	9209      	str	r2, [sp, #36]	; 0x24
 800aa6e:	f89a 3000 	ldrb.w	r3, [sl]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	f000 80a1 	beq.w	800abba <_svfiprintf_r+0x1c6>
 800aa78:	2300      	movs	r3, #0
 800aa7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa82:	f10a 0a01 	add.w	sl, sl, #1
 800aa86:	9304      	str	r3, [sp, #16]
 800aa88:	9307      	str	r3, [sp, #28]
 800aa8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa8e:	931a      	str	r3, [sp, #104]	; 0x68
 800aa90:	4654      	mov	r4, sl
 800aa92:	2205      	movs	r2, #5
 800aa94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa98:	4850      	ldr	r0, [pc, #320]	; (800abdc <_svfiprintf_r+0x1e8>)
 800aa9a:	f7f5 fb81 	bl	80001a0 <memchr>
 800aa9e:	9a04      	ldr	r2, [sp, #16]
 800aaa0:	b9d8      	cbnz	r0, 800aada <_svfiprintf_r+0xe6>
 800aaa2:	06d0      	lsls	r0, r2, #27
 800aaa4:	bf44      	itt	mi
 800aaa6:	2320      	movmi	r3, #32
 800aaa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaac:	0711      	lsls	r1, r2, #28
 800aaae:	bf44      	itt	mi
 800aab0:	232b      	movmi	r3, #43	; 0x2b
 800aab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aab6:	f89a 3000 	ldrb.w	r3, [sl]
 800aaba:	2b2a      	cmp	r3, #42	; 0x2a
 800aabc:	d015      	beq.n	800aaea <_svfiprintf_r+0xf6>
 800aabe:	9a07      	ldr	r2, [sp, #28]
 800aac0:	4654      	mov	r4, sl
 800aac2:	2000      	movs	r0, #0
 800aac4:	f04f 0c0a 	mov.w	ip, #10
 800aac8:	4621      	mov	r1, r4
 800aaca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aace:	3b30      	subs	r3, #48	; 0x30
 800aad0:	2b09      	cmp	r3, #9
 800aad2:	d94d      	bls.n	800ab70 <_svfiprintf_r+0x17c>
 800aad4:	b1b0      	cbz	r0, 800ab04 <_svfiprintf_r+0x110>
 800aad6:	9207      	str	r2, [sp, #28]
 800aad8:	e014      	b.n	800ab04 <_svfiprintf_r+0x110>
 800aada:	eba0 0308 	sub.w	r3, r0, r8
 800aade:	fa09 f303 	lsl.w	r3, r9, r3
 800aae2:	4313      	orrs	r3, r2
 800aae4:	9304      	str	r3, [sp, #16]
 800aae6:	46a2      	mov	sl, r4
 800aae8:	e7d2      	b.n	800aa90 <_svfiprintf_r+0x9c>
 800aaea:	9b03      	ldr	r3, [sp, #12]
 800aaec:	1d19      	adds	r1, r3, #4
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	9103      	str	r1, [sp, #12]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	bfbb      	ittet	lt
 800aaf6:	425b      	neglt	r3, r3
 800aaf8:	f042 0202 	orrlt.w	r2, r2, #2
 800aafc:	9307      	strge	r3, [sp, #28]
 800aafe:	9307      	strlt	r3, [sp, #28]
 800ab00:	bfb8      	it	lt
 800ab02:	9204      	strlt	r2, [sp, #16]
 800ab04:	7823      	ldrb	r3, [r4, #0]
 800ab06:	2b2e      	cmp	r3, #46	; 0x2e
 800ab08:	d10c      	bne.n	800ab24 <_svfiprintf_r+0x130>
 800ab0a:	7863      	ldrb	r3, [r4, #1]
 800ab0c:	2b2a      	cmp	r3, #42	; 0x2a
 800ab0e:	d134      	bne.n	800ab7a <_svfiprintf_r+0x186>
 800ab10:	9b03      	ldr	r3, [sp, #12]
 800ab12:	1d1a      	adds	r2, r3, #4
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	9203      	str	r2, [sp, #12]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	bfb8      	it	lt
 800ab1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ab20:	3402      	adds	r4, #2
 800ab22:	9305      	str	r3, [sp, #20]
 800ab24:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800abe0 <_svfiprintf_r+0x1ec>
 800ab28:	7821      	ldrb	r1, [r4, #0]
 800ab2a:	2203      	movs	r2, #3
 800ab2c:	4650      	mov	r0, sl
 800ab2e:	f7f5 fb37 	bl	80001a0 <memchr>
 800ab32:	b138      	cbz	r0, 800ab44 <_svfiprintf_r+0x150>
 800ab34:	9b04      	ldr	r3, [sp, #16]
 800ab36:	eba0 000a 	sub.w	r0, r0, sl
 800ab3a:	2240      	movs	r2, #64	; 0x40
 800ab3c:	4082      	lsls	r2, r0
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	3401      	adds	r4, #1
 800ab42:	9304      	str	r3, [sp, #16]
 800ab44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab48:	4826      	ldr	r0, [pc, #152]	; (800abe4 <_svfiprintf_r+0x1f0>)
 800ab4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab4e:	2206      	movs	r2, #6
 800ab50:	f7f5 fb26 	bl	80001a0 <memchr>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d038      	beq.n	800abca <_svfiprintf_r+0x1d6>
 800ab58:	4b23      	ldr	r3, [pc, #140]	; (800abe8 <_svfiprintf_r+0x1f4>)
 800ab5a:	bb1b      	cbnz	r3, 800aba4 <_svfiprintf_r+0x1b0>
 800ab5c:	9b03      	ldr	r3, [sp, #12]
 800ab5e:	3307      	adds	r3, #7
 800ab60:	f023 0307 	bic.w	r3, r3, #7
 800ab64:	3308      	adds	r3, #8
 800ab66:	9303      	str	r3, [sp, #12]
 800ab68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab6a:	4433      	add	r3, r6
 800ab6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab6e:	e768      	b.n	800aa42 <_svfiprintf_r+0x4e>
 800ab70:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab74:	460c      	mov	r4, r1
 800ab76:	2001      	movs	r0, #1
 800ab78:	e7a6      	b.n	800aac8 <_svfiprintf_r+0xd4>
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	3401      	adds	r4, #1
 800ab7e:	9305      	str	r3, [sp, #20]
 800ab80:	4619      	mov	r1, r3
 800ab82:	f04f 0c0a 	mov.w	ip, #10
 800ab86:	4620      	mov	r0, r4
 800ab88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab8c:	3a30      	subs	r2, #48	; 0x30
 800ab8e:	2a09      	cmp	r2, #9
 800ab90:	d903      	bls.n	800ab9a <_svfiprintf_r+0x1a6>
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d0c6      	beq.n	800ab24 <_svfiprintf_r+0x130>
 800ab96:	9105      	str	r1, [sp, #20]
 800ab98:	e7c4      	b.n	800ab24 <_svfiprintf_r+0x130>
 800ab9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab9e:	4604      	mov	r4, r0
 800aba0:	2301      	movs	r3, #1
 800aba2:	e7f0      	b.n	800ab86 <_svfiprintf_r+0x192>
 800aba4:	ab03      	add	r3, sp, #12
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	462a      	mov	r2, r5
 800abaa:	4b10      	ldr	r3, [pc, #64]	; (800abec <_svfiprintf_r+0x1f8>)
 800abac:	a904      	add	r1, sp, #16
 800abae:	4638      	mov	r0, r7
 800abb0:	f3af 8000 	nop.w
 800abb4:	1c42      	adds	r2, r0, #1
 800abb6:	4606      	mov	r6, r0
 800abb8:	d1d6      	bne.n	800ab68 <_svfiprintf_r+0x174>
 800abba:	89ab      	ldrh	r3, [r5, #12]
 800abbc:	065b      	lsls	r3, r3, #25
 800abbe:	f53f af2d 	bmi.w	800aa1c <_svfiprintf_r+0x28>
 800abc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abc4:	b01d      	add	sp, #116	; 0x74
 800abc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abca:	ab03      	add	r3, sp, #12
 800abcc:	9300      	str	r3, [sp, #0]
 800abce:	462a      	mov	r2, r5
 800abd0:	4b06      	ldr	r3, [pc, #24]	; (800abec <_svfiprintf_r+0x1f8>)
 800abd2:	a904      	add	r1, sp, #16
 800abd4:	4638      	mov	r0, r7
 800abd6:	f000 f919 	bl	800ae0c <_printf_i>
 800abda:	e7eb      	b.n	800abb4 <_svfiprintf_r+0x1c0>
 800abdc:	0800be20 	.word	0x0800be20
 800abe0:	0800be26 	.word	0x0800be26
 800abe4:	0800be2a 	.word	0x0800be2a
 800abe8:	00000000 	.word	0x00000000
 800abec:	0800a941 	.word	0x0800a941

0800abf0 <sbrk_aligned>:
 800abf0:	b570      	push	{r4, r5, r6, lr}
 800abf2:	4e0e      	ldr	r6, [pc, #56]	; (800ac2c <sbrk_aligned+0x3c>)
 800abf4:	460c      	mov	r4, r1
 800abf6:	6831      	ldr	r1, [r6, #0]
 800abf8:	4605      	mov	r5, r0
 800abfa:	b911      	cbnz	r1, 800ac02 <sbrk_aligned+0x12>
 800abfc:	f000 fa7e 	bl	800b0fc <_sbrk_r>
 800ac00:	6030      	str	r0, [r6, #0]
 800ac02:	4621      	mov	r1, r4
 800ac04:	4628      	mov	r0, r5
 800ac06:	f000 fa79 	bl	800b0fc <_sbrk_r>
 800ac0a:	1c43      	adds	r3, r0, #1
 800ac0c:	d00a      	beq.n	800ac24 <sbrk_aligned+0x34>
 800ac0e:	1cc4      	adds	r4, r0, #3
 800ac10:	f024 0403 	bic.w	r4, r4, #3
 800ac14:	42a0      	cmp	r0, r4
 800ac16:	d007      	beq.n	800ac28 <sbrk_aligned+0x38>
 800ac18:	1a21      	subs	r1, r4, r0
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	f000 fa6e 	bl	800b0fc <_sbrk_r>
 800ac20:	3001      	adds	r0, #1
 800ac22:	d101      	bne.n	800ac28 <sbrk_aligned+0x38>
 800ac24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ac28:	4620      	mov	r0, r4
 800ac2a:	bd70      	pop	{r4, r5, r6, pc}
 800ac2c:	200008b0 	.word	0x200008b0

0800ac30 <_malloc_r>:
 800ac30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac34:	1ccd      	adds	r5, r1, #3
 800ac36:	f025 0503 	bic.w	r5, r5, #3
 800ac3a:	3508      	adds	r5, #8
 800ac3c:	2d0c      	cmp	r5, #12
 800ac3e:	bf38      	it	cc
 800ac40:	250c      	movcc	r5, #12
 800ac42:	2d00      	cmp	r5, #0
 800ac44:	4607      	mov	r7, r0
 800ac46:	db01      	blt.n	800ac4c <_malloc_r+0x1c>
 800ac48:	42a9      	cmp	r1, r5
 800ac4a:	d905      	bls.n	800ac58 <_malloc_r+0x28>
 800ac4c:	230c      	movs	r3, #12
 800ac4e:	603b      	str	r3, [r7, #0]
 800ac50:	2600      	movs	r6, #0
 800ac52:	4630      	mov	r0, r6
 800ac54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ad2c <_malloc_r+0xfc>
 800ac5c:	f000 f9f8 	bl	800b050 <__malloc_lock>
 800ac60:	f8d8 3000 	ldr.w	r3, [r8]
 800ac64:	461c      	mov	r4, r3
 800ac66:	bb5c      	cbnz	r4, 800acc0 <_malloc_r+0x90>
 800ac68:	4629      	mov	r1, r5
 800ac6a:	4638      	mov	r0, r7
 800ac6c:	f7ff ffc0 	bl	800abf0 <sbrk_aligned>
 800ac70:	1c43      	adds	r3, r0, #1
 800ac72:	4604      	mov	r4, r0
 800ac74:	d155      	bne.n	800ad22 <_malloc_r+0xf2>
 800ac76:	f8d8 4000 	ldr.w	r4, [r8]
 800ac7a:	4626      	mov	r6, r4
 800ac7c:	2e00      	cmp	r6, #0
 800ac7e:	d145      	bne.n	800ad0c <_malloc_r+0xdc>
 800ac80:	2c00      	cmp	r4, #0
 800ac82:	d048      	beq.n	800ad16 <_malloc_r+0xe6>
 800ac84:	6823      	ldr	r3, [r4, #0]
 800ac86:	4631      	mov	r1, r6
 800ac88:	4638      	mov	r0, r7
 800ac8a:	eb04 0903 	add.w	r9, r4, r3
 800ac8e:	f000 fa35 	bl	800b0fc <_sbrk_r>
 800ac92:	4581      	cmp	r9, r0
 800ac94:	d13f      	bne.n	800ad16 <_malloc_r+0xe6>
 800ac96:	6821      	ldr	r1, [r4, #0]
 800ac98:	1a6d      	subs	r5, r5, r1
 800ac9a:	4629      	mov	r1, r5
 800ac9c:	4638      	mov	r0, r7
 800ac9e:	f7ff ffa7 	bl	800abf0 <sbrk_aligned>
 800aca2:	3001      	adds	r0, #1
 800aca4:	d037      	beq.n	800ad16 <_malloc_r+0xe6>
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	442b      	add	r3, r5
 800acaa:	6023      	str	r3, [r4, #0]
 800acac:	f8d8 3000 	ldr.w	r3, [r8]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d038      	beq.n	800ad26 <_malloc_r+0xf6>
 800acb4:	685a      	ldr	r2, [r3, #4]
 800acb6:	42a2      	cmp	r2, r4
 800acb8:	d12b      	bne.n	800ad12 <_malloc_r+0xe2>
 800acba:	2200      	movs	r2, #0
 800acbc:	605a      	str	r2, [r3, #4]
 800acbe:	e00f      	b.n	800ace0 <_malloc_r+0xb0>
 800acc0:	6822      	ldr	r2, [r4, #0]
 800acc2:	1b52      	subs	r2, r2, r5
 800acc4:	d41f      	bmi.n	800ad06 <_malloc_r+0xd6>
 800acc6:	2a0b      	cmp	r2, #11
 800acc8:	d917      	bls.n	800acfa <_malloc_r+0xca>
 800acca:	1961      	adds	r1, r4, r5
 800accc:	42a3      	cmp	r3, r4
 800acce:	6025      	str	r5, [r4, #0]
 800acd0:	bf18      	it	ne
 800acd2:	6059      	strne	r1, [r3, #4]
 800acd4:	6863      	ldr	r3, [r4, #4]
 800acd6:	bf08      	it	eq
 800acd8:	f8c8 1000 	streq.w	r1, [r8]
 800acdc:	5162      	str	r2, [r4, r5]
 800acde:	604b      	str	r3, [r1, #4]
 800ace0:	4638      	mov	r0, r7
 800ace2:	f104 060b 	add.w	r6, r4, #11
 800ace6:	f000 f9b9 	bl	800b05c <__malloc_unlock>
 800acea:	f026 0607 	bic.w	r6, r6, #7
 800acee:	1d23      	adds	r3, r4, #4
 800acf0:	1af2      	subs	r2, r6, r3
 800acf2:	d0ae      	beq.n	800ac52 <_malloc_r+0x22>
 800acf4:	1b9b      	subs	r3, r3, r6
 800acf6:	50a3      	str	r3, [r4, r2]
 800acf8:	e7ab      	b.n	800ac52 <_malloc_r+0x22>
 800acfa:	42a3      	cmp	r3, r4
 800acfc:	6862      	ldr	r2, [r4, #4]
 800acfe:	d1dd      	bne.n	800acbc <_malloc_r+0x8c>
 800ad00:	f8c8 2000 	str.w	r2, [r8]
 800ad04:	e7ec      	b.n	800ace0 <_malloc_r+0xb0>
 800ad06:	4623      	mov	r3, r4
 800ad08:	6864      	ldr	r4, [r4, #4]
 800ad0a:	e7ac      	b.n	800ac66 <_malloc_r+0x36>
 800ad0c:	4634      	mov	r4, r6
 800ad0e:	6876      	ldr	r6, [r6, #4]
 800ad10:	e7b4      	b.n	800ac7c <_malloc_r+0x4c>
 800ad12:	4613      	mov	r3, r2
 800ad14:	e7cc      	b.n	800acb0 <_malloc_r+0x80>
 800ad16:	230c      	movs	r3, #12
 800ad18:	603b      	str	r3, [r7, #0]
 800ad1a:	4638      	mov	r0, r7
 800ad1c:	f000 f99e 	bl	800b05c <__malloc_unlock>
 800ad20:	e797      	b.n	800ac52 <_malloc_r+0x22>
 800ad22:	6025      	str	r5, [r4, #0]
 800ad24:	e7dc      	b.n	800ace0 <_malloc_r+0xb0>
 800ad26:	605b      	str	r3, [r3, #4]
 800ad28:	deff      	udf	#255	; 0xff
 800ad2a:	bf00      	nop
 800ad2c:	200008ac 	.word	0x200008ac

0800ad30 <_printf_common>:
 800ad30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad34:	4616      	mov	r6, r2
 800ad36:	4699      	mov	r9, r3
 800ad38:	688a      	ldr	r2, [r1, #8]
 800ad3a:	690b      	ldr	r3, [r1, #16]
 800ad3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad40:	4293      	cmp	r3, r2
 800ad42:	bfb8      	it	lt
 800ad44:	4613      	movlt	r3, r2
 800ad46:	6033      	str	r3, [r6, #0]
 800ad48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad4c:	4607      	mov	r7, r0
 800ad4e:	460c      	mov	r4, r1
 800ad50:	b10a      	cbz	r2, 800ad56 <_printf_common+0x26>
 800ad52:	3301      	adds	r3, #1
 800ad54:	6033      	str	r3, [r6, #0]
 800ad56:	6823      	ldr	r3, [r4, #0]
 800ad58:	0699      	lsls	r1, r3, #26
 800ad5a:	bf42      	ittt	mi
 800ad5c:	6833      	ldrmi	r3, [r6, #0]
 800ad5e:	3302      	addmi	r3, #2
 800ad60:	6033      	strmi	r3, [r6, #0]
 800ad62:	6825      	ldr	r5, [r4, #0]
 800ad64:	f015 0506 	ands.w	r5, r5, #6
 800ad68:	d106      	bne.n	800ad78 <_printf_common+0x48>
 800ad6a:	f104 0a19 	add.w	sl, r4, #25
 800ad6e:	68e3      	ldr	r3, [r4, #12]
 800ad70:	6832      	ldr	r2, [r6, #0]
 800ad72:	1a9b      	subs	r3, r3, r2
 800ad74:	42ab      	cmp	r3, r5
 800ad76:	dc26      	bgt.n	800adc6 <_printf_common+0x96>
 800ad78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ad7c:	1e13      	subs	r3, r2, #0
 800ad7e:	6822      	ldr	r2, [r4, #0]
 800ad80:	bf18      	it	ne
 800ad82:	2301      	movne	r3, #1
 800ad84:	0692      	lsls	r2, r2, #26
 800ad86:	d42b      	bmi.n	800ade0 <_printf_common+0xb0>
 800ad88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad8c:	4649      	mov	r1, r9
 800ad8e:	4638      	mov	r0, r7
 800ad90:	47c0      	blx	r8
 800ad92:	3001      	adds	r0, #1
 800ad94:	d01e      	beq.n	800add4 <_printf_common+0xa4>
 800ad96:	6823      	ldr	r3, [r4, #0]
 800ad98:	6922      	ldr	r2, [r4, #16]
 800ad9a:	f003 0306 	and.w	r3, r3, #6
 800ad9e:	2b04      	cmp	r3, #4
 800ada0:	bf02      	ittt	eq
 800ada2:	68e5      	ldreq	r5, [r4, #12]
 800ada4:	6833      	ldreq	r3, [r6, #0]
 800ada6:	1aed      	subeq	r5, r5, r3
 800ada8:	68a3      	ldr	r3, [r4, #8]
 800adaa:	bf0c      	ite	eq
 800adac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800adb0:	2500      	movne	r5, #0
 800adb2:	4293      	cmp	r3, r2
 800adb4:	bfc4      	itt	gt
 800adb6:	1a9b      	subgt	r3, r3, r2
 800adb8:	18ed      	addgt	r5, r5, r3
 800adba:	2600      	movs	r6, #0
 800adbc:	341a      	adds	r4, #26
 800adbe:	42b5      	cmp	r5, r6
 800adc0:	d11a      	bne.n	800adf8 <_printf_common+0xc8>
 800adc2:	2000      	movs	r0, #0
 800adc4:	e008      	b.n	800add8 <_printf_common+0xa8>
 800adc6:	2301      	movs	r3, #1
 800adc8:	4652      	mov	r2, sl
 800adca:	4649      	mov	r1, r9
 800adcc:	4638      	mov	r0, r7
 800adce:	47c0      	blx	r8
 800add0:	3001      	adds	r0, #1
 800add2:	d103      	bne.n	800addc <_printf_common+0xac>
 800add4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800add8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800addc:	3501      	adds	r5, #1
 800adde:	e7c6      	b.n	800ad6e <_printf_common+0x3e>
 800ade0:	18e1      	adds	r1, r4, r3
 800ade2:	1c5a      	adds	r2, r3, #1
 800ade4:	2030      	movs	r0, #48	; 0x30
 800ade6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800adea:	4422      	add	r2, r4
 800adec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800adf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800adf4:	3302      	adds	r3, #2
 800adf6:	e7c7      	b.n	800ad88 <_printf_common+0x58>
 800adf8:	2301      	movs	r3, #1
 800adfa:	4622      	mov	r2, r4
 800adfc:	4649      	mov	r1, r9
 800adfe:	4638      	mov	r0, r7
 800ae00:	47c0      	blx	r8
 800ae02:	3001      	adds	r0, #1
 800ae04:	d0e6      	beq.n	800add4 <_printf_common+0xa4>
 800ae06:	3601      	adds	r6, #1
 800ae08:	e7d9      	b.n	800adbe <_printf_common+0x8e>
	...

0800ae0c <_printf_i>:
 800ae0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae10:	7e0f      	ldrb	r7, [r1, #24]
 800ae12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae14:	2f78      	cmp	r7, #120	; 0x78
 800ae16:	4691      	mov	r9, r2
 800ae18:	4680      	mov	r8, r0
 800ae1a:	460c      	mov	r4, r1
 800ae1c:	469a      	mov	sl, r3
 800ae1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ae22:	d807      	bhi.n	800ae34 <_printf_i+0x28>
 800ae24:	2f62      	cmp	r7, #98	; 0x62
 800ae26:	d80a      	bhi.n	800ae3e <_printf_i+0x32>
 800ae28:	2f00      	cmp	r7, #0
 800ae2a:	f000 80d4 	beq.w	800afd6 <_printf_i+0x1ca>
 800ae2e:	2f58      	cmp	r7, #88	; 0x58
 800ae30:	f000 80c0 	beq.w	800afb4 <_printf_i+0x1a8>
 800ae34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ae3c:	e03a      	b.n	800aeb4 <_printf_i+0xa8>
 800ae3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ae42:	2b15      	cmp	r3, #21
 800ae44:	d8f6      	bhi.n	800ae34 <_printf_i+0x28>
 800ae46:	a101      	add	r1, pc, #4	; (adr r1, 800ae4c <_printf_i+0x40>)
 800ae48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae4c:	0800aea5 	.word	0x0800aea5
 800ae50:	0800aeb9 	.word	0x0800aeb9
 800ae54:	0800ae35 	.word	0x0800ae35
 800ae58:	0800ae35 	.word	0x0800ae35
 800ae5c:	0800ae35 	.word	0x0800ae35
 800ae60:	0800ae35 	.word	0x0800ae35
 800ae64:	0800aeb9 	.word	0x0800aeb9
 800ae68:	0800ae35 	.word	0x0800ae35
 800ae6c:	0800ae35 	.word	0x0800ae35
 800ae70:	0800ae35 	.word	0x0800ae35
 800ae74:	0800ae35 	.word	0x0800ae35
 800ae78:	0800afbd 	.word	0x0800afbd
 800ae7c:	0800aee5 	.word	0x0800aee5
 800ae80:	0800af77 	.word	0x0800af77
 800ae84:	0800ae35 	.word	0x0800ae35
 800ae88:	0800ae35 	.word	0x0800ae35
 800ae8c:	0800afdf 	.word	0x0800afdf
 800ae90:	0800ae35 	.word	0x0800ae35
 800ae94:	0800aee5 	.word	0x0800aee5
 800ae98:	0800ae35 	.word	0x0800ae35
 800ae9c:	0800ae35 	.word	0x0800ae35
 800aea0:	0800af7f 	.word	0x0800af7f
 800aea4:	682b      	ldr	r3, [r5, #0]
 800aea6:	1d1a      	adds	r2, r3, #4
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	602a      	str	r2, [r5, #0]
 800aeac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aeb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e09f      	b.n	800aff8 <_printf_i+0x1ec>
 800aeb8:	6820      	ldr	r0, [r4, #0]
 800aeba:	682b      	ldr	r3, [r5, #0]
 800aebc:	0607      	lsls	r7, r0, #24
 800aebe:	f103 0104 	add.w	r1, r3, #4
 800aec2:	6029      	str	r1, [r5, #0]
 800aec4:	d501      	bpl.n	800aeca <_printf_i+0xbe>
 800aec6:	681e      	ldr	r6, [r3, #0]
 800aec8:	e003      	b.n	800aed2 <_printf_i+0xc6>
 800aeca:	0646      	lsls	r6, r0, #25
 800aecc:	d5fb      	bpl.n	800aec6 <_printf_i+0xba>
 800aece:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aed2:	2e00      	cmp	r6, #0
 800aed4:	da03      	bge.n	800aede <_printf_i+0xd2>
 800aed6:	232d      	movs	r3, #45	; 0x2d
 800aed8:	4276      	negs	r6, r6
 800aeda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aede:	485a      	ldr	r0, [pc, #360]	; (800b048 <_printf_i+0x23c>)
 800aee0:	230a      	movs	r3, #10
 800aee2:	e012      	b.n	800af0a <_printf_i+0xfe>
 800aee4:	682b      	ldr	r3, [r5, #0]
 800aee6:	6820      	ldr	r0, [r4, #0]
 800aee8:	1d19      	adds	r1, r3, #4
 800aeea:	6029      	str	r1, [r5, #0]
 800aeec:	0605      	lsls	r5, r0, #24
 800aeee:	d501      	bpl.n	800aef4 <_printf_i+0xe8>
 800aef0:	681e      	ldr	r6, [r3, #0]
 800aef2:	e002      	b.n	800aefa <_printf_i+0xee>
 800aef4:	0641      	lsls	r1, r0, #25
 800aef6:	d5fb      	bpl.n	800aef0 <_printf_i+0xe4>
 800aef8:	881e      	ldrh	r6, [r3, #0]
 800aefa:	4853      	ldr	r0, [pc, #332]	; (800b048 <_printf_i+0x23c>)
 800aefc:	2f6f      	cmp	r7, #111	; 0x6f
 800aefe:	bf0c      	ite	eq
 800af00:	2308      	moveq	r3, #8
 800af02:	230a      	movne	r3, #10
 800af04:	2100      	movs	r1, #0
 800af06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af0a:	6865      	ldr	r5, [r4, #4]
 800af0c:	60a5      	str	r5, [r4, #8]
 800af0e:	2d00      	cmp	r5, #0
 800af10:	bfa2      	ittt	ge
 800af12:	6821      	ldrge	r1, [r4, #0]
 800af14:	f021 0104 	bicge.w	r1, r1, #4
 800af18:	6021      	strge	r1, [r4, #0]
 800af1a:	b90e      	cbnz	r6, 800af20 <_printf_i+0x114>
 800af1c:	2d00      	cmp	r5, #0
 800af1e:	d04b      	beq.n	800afb8 <_printf_i+0x1ac>
 800af20:	4615      	mov	r5, r2
 800af22:	fbb6 f1f3 	udiv	r1, r6, r3
 800af26:	fb03 6711 	mls	r7, r3, r1, r6
 800af2a:	5dc7      	ldrb	r7, [r0, r7]
 800af2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800af30:	4637      	mov	r7, r6
 800af32:	42bb      	cmp	r3, r7
 800af34:	460e      	mov	r6, r1
 800af36:	d9f4      	bls.n	800af22 <_printf_i+0x116>
 800af38:	2b08      	cmp	r3, #8
 800af3a:	d10b      	bne.n	800af54 <_printf_i+0x148>
 800af3c:	6823      	ldr	r3, [r4, #0]
 800af3e:	07de      	lsls	r6, r3, #31
 800af40:	d508      	bpl.n	800af54 <_printf_i+0x148>
 800af42:	6923      	ldr	r3, [r4, #16]
 800af44:	6861      	ldr	r1, [r4, #4]
 800af46:	4299      	cmp	r1, r3
 800af48:	bfde      	ittt	le
 800af4a:	2330      	movle	r3, #48	; 0x30
 800af4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800af50:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800af54:	1b52      	subs	r2, r2, r5
 800af56:	6122      	str	r2, [r4, #16]
 800af58:	f8cd a000 	str.w	sl, [sp]
 800af5c:	464b      	mov	r3, r9
 800af5e:	aa03      	add	r2, sp, #12
 800af60:	4621      	mov	r1, r4
 800af62:	4640      	mov	r0, r8
 800af64:	f7ff fee4 	bl	800ad30 <_printf_common>
 800af68:	3001      	adds	r0, #1
 800af6a:	d14a      	bne.n	800b002 <_printf_i+0x1f6>
 800af6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af70:	b004      	add	sp, #16
 800af72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af76:	6823      	ldr	r3, [r4, #0]
 800af78:	f043 0320 	orr.w	r3, r3, #32
 800af7c:	6023      	str	r3, [r4, #0]
 800af7e:	4833      	ldr	r0, [pc, #204]	; (800b04c <_printf_i+0x240>)
 800af80:	2778      	movs	r7, #120	; 0x78
 800af82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800af86:	6823      	ldr	r3, [r4, #0]
 800af88:	6829      	ldr	r1, [r5, #0]
 800af8a:	061f      	lsls	r7, r3, #24
 800af8c:	f851 6b04 	ldr.w	r6, [r1], #4
 800af90:	d402      	bmi.n	800af98 <_printf_i+0x18c>
 800af92:	065f      	lsls	r7, r3, #25
 800af94:	bf48      	it	mi
 800af96:	b2b6      	uxthmi	r6, r6
 800af98:	07df      	lsls	r7, r3, #31
 800af9a:	bf48      	it	mi
 800af9c:	f043 0320 	orrmi.w	r3, r3, #32
 800afa0:	6029      	str	r1, [r5, #0]
 800afa2:	bf48      	it	mi
 800afa4:	6023      	strmi	r3, [r4, #0]
 800afa6:	b91e      	cbnz	r6, 800afb0 <_printf_i+0x1a4>
 800afa8:	6823      	ldr	r3, [r4, #0]
 800afaa:	f023 0320 	bic.w	r3, r3, #32
 800afae:	6023      	str	r3, [r4, #0]
 800afb0:	2310      	movs	r3, #16
 800afb2:	e7a7      	b.n	800af04 <_printf_i+0xf8>
 800afb4:	4824      	ldr	r0, [pc, #144]	; (800b048 <_printf_i+0x23c>)
 800afb6:	e7e4      	b.n	800af82 <_printf_i+0x176>
 800afb8:	4615      	mov	r5, r2
 800afba:	e7bd      	b.n	800af38 <_printf_i+0x12c>
 800afbc:	682b      	ldr	r3, [r5, #0]
 800afbe:	6826      	ldr	r6, [r4, #0]
 800afc0:	6961      	ldr	r1, [r4, #20]
 800afc2:	1d18      	adds	r0, r3, #4
 800afc4:	6028      	str	r0, [r5, #0]
 800afc6:	0635      	lsls	r5, r6, #24
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	d501      	bpl.n	800afd0 <_printf_i+0x1c4>
 800afcc:	6019      	str	r1, [r3, #0]
 800afce:	e002      	b.n	800afd6 <_printf_i+0x1ca>
 800afd0:	0670      	lsls	r0, r6, #25
 800afd2:	d5fb      	bpl.n	800afcc <_printf_i+0x1c0>
 800afd4:	8019      	strh	r1, [r3, #0]
 800afd6:	2300      	movs	r3, #0
 800afd8:	6123      	str	r3, [r4, #16]
 800afda:	4615      	mov	r5, r2
 800afdc:	e7bc      	b.n	800af58 <_printf_i+0x14c>
 800afde:	682b      	ldr	r3, [r5, #0]
 800afe0:	1d1a      	adds	r2, r3, #4
 800afe2:	602a      	str	r2, [r5, #0]
 800afe4:	681d      	ldr	r5, [r3, #0]
 800afe6:	6862      	ldr	r2, [r4, #4]
 800afe8:	2100      	movs	r1, #0
 800afea:	4628      	mov	r0, r5
 800afec:	f7f5 f8d8 	bl	80001a0 <memchr>
 800aff0:	b108      	cbz	r0, 800aff6 <_printf_i+0x1ea>
 800aff2:	1b40      	subs	r0, r0, r5
 800aff4:	6060      	str	r0, [r4, #4]
 800aff6:	6863      	ldr	r3, [r4, #4]
 800aff8:	6123      	str	r3, [r4, #16]
 800affa:	2300      	movs	r3, #0
 800affc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b000:	e7aa      	b.n	800af58 <_printf_i+0x14c>
 800b002:	6923      	ldr	r3, [r4, #16]
 800b004:	462a      	mov	r2, r5
 800b006:	4649      	mov	r1, r9
 800b008:	4640      	mov	r0, r8
 800b00a:	47d0      	blx	sl
 800b00c:	3001      	adds	r0, #1
 800b00e:	d0ad      	beq.n	800af6c <_printf_i+0x160>
 800b010:	6823      	ldr	r3, [r4, #0]
 800b012:	079b      	lsls	r3, r3, #30
 800b014:	d413      	bmi.n	800b03e <_printf_i+0x232>
 800b016:	68e0      	ldr	r0, [r4, #12]
 800b018:	9b03      	ldr	r3, [sp, #12]
 800b01a:	4298      	cmp	r0, r3
 800b01c:	bfb8      	it	lt
 800b01e:	4618      	movlt	r0, r3
 800b020:	e7a6      	b.n	800af70 <_printf_i+0x164>
 800b022:	2301      	movs	r3, #1
 800b024:	4632      	mov	r2, r6
 800b026:	4649      	mov	r1, r9
 800b028:	4640      	mov	r0, r8
 800b02a:	47d0      	blx	sl
 800b02c:	3001      	adds	r0, #1
 800b02e:	d09d      	beq.n	800af6c <_printf_i+0x160>
 800b030:	3501      	adds	r5, #1
 800b032:	68e3      	ldr	r3, [r4, #12]
 800b034:	9903      	ldr	r1, [sp, #12]
 800b036:	1a5b      	subs	r3, r3, r1
 800b038:	42ab      	cmp	r3, r5
 800b03a:	dcf2      	bgt.n	800b022 <_printf_i+0x216>
 800b03c:	e7eb      	b.n	800b016 <_printf_i+0x20a>
 800b03e:	2500      	movs	r5, #0
 800b040:	f104 0619 	add.w	r6, r4, #25
 800b044:	e7f5      	b.n	800b032 <_printf_i+0x226>
 800b046:	bf00      	nop
 800b048:	0800be31 	.word	0x0800be31
 800b04c:	0800be42 	.word	0x0800be42

0800b050 <__malloc_lock>:
 800b050:	4801      	ldr	r0, [pc, #4]	; (800b058 <__malloc_lock+0x8>)
 800b052:	f7ff bc65 	b.w	800a920 <__retarget_lock_acquire_recursive>
 800b056:	bf00      	nop
 800b058:	200008a8 	.word	0x200008a8

0800b05c <__malloc_unlock>:
 800b05c:	4801      	ldr	r0, [pc, #4]	; (800b064 <__malloc_unlock+0x8>)
 800b05e:	f7ff bc60 	b.w	800a922 <__retarget_lock_release_recursive>
 800b062:	bf00      	nop
 800b064:	200008a8 	.word	0x200008a8

0800b068 <_realloc_r>:
 800b068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b06c:	4680      	mov	r8, r0
 800b06e:	4614      	mov	r4, r2
 800b070:	460e      	mov	r6, r1
 800b072:	b921      	cbnz	r1, 800b07e <_realloc_r+0x16>
 800b074:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b078:	4611      	mov	r1, r2
 800b07a:	f7ff bdd9 	b.w	800ac30 <_malloc_r>
 800b07e:	b92a      	cbnz	r2, 800b08c <_realloc_r+0x24>
 800b080:	f000 f84c 	bl	800b11c <_free_r>
 800b084:	4625      	mov	r5, r4
 800b086:	4628      	mov	r0, r5
 800b088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b08c:	f000 f890 	bl	800b1b0 <_malloc_usable_size_r>
 800b090:	4284      	cmp	r4, r0
 800b092:	4607      	mov	r7, r0
 800b094:	d802      	bhi.n	800b09c <_realloc_r+0x34>
 800b096:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b09a:	d812      	bhi.n	800b0c2 <_realloc_r+0x5a>
 800b09c:	4621      	mov	r1, r4
 800b09e:	4640      	mov	r0, r8
 800b0a0:	f7ff fdc6 	bl	800ac30 <_malloc_r>
 800b0a4:	4605      	mov	r5, r0
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	d0ed      	beq.n	800b086 <_realloc_r+0x1e>
 800b0aa:	42bc      	cmp	r4, r7
 800b0ac:	4622      	mov	r2, r4
 800b0ae:	4631      	mov	r1, r6
 800b0b0:	bf28      	it	cs
 800b0b2:	463a      	movcs	r2, r7
 800b0b4:	f7ff fc36 	bl	800a924 <memcpy>
 800b0b8:	4631      	mov	r1, r6
 800b0ba:	4640      	mov	r0, r8
 800b0bc:	f000 f82e 	bl	800b11c <_free_r>
 800b0c0:	e7e1      	b.n	800b086 <_realloc_r+0x1e>
 800b0c2:	4635      	mov	r5, r6
 800b0c4:	e7df      	b.n	800b086 <_realloc_r+0x1e>

0800b0c6 <memmove>:
 800b0c6:	4288      	cmp	r0, r1
 800b0c8:	b510      	push	{r4, lr}
 800b0ca:	eb01 0402 	add.w	r4, r1, r2
 800b0ce:	d902      	bls.n	800b0d6 <memmove+0x10>
 800b0d0:	4284      	cmp	r4, r0
 800b0d2:	4623      	mov	r3, r4
 800b0d4:	d807      	bhi.n	800b0e6 <memmove+0x20>
 800b0d6:	1e43      	subs	r3, r0, #1
 800b0d8:	42a1      	cmp	r1, r4
 800b0da:	d008      	beq.n	800b0ee <memmove+0x28>
 800b0dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0e4:	e7f8      	b.n	800b0d8 <memmove+0x12>
 800b0e6:	4402      	add	r2, r0
 800b0e8:	4601      	mov	r1, r0
 800b0ea:	428a      	cmp	r2, r1
 800b0ec:	d100      	bne.n	800b0f0 <memmove+0x2a>
 800b0ee:	bd10      	pop	{r4, pc}
 800b0f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0f8:	e7f7      	b.n	800b0ea <memmove+0x24>
	...

0800b0fc <_sbrk_r>:
 800b0fc:	b538      	push	{r3, r4, r5, lr}
 800b0fe:	4d06      	ldr	r5, [pc, #24]	; (800b118 <_sbrk_r+0x1c>)
 800b100:	2300      	movs	r3, #0
 800b102:	4604      	mov	r4, r0
 800b104:	4608      	mov	r0, r1
 800b106:	602b      	str	r3, [r5, #0]
 800b108:	f7f6 fc64 	bl	80019d4 <_sbrk>
 800b10c:	1c43      	adds	r3, r0, #1
 800b10e:	d102      	bne.n	800b116 <_sbrk_r+0x1a>
 800b110:	682b      	ldr	r3, [r5, #0]
 800b112:	b103      	cbz	r3, 800b116 <_sbrk_r+0x1a>
 800b114:	6023      	str	r3, [r4, #0]
 800b116:	bd38      	pop	{r3, r4, r5, pc}
 800b118:	200008b4 	.word	0x200008b4

0800b11c <_free_r>:
 800b11c:	b538      	push	{r3, r4, r5, lr}
 800b11e:	4605      	mov	r5, r0
 800b120:	2900      	cmp	r1, #0
 800b122:	d041      	beq.n	800b1a8 <_free_r+0x8c>
 800b124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b128:	1f0c      	subs	r4, r1, #4
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	bfb8      	it	lt
 800b12e:	18e4      	addlt	r4, r4, r3
 800b130:	f7ff ff8e 	bl	800b050 <__malloc_lock>
 800b134:	4a1d      	ldr	r2, [pc, #116]	; (800b1ac <_free_r+0x90>)
 800b136:	6813      	ldr	r3, [r2, #0]
 800b138:	b933      	cbnz	r3, 800b148 <_free_r+0x2c>
 800b13a:	6063      	str	r3, [r4, #4]
 800b13c:	6014      	str	r4, [r2, #0]
 800b13e:	4628      	mov	r0, r5
 800b140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b144:	f7ff bf8a 	b.w	800b05c <__malloc_unlock>
 800b148:	42a3      	cmp	r3, r4
 800b14a:	d908      	bls.n	800b15e <_free_r+0x42>
 800b14c:	6820      	ldr	r0, [r4, #0]
 800b14e:	1821      	adds	r1, r4, r0
 800b150:	428b      	cmp	r3, r1
 800b152:	bf01      	itttt	eq
 800b154:	6819      	ldreq	r1, [r3, #0]
 800b156:	685b      	ldreq	r3, [r3, #4]
 800b158:	1809      	addeq	r1, r1, r0
 800b15a:	6021      	streq	r1, [r4, #0]
 800b15c:	e7ed      	b.n	800b13a <_free_r+0x1e>
 800b15e:	461a      	mov	r2, r3
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	b10b      	cbz	r3, 800b168 <_free_r+0x4c>
 800b164:	42a3      	cmp	r3, r4
 800b166:	d9fa      	bls.n	800b15e <_free_r+0x42>
 800b168:	6811      	ldr	r1, [r2, #0]
 800b16a:	1850      	adds	r0, r2, r1
 800b16c:	42a0      	cmp	r0, r4
 800b16e:	d10b      	bne.n	800b188 <_free_r+0x6c>
 800b170:	6820      	ldr	r0, [r4, #0]
 800b172:	4401      	add	r1, r0
 800b174:	1850      	adds	r0, r2, r1
 800b176:	4283      	cmp	r3, r0
 800b178:	6011      	str	r1, [r2, #0]
 800b17a:	d1e0      	bne.n	800b13e <_free_r+0x22>
 800b17c:	6818      	ldr	r0, [r3, #0]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	6053      	str	r3, [r2, #4]
 800b182:	4408      	add	r0, r1
 800b184:	6010      	str	r0, [r2, #0]
 800b186:	e7da      	b.n	800b13e <_free_r+0x22>
 800b188:	d902      	bls.n	800b190 <_free_r+0x74>
 800b18a:	230c      	movs	r3, #12
 800b18c:	602b      	str	r3, [r5, #0]
 800b18e:	e7d6      	b.n	800b13e <_free_r+0x22>
 800b190:	6820      	ldr	r0, [r4, #0]
 800b192:	1821      	adds	r1, r4, r0
 800b194:	428b      	cmp	r3, r1
 800b196:	bf04      	itt	eq
 800b198:	6819      	ldreq	r1, [r3, #0]
 800b19a:	685b      	ldreq	r3, [r3, #4]
 800b19c:	6063      	str	r3, [r4, #4]
 800b19e:	bf04      	itt	eq
 800b1a0:	1809      	addeq	r1, r1, r0
 800b1a2:	6021      	streq	r1, [r4, #0]
 800b1a4:	6054      	str	r4, [r2, #4]
 800b1a6:	e7ca      	b.n	800b13e <_free_r+0x22>
 800b1a8:	bd38      	pop	{r3, r4, r5, pc}
 800b1aa:	bf00      	nop
 800b1ac:	200008ac 	.word	0x200008ac

0800b1b0 <_malloc_usable_size_r>:
 800b1b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1b4:	1f18      	subs	r0, r3, #4
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	bfbc      	itt	lt
 800b1ba:	580b      	ldrlt	r3, [r1, r0]
 800b1bc:	18c0      	addlt	r0, r0, r3
 800b1be:	4770      	bx	lr

0800b1c0 <_init>:
 800b1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c2:	bf00      	nop
 800b1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c6:	bc08      	pop	{r3}
 800b1c8:	469e      	mov	lr, r3
 800b1ca:	4770      	bx	lr

0800b1cc <_fini>:
 800b1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ce:	bf00      	nop
 800b1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1d2:	bc08      	pop	{r3}
 800b1d4:	469e      	mov	lr, r3
 800b1d6:	4770      	bx	lr
